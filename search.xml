<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>意外未保存的数据？angular杀手锏CanDeactivate</title>
    <url>/2019/10/02/ng-canDeactivate/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>实际工作中，你有没有填写表单的时候，错误地点击了某一个按钮，或者没有完成整个填写表单过程就退回去了，最后刚刚填写的一推信息全丢失了，重新进入一片空白，还得重新填！这简直不能忍受！</p>
<p>在angular中有没有办法可以解决以上问题呢？答案是肯定的。<strong>CanDeactivate</strong>路由拦截器，除非给定条件成立，否则Angular路由无法从当前页面路由到另一个页面。</p>
<h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><ul>
<li>首先创建路由拦截器</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserComponent &#125; <span class="keyword">from</span> <span class="string">'./user/user.component'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserGuard <span class="keyword">implements</span> CanDeactivate&lt;UserComponent&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    canDeactivate(component: UserComponent, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (component.userForm.dirty) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.confirm(<span class="string">'你有未保存的数据，是否要离开？'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的Angular装饰器</title>
    <url>/2019/10/02/ng-decorator/</url>
    <content><![CDATA[<h4 id="1-Attribute"><a href="#1-Attribute" class="headerlink" title="1. @Attribute"></a>1. @Attribute</h4><p>顾名思义，是用来寻找宿主元素属性值的。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'[test]'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TestDirective &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    <span class="meta">@Attribute</span>(<span class="string">'type'</span>) <span class="keyword">type</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">  </span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">type</span>); <span class="comment">// text</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;input type="text" test&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;&#125;</span></pre></td></tr></table></figure>


<h4 id="2-ViewChildren"><a href="#2-ViewChildren" class="headerlink" title="2. @ViewChildren"></a>2. @ViewChildren</h4><ul>
<li>装饰器可以从View DOM返回指定的元素或指令作为queryList。queryList存储的是项目列表对象，值得注意的是：<strong>当应用程序的状态发生变化时，Angular会自动为queryList更新对象项</strong>。</li>
<li>queryList有很多API，其中：<ul>
<li>getter属性：<ul>
<li>first — 获取第一个item</li>
<li>last — 获取最后一个item</li>
<li>length — 返回queryList的长度</li>
</ul>
</li>
<li>Method方法：<ul>
<li>map()，filter()，find()，reduce()，forEach()，some()。</li>
<li>其中toArray()，可以返回items形式的数组。</li>
<li>changes()可以进行订阅，返回items的Observable。</li>
</ul>
</li>
</ul>
</li>
<li>queryist注意事项：<ul>
<li>只有在ngAfterViewInit生命周期方法之后才能得到。</li>
<li>返回的item不包含ng-content标签里的item。</li>
</ul>
</li>
<li>默认情况下，queryList返回的组件的实例，如果想要返回原生的Dom，则需要声明第二个参数，例如：<code>@ViewChildren(AlertComponent, { read: ElementRef }) alerts: QueryList&lt;AlertComponent&gt;</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'alert'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#123;&#123;type&#125;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AlertComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@Input</span>() <span class="keyword">type</span>: <span class="built_in">string</span> = <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;alert&gt;&lt;/alert&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;alert type="danger"&gt;&lt;/alert&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;alert type="info"&gt;&lt;/alert&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@ViewChildren</span>(AlertComponent) alerts: QueryList&lt;AlertComponent&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngAfterViewInit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.alerts.forEach(<span class="function"><span class="params">alertInstance</span> =&gt;</span> <span class="built_in">console</span>.log(alertInstance));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="3-ViewChild"><a href="#3-ViewChild" class="headerlink" title="3. @ViewChild"></a>3. @ViewChild</h4><p>和ViewChildren类似，但它只返回匹配到的第一个元素或与视图DOM中的选择器匹配的指令。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'alert'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#123;&#123;type&#125;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AlertComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@Input</span>() <span class="keyword">type</span>: <span class="built_in">string</span> = <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;alert&gt;&lt;/alert&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;div #divElement&gt;Tada!&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 返回宿主元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">"divElement"</span>) div: <span class="built_in">any</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 返回组件实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@ViewChild</span>(AlertComponent) alert: AlertComponent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngAfterViewInit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.div);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.alert);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="4-ContentChildren"><a href="#4-ContentChildren" class="headerlink" title="4. @ContentChildren"></a>4. @ContentChildren</h4><p>装饰器从Content DOM返回指定的元素或指令作为queryList，值得注意的是：</p>
<ul>
<li>只有在ngAfterViewInit生命周期方法之后才能得到。</li>
<li>ContentChildren仅包含ng-content标签内存在的元素。</li>
<li>返回的queryList和<code>@ViewChildren</code>一样。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'tab'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@Input</span>() title;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'tabs'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;ng-content&gt;&lt;/ng-content&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="meta">@ContentChildren</span>(TabComponent) tabs: QueryList&lt;TabComponent&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> ngAfterContentInit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">this</span>.tabs.forEach(<span class="function"><span class="params">tabInstance</span> =&gt;</span> <span class="built_in">console</span>.log(tabInstance))</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;tabs&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">     &lt;tab title="One"&gt;&lt;/tab&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">     &lt;tab title="Two"&gt;&lt;/tab&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;/tabs&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;&#125;</span></pre></td></tr></table></figure>


<h4 id="5-ContentChild"><a href="#5-ContentChild" class="headerlink" title="5. @ContentChild"></a>5. @ContentChild</h4><p>和<code>@ContentChildren</code>类似，但仅返回与Content DOM中的选择器匹配的第一个元素或指令。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'tabs'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;ng-content&gt;&lt;/ng-content&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="meta">@ContentChild</span>(<span class="string">"divElement"</span>) div: <span class="built_in">any</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> ngAfterContentInit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.div);</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;tabs&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">     &lt;div #divElement&gt;Tada!&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;/tabs&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;&#125;</span></pre></td></tr></table></figure>


<h4 id="6-HostBinding"><a href="#6-HostBinding" class="headerlink" title="6. @HostBinding"></a>6. @HostBinding</h4><p>声明一个属性绑定到hosts上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Directive(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &#39;[host-binding]&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class HostBindingDirective &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostBinding(&quot;class.tooltip&quot;) tooltip &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostBinding(&quot;class.tooltip&quot;) </span></pre></td></tr><tr><td class="code"><pre><span class="line">  get tooltipAsGetter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 你的逻辑</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostBinding() type &#x3D; &quot;text&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &#39;my-app&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: &#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type&#x3D;&quot;text&quot; host-binding&gt; &#x2F;&#x2F; &#39;tooltip&#39; class 将被添加到host元素上</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#96;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class App &#123;&#125;</span></pre></td></tr></table></figure>


<h4 id="7-HostListener"><a href="#7-HostListener" class="headerlink" title="7. @HostListener"></a>7. @HostListener</h4><p>敬请期待，学习中…</p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular文件下载</title>
    <url>/2019/10/01/ng-file-download/</url>
    <content><![CDATA[<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件下载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">downloadPdf(id: <span class="built_in">number</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">this</span>.http.post(<span class="string">'/api/documents'</span>, &#123; id &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .subscribe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      (base64Pdf: <span class="built_in">string</span>) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> arrayBuffer = base64ToArrayBuffer(base64Pdf); <span class="comment">// 创建Array缓冲区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        createAndDownloadBlobFile(arrayBuffer, <span class="string">'testName'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      error =&gt; <span class="built_in">console</span>.error(error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Base64到数组缓冲区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">base64ToArrayBuffer</span>(<span class="params">base64: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> binaryString = <span class="built_in">window</span>.atob(base64); <span class="comment">//如果不使用base64，则注释这个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(binaryString.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> bytes.map(<span class="function">(<span class="params">byte, i</span>) =&gt;</span> binaryString.charCodeAt(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Blob对象并下载文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">createAndDownloadBlobFile(body, filename, extension = <span class="string">'pdf'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([body]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;extension&#125;</span>`</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (navigator.msSaveBlob) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// IE 10+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    navigator.msSaveBlob(blob, fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//支持HTML5下载属性的浏览器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (link.download !== <span class="literal">undefined</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> url = URL.createObjectURL(blob);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      link.setAttribute(<span class="string">'href'</span>, url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      link.setAttribute(<span class="string">'download'</span>, fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      link.style.visibility = <span class="string">'hidden'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">document</span>.body.appendChild(link);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      link.click();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">document</span>.body.removeChild(link);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建一个属于自己的Angular Library并发布到npm</title>
    <url>/2019/10/01/ng-library/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>Angular CLI 7.0.0 增加了一个令人兴奋的脚手架配置项：–create-application，其中默认值是true，如果不设置，则在新工作空间的src文件夹中创建一个新的初始应用程序项目。如果为false，则创建一个没有初始应用程序的空工作区。想了解更多配置项，<a href="https://angular.io/cli/new" target="_blank" rel="noopener">动起你的小鼠标用力点击这里</a>。</p>
<h4 id="2-第1步：创建Library库工作空间"><a href="#2-第1步：创建Library库工作空间" class="headerlink" title="2. 第1步：创建Library库工作空间"></a>2. 第1步：创建Library库工作空间</h4><p>Angular CLI 7.0.0的键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng new foo-lib --create-application&#x3D;false</span></pre></td></tr></table></figure>

<p>这个时候我们会看到项目文件中的一些变化：</p>
<ul>
<li>package.json<ul>
<li>angular需要的所有常用依赖项</li>
</ul>
</li>
<li>angular.json<ul>
<li>Angular配置文件，但没有项目</li>
</ul>
</li>
<li>README.md、tsconfig.json、tslint.json、node_modules<ul>
<li>基本和我们的构建初始化项目的内容结构一致</li>
</ul>
</li>
</ul>
<p>等等，这…，你会惊奇的发现项目目录中竟然没有src目录！别着急，因为我们使用–create-application=false所以创建的应用是空的。</p>
<h4 id="3-第2步：初始化Library库项目"><a href="#3-第2步：初始化Library库项目" class="headerlink" title="3. 第2步：初始化Library库项目"></a>3. 第2步：初始化Library库项目</h4><p>键入以下命令创建Lib项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd foo-lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">ng generate library foo-lib --prefix&#x3D;foo</span></pre></td></tr></table></figure>

<p>其中–prefix指令是用于初始项目的时候生成选择器（ng genreate）的前缀。详细配置项请看前言部分的超链接。如果你不指定，默认是lib。</p>
<p>执行完命令之后，我们发现项目中多了一个project文件夹，里边有个Library工程：<strong>foo-lib</strong>。</p>
<h4 id="4-第3步：创建Library库测试项目"><a href="#4-第3步：创建Library库测试项目" class="headerlink" title="4. 第3步：创建Library库测试项目"></a>4. 第3步：创建Library库测试项目</h4><p>我们需要一个可以用来调用我们的Angular库的项目，键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng generate application foo-tester</span></pre></td></tr></table></figure>

<p>执行完命令之后，我们可以看到，project文件下又多出了一个文件夹：<strong>foo-tester</strong>，即我们的测试项目。另外，Angular CLI还添加了一个foo-tester-e2e项目，用于端到端测试。对于不写测试用例.spec的强迫症患者拯救大心丸：–minimal=true。</p>
<h4 id="5-第4步：开发Library和测试Library"><a href="#5-第4步：开发Library和测试Library" class="headerlink" title="5. 第4步：开发Library和测试Library"></a>5. 第4步：开发Library和测试Library</h4><html>
<h1 style="font-size: 84px">Codeing...</h1>
</html>


<h4 id="6-第5步：构建打包Library"><a href="#6-第5步：构建打包Library" class="headerlink" title="6.第5步：构建打包Library"></a>6.第5步：构建打包Library</h4><p>Angular CLI从6.1开始，始终在生产模式下构建库，因此我们不使用–prod,只需键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng build foo-lib</span></pre></td></tr></table></figure>

<h6 id="以下为温馨提醒："><a href="#以下为温馨提醒：" class="headerlink" title="以下为温馨提醒："></a>以下为温馨提醒：</h6><hr>
<blockquote>
<p>如果想构建自己的测试项目则键入以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng build foo-tester --prod</span></pre></td></tr></table></figure>

<p>和构建Library库不一样的是，构建测试应用必须指定：–prod。</p>
<blockquote>
<p>如果想启动自己的测试项目，则键入以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng serve foo-tester</span></pre></td></tr></table></figure>

<blockquote>
<p>如果想测试自己的Library，则键入以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng test foo-lib</span></pre></td></tr></table></figure>

<blockquote>
<p>如果想测试自己的测试项目，则键入以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng test foo-tester</span></pre></td></tr></table></figure>

<hr>
<h4 id="7-第6步：发布我们自己的Library"><a href="#7-第6步：发布我们自己的Library" class="headerlink" title="7. 第6步：发布我们自己的Library"></a>7. 第6步：发布我们自己的Library</h4><p>如果想发布到npm，则需注册一个自己的npm账号，如果已经有了且已经登录，则键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd dist&#x2F;foo-lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm publish</span></pre></td></tr></table></figure>


<h4 id="8-第7步：使用我们的Library"><a href="#8-第7步：使用我们的Library" class="headerlink" title="8. 第7步：使用我们的Library"></a>8. 第7步：使用我们的Library</h4><p>和其他第三方包一样，只需要npm install你的自己发布的Library包即可，项目根目录终端键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -S foo-lib</span></pre></td></tr></table></figure>

<p>这个时候你会看到你的项目package.json中的dependencies依赖项中增加了一项：foo-lib。然后在Angular模块中引入即可。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FooLibModule &#125; <span class="keyword">from</span> <span class="string">'foo-lib'</span>; <span class="comment">// 导入你的Library</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  declarations: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AppComponent</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  imports: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    BrowserModule,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FooLibModule <span class="comment">// 导入你的Library</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  providers: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  bootstrap: [AppComponent]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span></pre></td></tr></table></figure>

<h4 id="9-第8步：最后的惊喜，如果维护自己的Library"><a href="#9-第8步：最后的惊喜，如果维护自己的Library" class="headerlink" title="9. 第8步：最后的惊喜，如果维护自己的Library"></a>9. 第8步：最后的惊喜，如果维护自己的Library</h4><p>npm发布版本有些注意事项，每次构建发布需要注意以下规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.npm插件发布</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm addUser  &#x2F;&#x2F; 分别输入用户名、密码、邮箱</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm publish  &#x2F;&#x2F; 直接发布</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm login    &#x2F;&#x2F; 非第一次发版本则用此命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm unpublish --force &#x2F;&#x2F; 取消插件发布【谨慎使用】</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm deprecate &lt;pkg&gt;[@&lt;version&gt;] &lt;message&gt; &#x2F;&#x2F; 并不会在社区里撤销你已有的包，但会在任何人尝试安装这个包的时候得到警告</span></pre></td></tr><tr><td class="code"><pre><span class="line">npx force-unpublish package-name &#39;原因描述&#39; &#x2F;&#x2F; 撤销不了？？试试这个</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 2.npm插件更新</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm version patch  &#x2F;&#x2F; 补丁【1.0.1】</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm version minor  &#x2F;&#x2F; 小改【1.1.0】</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm version major  &#x2F;&#x2F; 大改【2.0.0】</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#x2F;&#x2F; 注意需要再一次执行：npm publish</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 3.查看远程包版本信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm view xxx versions</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 4.npm查看本地全局安装过的包</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm list -g --depth&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 5.npm查看全局的包的安装路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm root -g</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 6.npm查看当前包的安装路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm root</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 7.npm将包安装到全局环境中</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install xxx -g</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 8.npm将信息写入package.json，并自动把模块和版本号添加到dependencies部分</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install xxx –save</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i -S xxx &#x2F;&#x2F; 简写版本</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 9.npm将信息写入package.json，并自动把模块和版本号添加到devdependencies部分</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install xxx –save-dve</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i -D xxx &#x2F;&#x2F; 简写版本</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 10.npm单独更新某个包</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm update xxx</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 11.npm更新至最新版</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install -g npm</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 12.npm淘宝镜像</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr></table></figure>


<h5 id="10-第9步：最后的最后，如果你喜欢这篇文章，不妨点个赞"><a href="#10-第9步：最后的最后，如果你喜欢这篇文章，不妨点个赞" class="headerlink" title="10. 第9步：最后的最后，如果你喜欢这篇文章，不妨点个赞"></a>10. 第9步：最后的最后，如果你喜欢这篇文章，不妨点个赞</h5>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular Router Resolve预加载数据</title>
    <url>/2019/09/30/ng-router-resolve/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>开发中我们可能会遇到这样一个问题：路由到一个新的页面前可能需要某些数据才能在要加载的新页面请求数据，这个时候如果我们路由到新页面再去获取预先的数据有可能来不及或者是带来不好的用户体验。这个时候如果有一种办法能在即将加载新页面的时候就预准备好了必要数据，等到加载新页面的时候整好可以拿到数据，那就很完美了。<strong>Angular Router Resolve</strong>就是这样的一种存在！</p>
<h6 id="以下是例子"><a href="#以下是例子" class="headerlink" title="以下是例子"></a>以下是例子</h6><hr>
<h4 id="2-第1步：创建用户组件"><a href="#2-第1步：创建用户组件" class="headerlink" title="2. 第1步：创建用户组件"></a>2. 第1步：创建用户组件</h4><p>创建一个用户模块，假设我们一进到页面就要先拿到用户数据。在组件内部，可以通过注入ActivatedRoute来加载预取数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ActivatedRoute &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">'./user'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApiService &#125; <span class="keyword">from</span> <span class="string">'./api.service'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'app-editor'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;div class="row"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;div class="col-md-3 mb-3" *ngFor="let user of users"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &lt;div class="card"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                &lt;div class="card-body"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                    &lt;h5 class="card-title"&gt;&#123;&#123;user.name&#125;&#125;&lt;/h5&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                    &lt;p class="card-text"&gt;&#123;&#123;user.username&#125;&#125;&lt;/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                    &lt;a [href]="'http://www.'+user.website" class="btn btn-primary"&gt;&#123;&#123;user.website&#125;&#125;&lt;/a&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                &lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  styles: [<span class="string">``</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserComponent <span class="keyword">implements</span> OnInit &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  users: Observable&lt;User[]&gt;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    <span class="keyword">private</span> api: ApiService,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    <span class="keyword">private</span> router: ActivatedRoute</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">  </span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.users = <span class="keyword">this</span>.router.snapshot.data.users; <span class="comment">// 获取到预加载的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.users);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngOnInit() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="3-第2步：创建用户服务"><a href="#3-第2步：创建用户服务" class="headerlink" title="3. 第2步：创建用户服务"></a>3. 第2步：创建用户服务</h4><p>创建一个service用于网络请求获取数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">'./user'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    url = <span class="string">'https://jsonplaceholder.typicode.com/users'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">        <span class="keyword">private</span> http: HttpClient</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    </span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    getUsers() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get&lt;User[]&gt;(<span class="keyword">this</span>.url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="4-第3步：创建用户模型"><a href="#4-第3步：创建用户模型" class="headerlink" title="4. 第3步：创建用户模型"></a>4. 第3步：创建用户模型</h4><p>创建数据Modal，这里有快捷方式，VSCode也有对应插件：JSON to ，或者使用在线版本的：<a href="http://www.jsontots.com/" target="_blank" rel="noopener">JsonToTs</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> User &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    id: <span class="built_in">number</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    username: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    email: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    address: Address;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    phone: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    website: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    company: Company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Company &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    catchPhrase: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    bs: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Address &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    street: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    suite: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    city: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    zipcode: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    geo: Geo;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Geo &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lat: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lng: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="5-第4步：创建路由Resolve"><a href="#5-第4步：创建路由Resolve" class="headerlink" title="5. 第4步：创建路由Resolve"></a>5. 第4步：创建路由Resolve</h4><p>实现Resolve接口的同时要重写resolve()方法，方法有两参数：ActivatedRouteSnapshot 和RouterStateSnaphot，这里用不到，主要返回我们想要预加载的数据的Observable（或promise或数据本身）。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Resolve, ActivatedRouteSnapshot, RouterStateSnapshot &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">'./user'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApiService &#125; <span class="keyword">from</span> <span class="string">'./api.service'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    providedIn: <span class="string">'root'</span> <span class="comment">// angular6新引入的装饰器配置，如果指定了'root'模式，就不用在任何@NgModule()装饰器中declarations(声明)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserResolveGuard <span class="keyword">implements</span> Resolve&lt;User[]&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">        <span class="keyword">private</span> apiService: ApiService</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    </span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        route: ActivatedRouteSnapshot,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        state: RouterStateSnapshot</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ): Observable&lt;<span class="built_in">any</span>&gt; | <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; | <span class="built_in">any</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.apiService.getUsers();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="6-第5步：路由配置"><a href="#6-第5步：路由配置" class="headerlink" title="6. 第5步：路由配置"></a>6. 第5步：路由配置</h4><p>在路由中，指定接受对象的resolve属性，它将通过路由器数据携带指定组件的预取或预加载数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserComponent &#125; <span class="keyword">from</span> <span class="string">'./user.component'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserResolveGuard &#125; <span class="keyword">from</span> <span class="string">'./user.guard'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123; path: <span class="string">'edit'</span>, component: UserComponent, resolve: &#123; users: UserResolveGuard&#125; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  imports: [RouterModule.forRoot(routes)],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  exports: [RouterModule]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123; &#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>深度解析angular中的ng-template</title>
    <url>/2019/09/29/ng-template-two/</url>
    <content><![CDATA[<h4 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h4><p>我们在angular项目中经常会用到<code>&lt;ng-template&gt;</code>，但是我们是否有想过放置在里边的代码最终都去哪儿了呢？</p>
<p>其实angular中的<code>&lt;ng-template&gt;</code>和HMTL中的<code>&lt;template&gt;</code>是类似的，都是作为预渲染的一个内容模版器，DOM解析器会处理里边的元素内容，以确保内容有效，但是元素的内容不会被渲染，在适当的时机，我们可以让它渲染到页面上。<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" target="_blank" rel="noopener">有关HTML的<code>&lt;template&gt;</code>介绍可以查看这里</a>。</p>
<h4 id="2-ng-template"><a href="#2-ng-template" class="headerlink" title="2. ng-template"></a>2. ng-template</h4><p>在@angular/core的核心库封装下，模版ng-template使用起来变得很简单。例如：</p>
<ol>
<li><p>这里我们声明模版</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">greet</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Thanks for your interest.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>在xxx.component.ts中，我们可以使用@ViewChild装饰器获取模版实例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(‘greet’) greetTemplate: TemplateRef&lt;<span class="built_in">any</span>&gt;;</span></pre></td></tr></table></figure>
</li>
<li><p>怎么使用呢？我们可以创建一个占位符来将模版插入，即：ng-container</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> #<span class="attr">placeholder</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>在xxx.component.ts中，我们可以使用@ViewChild装饰器获取占位符实例并通过addTemplate()方法将模版插入</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(‘placeholder’, &#123;read: ViewContainerRef&#125;) placeholderRef: ViewContainerRef;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">addTemplate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.placeholderRef.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.placeholderRef.createEmbeddedView(<span class="keyword">this</span>.greetTemplate); <span class="comment">// 创建嵌入式视图插入模版</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>我们还可以在模版中使用变量</p>
</li>
</ol>
<ul>
<li>html中：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">details</span> <span class="attr">let-name</span> <span class="attr">let-place</span>=<span class="string">”place”</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”container”</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”row”</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”col-md-3</span>"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”border</span> <span class="attr">p-3</span>"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;place&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span></pre></td></tr></table></figure>
<ul>
<li>ts中：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(‘details’) detailsTemplate: TemplateRef&lt;<span class="built_in">any</span>&gt;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.placeholderRef.createEmbeddedView(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.detailsTemplate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123; $implicit: ‘Pranesh’, place: ‘Erode’ &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>
<p>$implicit 属性值将被分配给未初始化的参数：let-name，let-place 初始化为上下文对象中放置属性：place。</p>
<p>除了在ts中通过typescript创建嵌入视图插入模版以及模版变量。我们也可以在html中通过angular提供的ngTemplateOutlet模版指令嵌入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> [<span class="attr">ngTemplateOutlet</span>]=<span class="string">”details”</span> [<span class="attr">ngTemplateOutletContext</span>]=<span class="string">”&#123;$implicit:</span> ‘<span class="attr">Pranesh</span>’, <span class="attr">place:</span> ‘<span class="attr">Erode</span>’&#125;”&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular templates模版内函数的最佳实践</title>
    <url>/2019/09/28/ng-templates/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在angular中，我们应该在templates中尽可能的少写逻辑代码，保持简洁，这样页面的加载效率会更好。但是我们经常会遇到要将某某属性绑定到元素上，又或者转换、动态计算以便插入对应的字符串。当我们在templates模版（插值表达式&#123;&#123;&#125;&#125;）中调用函数进行数据绑定或者字符串插值的时候，我们会发现我们的函数会被无限次调用（含鼠标在页面上移动）！</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">这是个很糟糕的体验，那么究其原因是什么呢？答案是：angular变更检测机制。函数在angular生命周期钩子函数ngDoCheck之后，这个钩子函数直接链接到每个变化检测周期。虽然templates模版（插值表达式&#123;&#123;&#125;&#125;）提供了getter方法，但它只能从某个变量中访问属性，我们如果计算函数更复杂，那么就会浪费用户机器资源，因为我们必须使用资源来计算相同的结果。</span></pre></td></tr></table></figure>

<h4 id="2-Angular纯管道"><a href="#2-Angular纯管道" class="headerlink" title="2. Angular纯管道"></a>2. Angular纯管道</h4><p>我们理想的是：只有在传递的任何参数发生变化时才应调用我们的函数。解决方案就是：Angular纯管道！它监视不可变类型的值更改以及对象的引用更改。如果想了解更详细的pipe管道信息可以查阅官方文档<br><a href="https://www.angular.cn/guide/pipes#pure-and-impure-pipes" target="_blank" rel="noopener">纯(pure)管道与非纯(impure)管道
</a>。</p>
<ul>
<li>Angular纯管道方案：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Pipe, PipeTransform&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="string">'execute'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExecutePipe <span class="keyword">implements</span> PipeTransform &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  transform(value: <span class="built_in">Function</span>, context, ...args): <span class="built_in">any</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> value.apply(context, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>使用方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设组件中有一个命名的函数getErrorMessage负责根据flag和用户获取某些消息role。使用方式如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&#123;getErrorMessage | execute:this:flag:role&#125;&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular中使用pipe管道过滤结果集</title>
    <url>/2019/09/27/ng-pipe-filter/</url>
    <content><![CDATA[<h4 id="1-引子"><a href="#1-引子" class="headerlink" title="1. 引子"></a>1. 引子</h4><p>假设我们需要一个过滤管道来负责过滤应用程序中的列表。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: ‘filter’</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> FilterPipe <span class="keyword">implements</span> PipeTransform &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  transform(arr: <span class="built_in">string</span>[], searchValue: <span class="built_in">string</span>) &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!searchValue) <span class="keyword">return</span> arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">value</span> =&gt;</span> &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> value.toLowerCase().indexOf(searchValue.toLowerCase()) &gt; <span class="number">-1</span>; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这里我们创建来一个数组，通过indexOf方法过滤数组中的元素，最终得到我们想要的列表。<br>使用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Component &#125; from &#39;@angular&#x2F;core&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; FormControl &#125; from &#39;@angular&#x2F;forms&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: ‘my-app’,</span></pre></td></tr><tr><td class="code"><pre><span class="line">   template: &#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &lt;input [formControl]&#x3D;&quot;search&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">     &lt;div *ngFor&#x3D;”let item of (items | filter:search.value)”&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;&#123;item&#125;&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">     &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class AppComponent &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  search &#x3D; new FormControl(); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  items &#x3D; [‘One’, ‘Two’, ‘Three’, ‘Four’];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h4><p>以上很完美解决了列表过滤的需求，但是这个时候产品想向用户展示检索结果集的数量。大多数时候，我们可能会想，不就是一个数组长度的事儿，有什么难的，然后codeing如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">”let</span> <span class="attr">item</span> <span class="attr">of</span> (<span class="attr">items</span> | <span class="attr">filter:search.value</span>)”&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#123;item&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;(items | filter:search.value).length&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure>

<p>但是，真不要这么干！你会发现我们写的管道会运行两次。angular4之后这个问题有了解决方案，那就是: <strong>as</strong>。借助as关键字将管道结果分配给局部变量，还等什么，升级改进我们的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">”let</span> <span class="attr">item</span> <span class="attr">of</span> (<span class="attr">items</span> | <span class="attr">filter:search.value</span>) <span class="attr">as</span> <span class="attr">result</span>”&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#123;item&#125;&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&#123;result.length&#125;&#125;</span></pre></td></tr></table></figure>

<p>这个时候你会发现控制台报错了…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cannot read property ‘length’ of undefined</span></pre></td></tr></table></figure>

<p>这不是玩我吗？有局部变量啊，为啥还会报错，解决方案是： <strong>ngIf</strong></p>
<p>最终的code如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">”(items</span> | <span class="attr">filter:search.value</span>) <span class="attr">as</span> <span class="attr">result</span>”&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">”let</span> <span class="attr">item</span> <span class="attr">of</span> <span class="attr">result</span>”&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123;item&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;result.length&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular项目从CSS迁移到SCSS</title>
    <url>/2019/09/26/ng-scss-migrate/</url>
    <content><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/8303589-4abecdc2df015a4f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>通常，当我们使用angular-cli启动应用程序时，默认情况下它将使用css，除非我们按以下方式创建项目。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng new your_application --style&#x3D;scss</span></pre></td></tr></table></figure>

<p>但是当我们开发项目到一半的时候，突然有一天研究某些东西后发现使用scss比css好用多了，这个时候我们将面临一个大问题，怎么将当前项目的css全部转成scss进行以后的开发且置为默认项呢？别着急，往下看！</p>
<h4 id="2-第1步：更改步骤"><a href="#2-第1步：更改步骤" class="headerlink" title="2. 第1步：更改步骤"></a>2. 第1步：更改步骤</h4><p>如果你使用的是最新的angular-cli，那最好了，如果不是请检查当前的angular-cli版本是否大于6.0.7，如果以上都没有问题，那么OK，请使用以下命令更改配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng config schematics.@schematics&#x2F;angular:component.styleext scss</span></pre></td></tr></table></figure>

<p>这个时候你会看到脚本会在项目的angular.json文件中做了如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;schematics&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;@schematics&#x2F;angular:component&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;styleext&quot;: &quot;scss&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="3-第2步：重命名css文件"><a href="#3-第2步：重命名css文件" class="headerlink" title="3. 第2步：重命名css文件"></a>3. 第2步：重命名css文件</h4><p>这个是头疼问题了，总不能挨个挨个修改吧，答案是拒绝的啦。如果您使用的是mac或linux，请从终端打开src文件夹，然后键入以下命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -name &quot;*.css&quot; -exec bash -c &#39;mv &quot;$1&quot; &quot;$&#123;1%.css&#125;&quot;.scss&#39; - &#39;&#123;&#125;&#39; \;</span></pre></td></tr></table></figure>
<p>ok！漂亮，现在你可以看下项目所有以.css后缀的文件全都重命名为.scss的后缀了！</p>
<p>==警告：请确保一定在项目src目录下打开终端，否则后果很严重！！！==</p>
<h4 id="3-更改所有引用"><a href="#3-更改所有引用" class="headerlink" title="3. 更改所有引用"></a>3. 更改所有引用</h4><p>有一些文件是需要修改css文件的位置的，通常有以下这些：</p>
<ul>
<li><strong>xxx.component.ts</strong>文件中@Component装饰器里styleUrls的css文件路径。</li>
<li>如果您引用bootstrap或font-awesome，则可以将导入其css文件的文件更改为.scss替代项。</li>
<li>在你的angular.json文件中，可能会引用你的style.css文件，你必须将它们改为.scss，因为我们已经重命名了它。</li>
</ul>
<p>完成了以上步骤之后（PS：如果你使用了font-awesome），则可能还会意外出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR in .&#x2F;src&#x2F;styles.scss (.&#x2F;node_modules&#x2F;raw-loader!.&#x2F;node_modules&#x2F;postcss-loader&#x2F;lib??embedded!.&#x2F;node_modules&#x2F;sass-loader&#x2F;lib&#x2F;loader.js??ref--15-3!.&#x2F;src&#x2F;styles.scss)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Module Error (from .&#x2F;node_modules&#x2F;postcss-loader&#x2F;lib&#x2F;index.js):</span></pre></td></tr><tr><td class="code"><pre><span class="line">(Emitted value instead of an instance of Error) CssSyntaxError: &#x2F;node_modules&#x2F;font-awesome&#x2F;scss&#x2F;_path.scss:9:4: Can&#39;t resolve &#39;..&#x2F;fonts&#x2F;fontawesome-webfont.woff&#39; in &#39;&#x2F;src&#39;</span></pre></td></tr></table></figure>

<p>好吧，这是我们不愿意看到的，在@importfont-awesome scss 之前添加以下行解决了这个问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$fa-font-path: &quot;~font-awesome&#x2F;fonts&quot;;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【take, first, takeUntil, concatAll】</title>
    <url>/2019/06/25/rxjs-take-first-takeUnitl-concatAll/</url>
    <content><![CDATA[<h1 id="Rxjs学习之路"><a href="#Rxjs学习之路" class="headerlink" title="Rxjs学习之路"></a>Rxjs学习之路</h1><h4 id="1、小贴士"><a href="#1、小贴士" class="headerlink" title="1、小贴士"></a>1、小贴士</h4><p>这篇文章是我的Angular Rxjs Series中的第篇三文章，在继续阅读本文之前，您至少应该熟悉系列中的第一篇基础文章：</p>
<p><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></p>
<p><a href="https://www.jianshu.com/p/fc0e30328de3" target="_blank" rel="noopener">Rxjs【Observable】</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 特别提示：以下的操作符介绍均采用rxjs6的写法！！！</span></span></pre></td></tr></table></figure>


<h4 id="2、take"><a href="#2、take" class="headerlink" title="2、take"></a>2、take</h4><pre><code>take就是取前几个元素后就结束</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：      interval(1000).pipe(take(4))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:    -----0-----1-----2-----3-----4--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                      take(4)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest     -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> takeObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">takeObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="3、first"><a href="#3、first" class="headerlink" title="3、first"></a>3、first</h4><pre><code>first就是取第一个元素后结束</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：       interval(1000).pipe(first())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:     -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                      first()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:     -----0|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> firstObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">firstObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="4、takeUntil"><a href="#4、takeUntil" class="headerlink" title="4、takeUntil"></a>4、takeUntil</h4><pre><code>takeUntil就是等到某一件事情【Observable形式的】发生的时候，让当前O1bservable 直送出完成(complete)信号</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：       interval(1000).pipe(takeUntil(click))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:     -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * click:      --------------------c-----</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                  takeUntil(click)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:     -----0-----1-----2--|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clickObservable = fromEvent(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'game'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'click'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> takeUnitlObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeUntil(clickObservable)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">takeUnitlObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="5、concatAll"><a href="#5、concatAll" class="headerlink" title="5、concatAll"></a>5、concatAll</h4><pre><code>有的时候我们的Observable里的元素还是Observable（Observable&lt;Observable&lt;T&gt;&gt;）,可以类似数组里边的元素还是数组（[[1,2], [3, 4]]）,这个时候我们希望是二维变成一维（[1, 2, 3, 4]），即：Observable&lt;T&gt;，concatAll就是用来摊平的。</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 必须先等前一个observable完成(complete)，才会继续下一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：Observable里边还是Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * click:       ------------c------------c-----...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                  map(e =&gt; of(1,2,3))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      ------------o------------o-----...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                           \            \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                            (1,2,3)|     (1,2,3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                  concatAll()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      ------------(1,2,3)------(1,2,3)--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eventObservable = fromEvent</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'egg'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'click'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapObservable = eventObservable.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    map(<span class="function"><span class="params">x</span> =&gt;</span> of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> concatAllObservable = mapObservable.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatAll()</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">concatAllObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h4 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h4><pre><code>例子里边有一个拖拉的example，将上一篇文章的map以及本文的takeUntil、concatAll结合起来的综合例子，可以参考</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy, Renderer2 &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subscription, interval, fromEvent, of &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; take, first, takeUntil, map, concatAll &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    selector: <span class="string">'app-rxjs-demo'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;h3&gt;Rxjs Demo To Study! -- Operators操作符(take, first, takeUntil, concatAll)&lt;/h3&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button (click)="takeHandler()"&gt;take&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="firstHandler()"&gt;first&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="takeUntilHandler()"&gt;takeUntil&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="concatAllHandler()"&gt;concatAll&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" id="game"&gt;click me end Game&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" id="egg"&gt;click egg&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;div class="drag" id="drag"&gt;drag me&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;app-back&gt;&lt;/app-back&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    styles: [<span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .mgLeft &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            margin-left: 20px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .drag &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            width: 70px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            height: 24px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            font-size: 12px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            text-align: center;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            background: #EEE;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            line-height: 24px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            cursor: default;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            border-radius: 4px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            position: absolute;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            left: 580px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            top: 155px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RxjsDemoComponent <span class="keyword">implements</span> OnInit, OnDestroy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    firstSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeUnitlSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatAllSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dragSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">        <span class="keyword">private</span> renderer: Renderer2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    </span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnInit(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 简易拖拉</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mouseDown = fromEvent(<span class="built_in">document</span>.getElementById(<span class="string">'drag'</span>), <span class="string">'mousedown'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mouseMove = fromEvent(<span class="built_in">document</span>.body, <span class="string">'mousemove'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mouseUp = fromEvent(<span class="built_in">document</span>.body, <span class="string">'mouseup'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> drag = mouseDown.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            map(_ =&gt; mouseMove.pipe(takeUntil(mouseUp))),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            concatAll(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            map(<span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> (&#123;x: event.clientX, y: event.clientY&#125;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.dragSubscription = drag.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">console</span>.log(<span class="string">'=====drag: '</span>, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">const</span> dragDom = <span class="built_in">document</span>.getElementById(<span class="string">'drag'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">console</span>.log(<span class="string">'dragDom'</span>, dragDom);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 第一种写法：angular封装</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// this.renderer.setStyle(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     dragDom,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     'top',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     `$&#123;value.y&#125;px`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// this.renderer.setStyle(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     dragDom,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     'left',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     `$&#123;value.x&#125;px`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 第二种写法：原生JS支持</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                dragDom.style.left = value.x + <span class="string">'px'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dragDom.style.top = value.y + <span class="string">'px'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====drag: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====drag: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：      interval(1000).pipe(take(4))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:    -----0-----1-----2-----3-----4--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                      take(4)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest     -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> takeObservable = interval(<span class="number">1000</span>).pipe(take(<span class="number">4</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.takeSubscription = takeObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    firstHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：       interval(1000).pipe(first())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:     -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                      first()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:     -----0|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> firstObservable = interval(<span class="number">1000</span>).pipe(first());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.firstSubscription = firstObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeUntilHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：       interval(1000).pipe(takeUntil(click))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:     -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * click:      --------------------c-----</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                  takeUntil(click)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:     -----0-----1-----2--|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> clickObservable = fromEvent(<span class="built_in">document</span>.getElementById(<span class="string">'game'</span>), <span class="string">'click'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> takeUnitlObservable = interval(<span class="number">1000</span>).pipe(takeUntil(clickObservable));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.takeUnitlSubscription =  takeUnitlObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatAllHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 必须先等前一个observable完成(complete)，才会继续下一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：Observable里边还是Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * click:       ------------c------------c-----...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                  map(e =&gt; of(1,2,3))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      ------------o------------o-----...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                           \            \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                            (1,2,3)|     (1,2,3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                  concatAll()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      ------------(1,2,3)------(1,2,3)--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> eventObservable = fromEvent(<span class="built_in">document</span>.getElementById(<span class="string">'egg'</span>), <span class="string">'click'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mapObservable = eventObservable.pipe(map(<span class="function"><span class="params">x</span> =&gt;</span> of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> concatAllObservable = mapObservable.pipe(concatAll());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.concatAllSubscription = concatAllObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnDestroy() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.takeSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.takeSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.firstSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.firstSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.takeUnitlSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.takeUnitlSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.concatAllSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.concatAllSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dragSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.dragSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【Observable】</title>
    <url>/2019/06/24/rxjs-observable/</url>
    <content><![CDATA[<pre><code>Observable创建的方式Rxjs库已经内置支持了很多操作符，所以我们只需要理解并使用即可</code></pre><h4 id="1、create"><a href="#1、create" class="headerlink" title="1、create"></a>1、create</h4><pre><code>从任何形式创建一个Observable，静态方法，可以直接使用。</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObservable = Observable.create(<span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observer.next(<span class="string">'Vivian'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observer.next(<span class="string">'Jeanne'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        observer.next(<span class="string">'====create rxjs！'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, <span class="number">2000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observer.complete();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observer.next(<span class="string">'not work ?'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'===1====start'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable.subscribe(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1. 创建Observable: '</span>, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'===1====end'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种写法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> innerObserver = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'2. 创建Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'2. 创建Observable--Error'</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'2.创建Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'===2====start'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable.subscribe(innerObserver);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'===2====end'</span>);</span></pre></td></tr></table></figure>


<h4 id="2、of"><a href="#2、of" class="headerlink" title="2、of"></a>2、of</h4><pre><code>从任意形式创建同步的Observable</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> syncObservable = of(<span class="string">'Vivian'</span>, <span class="string">'Jeanne'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">syncObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====一次同步传递值: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====一次同步传递值--Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====一次同步传递值: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="3、from"><a href="#3、from" class="headerlink" title="3、from"></a>3、from</h4><pre><code>从已经存在的数组或者Promise、字符串、对象等创建Observable</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种：来自数组的Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> existArray = [<span class="string">'Vivian'</span>, <span class="string">'Jeanne'</span>, <span class="string">'2019'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> existObservable = <span class="keyword">from</span>(existArray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">existObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======从已存在的数组生成Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======从已存在的阵列生成Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======从已存在的数组生成Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种：来自Promise的Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseObservable = <span class="keyword">from</span>(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resolve(<span class="string">'Hello RXJS!'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, <span class="number">3000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">promiseObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======来自Promise的Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======来自Promise的Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======来自Promise的Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h4 id="4、fromEvent"><a href="#4、fromEvent" class="headerlink" title="4、fromEvent"></a>4、fromEvent</h4><pre><code>从事件（DOM事件等）创建Observable</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种：FromEvent Observable 来自DOM事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fromEventObservable = fromEvent(<span class="built_in">document</span>.getElementById(<span class="string">'fromEvent'</span>), <span class="string">'click'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fromEventObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEvent Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEvent Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEvent Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种：FromEventPattern Observable 来自类事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> producer = <span class="keyword">new</span> Producer();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fromEventPatternObservable = fromEventPattern(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (handler) =&gt; producer.addEventListener(handler),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (handler) =&gt; producer.removeEventListener(handler)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fromEventPatternObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEventPattern Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEventPattern Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEventPattern Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">producer.notify(<span class="string">'Hello! Can you hear me?'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义Observable【类事件】</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Producer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listener: <span class="built_in">any</span>[];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.listener = [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    addEventListener(listener) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> listener === <span class="string">'function'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.listener.push(listener);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'listener 必须是 function!'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    removeEventListener(listener) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.listener.splice(<span class="keyword">this</span>.listener.indexOf(listener), <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    notify(message) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.listener.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            listener(message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="5、empty"><a href="#5、empty" class="headerlink" title="5、empty"></a>5、empty</h4><pre><code>啥也不干直接让Observable执行complete()结束，类似于数学上的0</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emptyObservable = empty();</span></pre></td></tr><tr><td class="code"><pre><span class="line">emptyObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======empty Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======empty Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======empty Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="6、never"><a href="#6、never" class="headerlink" title="6、never"></a>6、never</h4><pre><code>永远也不会执行complete()结束的Observable，类似于数学上的无穷大∞</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> neverObservable = never();</span></pre></td></tr><tr><td class="code"><pre><span class="line">neverObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======never Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======never Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======never Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="7、interval"><a href="#7、interval" class="headerlink" title="7、interval"></a>7、interval</h4><pre><code>定时器，每隔一定时间送出一个元素</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> intervalObservable = interval(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">intervalObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======interval Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======interval Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======interval Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="8、timer"><a href="#8、timer" class="headerlink" title="8、timer"></a>8、timer</h4><pre><code>延时定时器</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// timer Observable延时定时器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timerObservable = timer(<span class="number">1000</span>, <span class="number">5000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">timerObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// timer Observable延时定时器【指定日期之后开始执行】</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timerFromDateObservable = timer(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-05-26 23:22:00'</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">timerFromDateObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器【指定日期之后开始执行】: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器【指定日期之后开始执行】---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器【指定日期之后开始执行】: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// timer Observable延时定时器, 延迟毫秒执行一次之后取消订阅</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> onceTimerObservable = timer(<span class="number">3000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">onceTimerObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器, 延迟毫秒执行一次之后取消订阅: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器, 延迟毫秒执行一次之后取消订阅---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器, 延迟毫秒执行一次之后取消订阅: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
<h4 id="Angular-Rxjs-Series"><a href="#Angular-Rxjs-Series" class="headerlink" title="Angular Rxjs Series"></a>Angular Rxjs Series</h4><ol>
<li><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></li>
<li><a href="https://www.jianshu.com/p/b81a5ad72641" target="_blank" rel="noopener">Rxjs【map、mapTo、filter】</a></li>
<li><a href="https://www.jianshu.com/p/55b6df31cc3e" target="_blank" rel="noopener">Rxjs【take, first, takeUntil, concatAll】</a></li>
</ol>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【skip, takeLast, last, concat, startWith, merge】</title>
    <url>/2019/06/23/rxjs-skip-takeLast-last-concat-startWith-merge/</url>
    <content><![CDATA[<h1 id="Rxjs学习之路"><a href="#Rxjs学习之路" class="headerlink" title="Rxjs学习之路"></a>Rxjs学习之路</h1><h4 id="1、小贴士"><a href="#1、小贴士" class="headerlink" title="1、小贴士"></a>1、小贴士</h4><p>这篇文章是我的Angular Rxjs Series中的第篇四文章，在继续阅读本文之前，您至少应该熟悉系列中的第一篇基础文章：</p>
<p><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></p>
<p><a href="https://www.jianshu.com/p/fc0e30328de3" target="_blank" rel="noopener">Rxjs【Observable】</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 特别提示：以下的操作符介绍均采用rxjs6的写法！！！</span></span></pre></td></tr></table></figure>


<h4 id="2、skip"><a href="#2、skip" class="headerlink" title="2、skip"></a>2、skip</h4><pre><code>略过前几个送出元素</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 略过前几个送出元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(skip(3))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                        skip(3)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      -----------------------3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> skipObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    skip(<span class="number">3</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">skipObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="3、takeLast"><a href="#3、takeLast" class="headerlink" title="3、takeLast"></a>3、takeLast</h4><pre><code>倒过来取最后几个</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * takeLast必须等到整个observable完成(complete)，才能知道最后的元素有哪些，并且同步送出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(take(4), takeLast(2))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                      takeLast(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      -----------------------(2,3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> takeLastObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">4</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeLast(<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">takeLastObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="4、last"><a href="#4、last" class="headerlink" title="4、last"></a>4、last</h4><pre><code>去最后送出的那个元素</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 取得最后一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(take(4), last())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                      last()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      -----------------------3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lastObsverable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">4</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    last()</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">lastObsverable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h4 id="5、concat"><a href="#5、concat" class="headerlink" title="5、concat"></a>5、concat</h4><pre><code>把多个observable合并成一个</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 把多个observable 实例合并成一个, 必须先等前一个observable完成(complete)，才会继续下一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source1:     -----0-----1-----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source2:     (3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source3:     (45)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *            concat()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      -----0-----1-----2-----(345|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source01 = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source02 = of(<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source03 = of(<span class="number">4</span>, <span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法：使用Operator操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> concatObservable = source01.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concat(source02, source03)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">concatObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种写法：使用rxjs内置静态函数 -- import &#123; concat as rxConcat&#125; from 'rxjs';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> concatObservable2 = rxConcat(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    source01,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    source02,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    source03</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">concatObservable2.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="6、startWith"><a href="#6、startWith" class="headerlink" title="6、startWith"></a>6、startWith</h4><pre><code>在observable的一开始就要发送的元素(非Observable形式的)</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 一开始就要发送的元素, startWith 的值是一开始就同步发出的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(startWith(0))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                     startWith(0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      0-----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> startWidthObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    startWith(<span class="number">0</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">startWidthObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="7、merge"><a href="#7、merge" class="headerlink" title="7、merge"></a>7、merge</h4><pre><code>merge跟concat一样都是用来合并Observable，但是稍微有些不同</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 把多个observable同时处理, merge 的逻辑有点像是OR(||)，就是当两个observable 其中一个被触发时都可以被处理，这很常用在一个以上的按钮具有部分相同的行为。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      ----0----1----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source2:     --0--1--2--3--4--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                   merge()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      --0-01--21-3--(24)--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observable01 = interval(<span class="number">500</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observable02 = interval(<span class="number">300</span>).pipe(take(<span class="number">6</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法：使用Operator操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeObservable = observable01.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    merge(observable02)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mergeObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种写法：使用rxjs内置静态函数 -- import &#123; merge as rxMerge &#125; from 'rxjs';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeObservable2 = rxMerge(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observable01,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observable02</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mergeObservable2.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h5 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subscription, interval, of, concat <span class="keyword">as</span> rxConcat, merge <span class="keyword">as</span> rxMerge &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; skip, take, takeLast, last, concat, startWith, merge &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    selector: <span class="string">'app-rxjs-demo'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;h3&gt;Rxjs Demo To Study! -- Operators操作符(skip, takeLast, last, concat, startWith, merge)&lt;/h3&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button (click)="skipHandler()"&gt;skip&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="takeLastHandler()"&gt;takeLast&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="lastHandler()"&gt;last&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="concatHandler()"&gt;concat&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="startWithHandler()"&gt;startWith&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="mergeHandler()"&gt;merge&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;app-back&gt;&lt;/app-back&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    styles: [<span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .mgLeft &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            margin-left: 20px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RxjsDemoComponent <span class="keyword">implements</span> OnInit, OnDestroy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    skipSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeLastSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lastSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatSubscription2: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    startWithSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mergeSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mergeSubscription2: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnInit(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    skipHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 略过前几个送出元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(skip(3))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                        skip(3)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      -----------------------3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> skipObservable = interval(<span class="number">1000</span>).pipe(skip(<span class="number">3</span>), take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.skipSubscription = skipObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeLastHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * takeLast必须等到整个observable完成(complete)，才能知道最后的元素有哪些，并且同步送出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(take(4), takeLast(2))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                      takeLast(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      -----------------------(2,3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> takeLastObservable = interval(<span class="number">1000</span>).pipe(take(<span class="number">4</span>), takeLast(<span class="number">2</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.takeLastSubscription = takeLastObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    lastHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 取得最后一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(take(4), last())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                      last()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      -----------------------3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> lastObsverable = interval(<span class="number">1000</span>).pipe(take(<span class="number">4</span>), last());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.lastSubscription = lastObsverable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 把多个observable 实例合并成一个, 必须先等前一个observable完成(complete)，才会继续下一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source1:     -----0-----1-----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source2:     (3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source3:     (45)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *            concat()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      -----0-----1-----2-----(345|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> source01 = interval(<span class="number">1000</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> source02 = of(<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> source03 = of(<span class="number">4</span>, <span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第一种写法：使用Operator操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> concatObservable = source01.pipe(concat(source02, source03));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.concatSubscription = concatObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第二种写法：使用rxjs内置静态函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> concatObservable2 = rxConcat(source01, source02, source03);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.concatSubscription2 = concatObservable2.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    startWithHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 一开始就要发送的元素, startWith 的值是一开始就同步发出的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(startWith(0))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                     startWith(0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      0-----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> startWidthObservable = interval(<span class="number">1000</span>).pipe(startWith(<span class="number">0</span>), take(<span class="number">4</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.startWithSubscription = startWidthObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    mergeHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 把多个observable同时处理, merge 的逻辑有点像是OR(||)，就是当两个observable 其中一个被触发时都可以被处理，这很常用在一个以上的按钮具有部分相同的行为。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      ----0----1----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source2:     --0--1--2--3--4--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                   merge()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      --0-01--21-3--(24)--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> observable01 = interval(<span class="number">500</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> observable02 = interval(<span class="number">300</span>).pipe(take(<span class="number">6</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第一种写法：使用Operator操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mergeObservable = observable01.pipe(merge(observable02));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.mergeSubscription = mergeObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第二种写法：使用rxjs内置静态函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mergeObservable2 = rxMerge(observable01, observable02);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.mergeSubscription2 = mergeObservable2.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnDestroy() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.skipSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.skipSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.takeLastSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.takeLastSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lastSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.lastSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.concatSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.concatSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.concatSubscription2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.concatSubscription2.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.startWithSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.startWithSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mergeSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.mergeSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mergeSubscription2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.mergeSubscription2.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>



<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Github检索方法总结</title>
    <url>/2019/06/23/git-github-search/</url>
    <content><![CDATA[<h4 id="1、in-name-关键词"><a href="#1、in-name-关键词" class="headerlink" title="1、in:name 关键词"></a>1、in:name 关键词</h4><pre><code>1. 这里的name是指仓库的名称
2. 例如在检索栏里输入：in:name ng toast</code></pre><h4 id="2、in-description-关键词"><a href="#2、in-description-关键词" class="headerlink" title="2、in:description 关键词"></a>2、in:description 关键词</h4><pre><code>1. 这里的description是仓库的描述文字
2. 例如在检索栏里输入：in:description angular calendar</code></pre><h4 id="3、in-readme-关键词"><a href="#3、in-readme-关键词" class="headerlink" title="3、in:readme 关键词"></a>3、in:readme 关键词</h4><pre><code>1. 这里的readme是仓库的README.md文件
2. 例如在检索栏里输入：in:readme CalendarModule</code></pre><h4 id="4、stars-gt-数字-关键词"><a href="#4、stars-gt-数字-关键词" class="headerlink" title="4、stars:&gt;=数字 关键词"></a>4、stars:&gt;=数字 关键词</h4><pre><code>1. 数字是开源项目的stars的数目
2. =可以不用加（可选）
3. 例如在检索栏输入：stars:&gt;=1000 image lazy</code></pre><h4 id="5、stars-A-B-关键词"><a href="#5、stars-A-B-关键词" class="headerlink" title="5、stars:A..B 关键词"></a>5、stars:A..B 关键词</h4><pre><code>1. A..B是表示在开源项目stars数目在大于A小于B
2. 例如在检索栏中输入：stars:1000..2000 image lazy</code></pre><h4 id="6、size-gt-数字-关键词"><a href="#6、size-gt-数字-关键词" class="headerlink" title="6、size:&gt;=数字 关键词"></a>6、size:&gt;=数字 关键词</h4><pre><code>1. size是开源项目包的大小，单位是K
2. =可以不用加（可选）
3. 例如在地址栏中输入：size:&gt;=4000 carousel</code></pre><h4 id="7、pushed-gt-日期-关键词"><a href="#7、pushed-gt-日期-关键词" class="headerlink" title="7、pushed:&gt;日期 关键词"></a>7、pushed:&gt;日期 关键词</h4><pre><code>1. pushed表示开源项目提交代码，日期就是提交代码的最近一次日期
2. 例如在检索栏中输入：pushed:&gt;2019-01-01 angular popover</code></pre><h4 id="8、license-开源协议-关键词"><a href="#8、license-开源协议-关键词" class="headerlink" title="8、license:开源协议 关键词"></a>8、license:开源协议 关键词</h4><pre><code>1. license为GitHub仓库的开源协议
2. 例如在检索栏中输入：license:MIT angular table</code></pre><h4 id="9、language-A-关键词"><a href="#9、language-A-关键词" class="headerlink" title="9、language:A 关键词"></a>9、language:A 关键词</h4><pre><code>1. language是开源项目的主开发语言，A是具体的语言
2. 例如在检索栏中输入：language:typescript datepicker</code></pre><h4 id="10、user-A-关键词"><a href="#10、user-A-关键词" class="headerlink" title="10、user:A 关键词"></a>10、user:A 关键词</h4><pre><code>1. user为开源项目的作者，A为具体的作者
2. 关键词可以不加（可选）
3. 例如在检索栏中输入：user:yyx990803</code></pre><h4 id="11、org-A-关键词"><a href="#11、org-A-关键词" class="headerlink" title="11、org:A 关键词"></a>11、org:A 关键词</h4><pre><code>1. org为组织，A为具体的组织名
2. 关键词可以不加（可选）
3. 例如在检索栏中输入：org:angular</code></pre><hr>
<h4 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h4><pre><code>1. 以上语句可以组合查找
2. 例如在检索栏中输入：stars:&gt;=1000 image lazy language:javascript</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8303589-88eb8cd94bec1217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="github"></p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【map、mapTo、filter】</title>
    <url>/2019/06/19/rxjs-map-mapto-filter/</url>
    <content><![CDATA[<h1 id="Rxjs学习之路"><a href="#Rxjs学习之路" class="headerlink" title="Rxjs学习之路"></a>Rxjs学习之路</h1><h4 id="1、小贴士"><a href="#1、小贴士" class="headerlink" title="1、小贴士"></a>1、小贴士</h4><p>这篇文章是我的Angular Rxjs Series中的第二篇文章，在继续阅读本文之前，您至少应该熟悉系列中的第一篇基础文章：</p>
<p><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></p>
<p><a href="https://www.jianshu.com/p/fc0e30328de3" target="_blank" rel="noopener">Rxjs【Observable】</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 特别提示：以下的操作符介绍均采用rxjs6的写法！！！</span></span></pre></td></tr></table></figure>


<h4 id="2、map"><a href="#2、map" class="headerlink" title="2、map"></a>2、map</h4><pre><code>1、其实map操作符和js数组里的map差不多，都是传入一个callback，执行callback回传新值.
2、具体例子如下代码：</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如： interval(1000).pipe(map(x =&gt; x + 1));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *       -----0-----1-----2-----3--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *              map(x =&gt; x + 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *       -----1-----2-----3-----4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h4 id="3、mapTo"><a href="#3、mapTo" class="headerlink" title="3、mapTo"></a>3、mapTo</h4><pre><code>1、mapTo是把传进来的值改写成为一个固定值
2、具体例子如下代码：</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如： interval(1000).pipe(mapTo(2))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *      -----0-----1-----2-----3--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *              mapTo(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *      -----2-----2-----2-----2--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapTo(<span class="string">'mapTo'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="4、filter"><a href="#4、filter" class="headerlink" title="4、filter"></a>4、filter</h4><pre><code>1、其实filter操作符和js数组里的filter也差不多，都是传入一个call back，执行callback，根据回传的boolean值过滤源数据，再回传新值。
2、具体例子如下代码：</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(filter(x =&gt; x % 2 === 0));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *      -----0-----1-----2-----3-----4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *           filter(x =&gt; x % 2 === 0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *      -----0-----------2-----------4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<hr>
<h4 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable, of, interval, Subscription &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map, take, mapTo, filter &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    selector: <span class="string">'app-rxjs-demo'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;h3&gt;Rxjs Demo To Study! -- Operators操作符(map、mapTo、filter)&lt;/h3&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button (click)="originMapHandler()"&gt;origin map&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="mapHandler()"&gt;map&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="mapToHandler()"&gt;mapTo&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="filterHandler()"&gt;mapTo&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;app-back&gt;&lt;/app-back&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    styles: [<span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .mgLeft &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            margin-left: 20px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RxjsDemoComponent <span class="keyword">implements</span> OnInit, OnDestroy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    originMapSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapToSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filterSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnInit(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    map(source, callback) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> source.subscribe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (value) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        observer.next(callback(value));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        observer.error(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (err) =&gt; &#123; observer.error(err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                () =&gt; &#123; observer.complete(); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    originMapHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 1. 传统写法创建Map操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> people = of(<span class="string">'Jerry'</span>, <span class="string">'Anna'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> helloPlople = <span class="keyword">this</span>.map(people, <span class="function"><span class="params">item</span> =&gt;</span> item + <span class="string">' Hello~'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.originMapSubscription = helloPlople.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======传统写法创建Map操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======传统写法创建Map操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======传统写法创建Map操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如： interval(1000).pipe(map(x =&gt; x + 1));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *       -----0-----1-----2-----3--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              map(x =&gt; x + 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *       -----1-----2-----3-----4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.mapSubscription = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            take(<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapToHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如： interval(1000).pipe(mapTo(2))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      -----0-----1-----2-----3--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              mapTo(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      -----2-----2-----2-----2--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.mapToSubscription = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            mapTo(<span class="string">'mapTo'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            take(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    filterHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(filter(x =&gt; x % 2 === 0));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      -----0-----1-----2-----3-----4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *           filter(x =&gt; x % 2 === 0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      -----0-----------2-----------4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.filterSubscription = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            take(<span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnDestroy() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.originMapSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.originMapSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mapSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.mapSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mapToSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.mapToSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.filterSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.filterSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs6都改变了些什么？</title>
    <url>/2019/06/05/rxjs-version/</url>
    <content><![CDATA[<h1 id="RxJS-6变化-概述"><a href="#RxJS-6变化-概述" class="headerlink" title="RxJS 6变化-概述"></a>RxJS 6变化-概述</h1><pre><code>RxJS 6主要用于Angular应用程序，从Angular 6开始，它是一个强制依赖。

与RxJS版本5相比，RxJS 6（或更高版本）引入了两个重要更改：
1. import的导入结构发生变化
2. pipe()作为一种链接运算符的方法，旧的链接方式将不起作用
3. 一些operator操作符被重命名

特别提示： 如果你让旧的代码仍旧继续使用，你需要进行以下操作（不推荐再用旧的方法了）
npm install --save rxjs-compat  // 安装向后兼容依赖包</code></pre><h4 id="1-对于import语句，变化如下："><a href="#1-对于import语句，变化如下：" class="headerlink" title="1. 对于import语句，变化如下："></a>1. 对于import语句，变化如下：</h4><ul>
<li><p>Observable, Subject</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subject &#125; <span class="keyword">from</span> <span class="string">'rxjs/Subject'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 现在：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable, Subject &#125; <span class="keyword">from</span> <span class="string">'rxjs</span></span></pre></td></tr></table></figure>
</li>
<li><p>Operators</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/take'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 现在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map, take &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span></span></pre></td></tr></table></figure>
</li>
<li><p>Methods to Create Observables</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/of'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// or</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; of &#125; <span class="keyword">from</span> <span class="string">'rxjs/observable/of'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 现在：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; of &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-在Rxjs6中如何使用operator操作符"><a href="#2-在Rxjs6中如何使用operator操作符" class="headerlink" title="2. 在Rxjs6中如何使用operator操作符"></a>2. 在Rxjs6中如何使用operator操作符</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .map(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .subscribe(...);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 现在：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .pipe(map(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .subscribe(...);</span></pre></td></tr></table></figure>
<ul>
<li>特别声明：在rxjs6中引入的pipe()方法（它实际上已经在RxJS 5.5中添加）,pipe获取无限量的参数，每个参数都是您想要应用于的operator Observable, 像下边这样：(rxjs会按照你将它们传递给pipe()方法的顺序执行- 从左到右。)<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map, switchMap, throttle &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .pipe(map(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>), switchMap(...), throttle(...))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .subscribe(...);</span></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-重命名的operator操作符"><a href="#3-重命名的operator操作符" class="headerlink" title="3. 重命名的operator操作符"></a>3. 重命名的operator操作符</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// operator相关</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>() =&gt; catchError()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>() =&gt; tap()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span>() =&gt; finalize()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>() =&gt; switchAll()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Observable相关</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span><span class="function"><span class="params">()</span> =&gt;</span> throwError()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">fromPromise() =&gt; <span class="keyword">from</span>()  <span class="comment">// 自动检测类型</span></span></pre></td></tr></table></figure>

<hr>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个是YouTube的链接，如果有需要的可以看看更详细的，传送门在底下蓝色超链接！</span></pre></td></tr></table></figure>


<p><a href="https://www.youtube.com/watch?v=X9fdpGthrXA&feature=youtu.be" target="_blank" rel="noopener">Fix your RxJS 6 Imports &amp; Operators - What’s New in RxJS 6?</a></p>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 常见问题及其解决方案</title>
    <url>/2019/05/25/flutter-issues/</url>
    <content><![CDATA[<h4 id="1-Waiting-for-another-flutter-command-to-release-the-startup-lock…"><a href="#1-Waiting-for-another-flutter-command-to-release-the-startup-lock…" class="headerlink" title="1. Waiting for another flutter command to release the startup lock…"></a>1. Waiting for another flutter command to release the startup lock…</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// 杀死dart进程</span></pre></td></tr><tr><td class="code"><pre><span class="line">flutter packages pub build_runner watch</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// 终极方案,删除flutter SDK文件夹目录下的bin/cache下边的lockfile文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm ./flutter/bin/cache/lockfile</span></pre></td></tr></table></figure>


<h4 id="2-Could-not-find-a-file-named-“pubspec-yaml”-in-https-github-com-MarkOSullivan94-dart-config-git-7a88fbc5fd987dce78e468ec45e9e841a49f422d"><a href="#2-Could-not-find-a-file-named-“pubspec-yaml”-in-https-github-com-MarkOSullivan94-dart-config-git-7a88fbc5fd987dce78e468ec45e9e841a49f422d" class="headerlink" title="2. Could not find a file named “pubspec.yaml” in https://github.com/MarkOSullivan94/dart_config.git 7a88fbc5fd987dce78e468ec45e9e841a49f422d."></a>2. Could not find a file named “pubspec.yaml” in <a href="https://github.com/MarkOSullivan94/dart_config.git" target="_blank" rel="noopener">https://github.com/MarkOSullivan94/dart_config.git</a> 7a88fbc5fd987dce78e468ec45e9e841a49f422d.</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// 删除flutter SDK文件夹目录下的.pub-cache下边的git文件夹</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm ./flutter/.pub-cache/git</span></pre></td></tr></table></figure>


<h4 id="3-点击任意空白处，软键盘收起"><a href="#3-点击任意空白处，软键盘收起" class="headerlink" title="3.点击任意空白处，软键盘收起"></a>3.点击任意空白处，软键盘收起</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GestureDetector(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">透明也响应处理</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    behavior: HitTestBehavior.translucent,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    onTap: () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/// <span class="markdown">触摸收起键盘</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      FocusScope.of(context).requestFocus(FocusNode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    child: Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">/// <span class="markdown">xxx</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>


<h4 id="4-Oops-flutter-has-exited-unexpectedly-Sending-crash-report-to-Google"><a href="#4-Oops-flutter-has-exited-unexpectedly-Sending-crash-report-to-Google" class="headerlink" title="4. Oops; flutter has exited unexpectedly. Sending crash report to Google."></a>4. Oops; flutter has exited unexpectedly. Sending crash report to Google.</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// <span class="markdown">在终端执行命令</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">xcode-select --install</span></pre></td></tr></table></figure>


<h4 id="5-页面返回隐藏虚拟导航条"><a href="#5-页面返回隐藏虚拟导航条" class="headerlink" title="5. 页面返回隐藏虚拟导航条"></a>5. 页面返回隐藏虚拟导航条</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> deactivate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SystemChrome.restoreSystemUIOverlays();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">super</span>.deactivate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="6-如果没有网络连接，如何启动静态html页面而不是URL-【webview】"><a href="#6-如果没有网络连接，如何启动静态html页面而不是URL-【webview】" class="headerlink" title="6. 如果没有网络连接，如何启动静态html页面而不是URL ?【webview】"></a>6. 如果没有网络连接，如何启动静态html页面而不是URL ?【webview】</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future check() <span class="keyword">async</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">final</span> result = <span class="keyword">await</span> InternetAddress.lookup(<span class="string">'google.com'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (result.isNotEmpty &amp;&amp; result[<span class="number">0</span>].rawAddress.isNotEmpty) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        connectionStatus = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">print</span>(<span class="string">"connected <span class="subst">$connectionStatus</span>"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">on</span> SocketException <span class="keyword">catch</span> (_) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      connectionStatus = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">print</span>(<span class="string">"not connected <span class="subst">$connectionStatus</span>"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">FutureBuilder(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    future: check(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">dynamic</span>&gt; snapshot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (connectionStatus == <span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/// <span class="markdown">如果网络正常连接</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> SafeArea(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            child: WebviewScaffold(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                url: <span class="string">"http://www.baidu.com"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/// <span class="markdown">如果网络连接失败</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> SafeArea(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            child: WebviewScaffold(</span></pre></td></tr><tr><td class="code"><pre><span class="line">              url: <span class="built_in">Uri</span>.dataFromString(<span class="string">'&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">              mimeType: <span class="string">'text/html'</span>).toString()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>


<h4 id="7-判断当前路由是否在栈顶"><a href="#7-判断当前路由是否在栈顶" class="headerlink" title="7. 判断当前路由是否在栈顶"></a>7. 判断当前路由是否在栈顶</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ModalRoute.of(context) API可以获取当前路由对象以及当前页面的所有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 如果路由active，还位于最顶层，则isCurrent为true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">ModalRoute.of(context).isCurrent</span></pre></td></tr></table></figure>

<h4 id="8-B-widget嵌套在A-Widget里（两个Widget分别在不同的Class里），如何在B-Widget里获取A-Widget的数据（变量、state、方法等等）并修改呢？"><a href="#8-B-widget嵌套在A-Widget里（两个Widget分别在不同的Class里），如何在B-Widget里获取A-Widget的数据（变量、state、方法等等）并修改呢？" class="headerlink" title="8. B widget嵌套在A Widget里（两个Widget分别在不同的Class里），如何在B Widget里获取A Widget的数据（变量、state、方法等等）并修改呢？"></a>8. B widget嵌套在A Widget里（两个Widget分别在不同的Class里），如何在B Widget里获取A Widget的数据（变量、state、方法等等）并修改呢？</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  A(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _AState createState() =&gt; _AState();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">A</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/// <span class="markdown">这个是A widget定义的一个变量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> name = <span class="string">'Jerry'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/// <span class="markdown">这个是B Widget里声明的方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">void</span> getName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">TODO</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Widget build(BuildContext context) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">/// <span class="markdown">这里嵌套了B Widget</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       child: B(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  B(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _BState createState() =&gt; _BState();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">B</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Widget build(BuildContext context) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      child: InkWell(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        child: Text(<span class="string">'this is B Widget!'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        onTap: () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          setState(() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">/// <span class="markdown">在B Widget里边怎么获取A Widget的变量并修改呢？, 方案如下：</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            _AState aWidgetState = context.ancestorStateOfType(TypeMatcher&lt;_AState&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">/// <span class="markdown">获取A里的变量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            aWidgetState.name = <span class="string">'Anna'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">/// <span class="markdown">调用A里的方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            aWidgetState.getName();</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="9-B-widget嵌套在A-Widget里（两个Widget分别在不同的Class里），如何在A-Widget里获取B-Widget里的数据（变量、state、方法等等）呢？"><a href="#9-B-widget嵌套在A-Widget里（两个Widget分别在不同的Class里），如何在A-Widget里获取B-Widget里的数据（变量、state、方法等等）呢？" class="headerlink" title="9. B widget嵌套在A Widget里（两个Widget分别在不同的Class里），如何在A Widget里获取B Widget里的数据（变量、state、方法等等）呢？"></a>9. B widget嵌套在A Widget里（两个Widget分别在不同的Class里），如何在A Widget里获取B Widget里的数据（变量、state、方法等等）呢？</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  A(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _AState createState() =&gt; _AState();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">A</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">final</span> GlobalKey&lt;_BState&gt; _bStateKey = GlobalKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Widget build(BuildContext context) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">获取B里边的变量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">print</span>(_bStateKey.currentState.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">调用B里边的方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    _bStateKey.currentState.getName();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">       child: B(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  B(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _BState createState() =&gt; _BState();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">B</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/// <span class="markdown">这个是B Widget里声明的变量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> name = <span class="string">'Jerry'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/// <span class="markdown">这个是B Widget里声明的方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">void</span> getName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">TODO</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Widget build(BuildContext context) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">       child: Text(<span class="string">'This is B Widget!'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="10-Exception-ideviceinfo-return-an-error-ERROR-Could-not-connect-to-lockdownd-error-code-17-或者-21"><a href="#10-Exception-ideviceinfo-return-an-error-ERROR-Could-not-connect-to-lockdownd-error-code-17-或者-21" class="headerlink" title="10. Exception: ideviceinfo return an error: ERROR: Could not connect to lockdownd, error code -17(或者-21)"></a>10. Exception: ideviceinfo return an error: ERROR: Could not connect to lockdownd, error code -17(或者-21)</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下两种方式可供使用：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果你的设备上连接有真机，用的模拟器测试，拔掉手机手机的USB线，再试试运行到模拟器。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 断开设备，在终端窗口中，键入：sudo pkill usbmuxd（它将自动重新启动），再次连接设备</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular自定义路由复用策略，返回上一个页面页面保持</title>
    <url>/2019/04/20/ng-custom-route-reuse-strategy/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们都知道在Angular的SPA应用中，应用通过路由在各个页面之间进行导航。 默认情况下，用户在离开一个页面时，这个页面(组件)会被Angular销毁，用户的输入信息也随之丢失，当用户再次进入这个页面时，看到的是一个新生成的页面(组件)，之前的输入信息都没了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际工作中遇到了这样的问题，部分页面需要保存用户的输入信息，用户再次进入页面时需要回到上一次离开时的状态，部分页面每次都要刷新页面，不需要保存用户信息。而页面间的导航正是通过路由实现的，Angular的默认行为不能满足我们的需求！好在Angular提供了RouteReuseStrategy接口，通过实现这个接口，我们就可以自定义路由复用策略。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;具体的实现如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 写一个类实现`RouteReuseStrategy`接口[如果是Ionic工程则需要实现IonicRouteStrategy]自定义路由复用策略</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> CustomRouteReuseStrategy <span class="keyword">implements</span> RouteReuseStrategy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        handlers: &#123; [key: <span class="built_in">string</span>]: DetachedRouteHandle &#125; = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        shouldDetach(route: ActivatedRouteSnapshot): <span class="built_in">boolean</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> route.data.reload || <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    store(route: ActivatedRouteSnapshot, handle: &#123;&#125;): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (route.data.reload &amp;&amp; <span class="keyword">this</span>.getUrl(route)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.handlers[<span class="keyword">this</span>.getUrl(route)] = handle;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    shouldAttach(route: ActivatedRouteSnapshot): <span class="built_in">boolean</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> !!<span class="keyword">this</span>.handlers[<span class="keyword">this</span>.getUrl(route)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    retrieve(route: ActivatedRouteSnapshot): <span class="built_in">any</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.getUrl(route)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.handlers[<span class="keyword">this</span>.getUrl(route)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): <span class="built_in">boolean</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> future.routeConfig === curr.routeConfig &amp;&amp; <span class="built_in">JSON</span>.stringify(future.params) === <span class="built_in">JSON</span>.stringify(curr.params);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    getUrl(route: ActivatedRouteSnapshot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!route.parent.url.join(<span class="string">'/'</span>) || !route.url.join(<span class="string">'/'</span>))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">let</span> url = <span class="string">''</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (route.parent.url.join(<span class="string">'/'</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            url += route.parent.url.join(<span class="string">'/'</span>) + <span class="string">'/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (route.url.join(<span class="string">'/'</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            url += route.url.join(<span class="string">'/'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> url === <span class="string">''</span> ? <span class="literal">null</span> : url;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 在AppModule中配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    declarations: [ ... ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span>: &#123; ... &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    providers: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123; provide: RouteReuseStrategy, useClass: CustomRouteReuseStrategy &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 在Routing中配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123; path: <span class="string">'class-list'</span>, component: ClassListPage, data: &#123; reload: <span class="literal">true</span> &#125; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">];</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular表单校验</title>
    <url>/2019/04/19/ng-forms-valid/</url>
    <content><![CDATA[<p>最近在写项目的时候，产品要求对表单的必填输入项进行友好的校验提示，效果如图：<br><img src="https://upload-images.jianshu.io/upload_images/8303589-714366d7491a42fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="表单校验提示"></p>
<p>“ 这个需求很简单，怎么实现我不管。 “ ，还能说什么，就是干，具体实现如下：</p>
<ol>
<li><p>对Angular内置的表单css属性设置想要的样式</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css样式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.isvalid</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed red <span class="meta">!important</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>html文件里设置即时样式检测<code>[class.isvalid]</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--非formArray--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"addressName [class.isvalid]="</span><span class="attr">isFieldInvalidTouched</span>('<span class="attr">addressName</span>')" <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入收件人姓名"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--formArray--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"addressName [class.isvalid]="</span><span class="attr">isArrayFieldInvalidTouched</span>(<span class="attr">i</span>, '<span class="attr">addressName</span>')" <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入收件人姓名"</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>ts文件里注入核心方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单字段校验</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">validateAllFormFields(formGroup: <span class="built_in">any</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">Object</span>.keys(formGroup.controls).forEach(<span class="function"><span class="params">field</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> control = formGroup.get(field);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (control <span class="keyword">instanceof</span> FormControl) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          control.markAsTouched(&#123; onlySelf: <span class="literal">true</span> &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (control <span class="keyword">instanceof</span> FormGroup) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">this</span>.validateAllFormFields(control);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (control <span class="keyword">instanceof</span> FormArray) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">this</span>.validateAllFormFields(control);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 表单控件校验</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">isFieldInvalidTouched(field: <span class="built_in">any</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.form.get(field).invalid &amp;&amp; <span class="keyword">this</span>.form.get(field).touched;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 表单控件校验</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">isArrayFieldInvalidTouched(index, field: <span class="built_in">any</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.xxxArray.controls[index].get(field).invalid &amp;&amp;<span class="keyword">this</span>.xxxArray.controls[index].get(field).touched;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 获取FormArray</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> xxxArray(): FormArray &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.form.get(<span class="string">'xxxArray'</span>) <span class="keyword">as</span> FormArray;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 设置FormArray</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> setXxxArray() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// TODO</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 表单提交</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">ensure() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.form.valid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.validateAllFormFields(<span class="keyword">this</span>.form);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.orderService.presentToast(<span class="string">'表单信息不全, 请填写完整～'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// TODO</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>css保留空格和换行符</title>
    <url>/2019/04/18/css-white-space/</url>
    <content><![CDATA[<p>最近写项目遇到接收后台数据（带格式的字符串），前端显示的时候，要保留其空格和换行符的问题，自己查找了半天，具体实现方式如下，希望能帮到其他也遇到同样问题的小伙伴吧。</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css保留空格和换行符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: pre-wrap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// css保留换行符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: pre-line;</span></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ngx-datatable排序图标</title>
    <url>/2019/04/18/ngx-datatable-sort/</url>
    <content><![CDATA[<ol>
<li><p>給ngx-datatable设置css属性</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">/deep/ .ngx-datatable&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-class">.sortable</span> <span class="selector-class">.sort-btn</span>:before &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">font-family</span>: data-table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">content</span>: <span class="string">"c"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-class">.sortable</span> <span class="selector-class">.sort-btn</span><span class="selector-class">.datatable-icon-down</span>:before &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">content</span>: <span class="string">"f"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-class">.sortable</span> <span class="selector-class">.sort-btn</span><span class="selector-class">.datatable-icon-up</span>:before &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">content</span>: <span class="string">"e"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>如果某一列不需要排序，则可设置sortable为false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ngx-datatable #datatable&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;ngx-datatable-column prop&#x3D;&quot;name&quot; name&#x3D;&quot;name&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;ng-template let-row&#x3D;&quot;row&quot; let-value&#x3D;&quot;value&quot; ngx-datatable-cell-template [sortable]&#x3D;&quot;false&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &lt;span *ngIf&#x3D;&quot;value&quot;&gt;&#123;&#123;value&#125;&#125;&lt;&#x2F;span&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;&#x2F;ng-template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;ngx-datatable-column&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;&lt;ngx-datatable&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>检索条件重置的时候重置Icon和排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ViewChild(&#39;datatable&#39;) datatable: DatatableComponent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.datatable.sorts &#x3D; [];</span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular如何代理到后端服务器</title>
    <url>/2019/04/14/ng-agent/</url>
    <content><![CDATA[<h4 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h4><pre><code>在Angular应用程序中，我们在开发阶段经常要与后端服务器进行交互，由于前后端是分离的，这个时候我们前端要调用后端接口获取数据就会面临跨域的问题。</code></pre><h4 id="2、代理"><a href="#2、代理" class="headerlink" title="2、代理"></a>2、代理</h4><pre><code>1. 在解决跨域问题前，让我们先了解一下什么是代理？通常代理服务器就是充当我们应用程序和Internet之间的网关，它是客户端和服务器之间的中间服务器，通过客户端请求转发资源。

2. 在Angular中，我们经常在开发环境中使用代理。Angular使用的是webpack dev server在开发模式下（development environment）为应用程序提供服务。

3. 例如下图：我们前端的Angular应用程序运行在4200端口上，而后端服务器运行在3700端口，所有以/api开头的接口调用都会通过代理重定向到后端服务器，并且所有调用都reset到同一端口。</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8303589-85a2bb75e9ca7710.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代理所有URL以 /api 开头的接口"></p>
<h4 id="3、proxy-conf-json"><a href="#3、proxy-conf-json" class="headerlink" title="3、proxy.conf.json"></a>3、proxy.conf.json</h4><pre><code>在配置代理之前我们需要先了解一下代理相关的配置项：

1. target：定义后端URL
2. pathRewrite：重写路径
3. changeOrigin：如果后端API没有在localhost上运行，则需要将此选项设置为true
4. logLevel：如果要检查代理配置是否正常工作，此选项设置为debug
5. bypass：有时我们必须绕过代理，可以用这个定义一个函数。但它应该在proxy.conf.js而不是proxy.conf.json中定义。（下面会有详细讲解）</code></pre><h4 id="4、使用Angular-CLI进行代理设置"><a href="#4、使用Angular-CLI进行代理设置" class="headerlink" title="4、使用Angular CLI进行代理设置"></a>4、使用Angular CLI进行代理设置</h4><ul>
<li>首先需要在项目根目录下建立文件：proxy.conf.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"/api/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3700"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"changeOrigin"</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>然后在package.json中进行配置，让Angular找到我们配置好的<code>proxy.conf.json</code>文件【第一种方法】</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"scripts"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"ng"</span>: <span class="string">"ng"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"start"</span>: <span class="string">"ng serve --proxy-config proxy.conf.json"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"build"</span>: <span class="string">"ng build"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"test"</span>: <span class="string">"ng test"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"lint"</span>: <span class="string">"ng lint"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"e2e"</span>: <span class="string">"ng e2e"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>让Angular找到我们配置好的<code>proxy.conf.json</code>文件【第二种方法】</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"serve"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"builder"</span>: <span class="string">"@angular-devkit/build-angular:dev-server"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"options"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"browserTarget"</span>: <span class="string">"api:build"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"proxyConfig"</span>: <span class="string">"proxy.conf.json"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"configurations"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"production"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="attr">"browserTarget"</span>: <span class="string">"api:build:production"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>最后，启动项目，访问接口啦-_-#</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 终端运行命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm start</span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">2</span>. 访问Angular项目</span></pre></td></tr><tr><td class="code"><pre><span class="line">http://localhos<span class="variable">t:4200</span></span></pre></td></tr></table></figure>


<h4 id="5、思考一"><a href="#5、思考一" class="headerlink" title="5、思考一"></a>5、思考一</h4><pre><code>当有一天后端接口地址发生了变化，例如：/api/settings 变成了 /api/app/settings ，这个时候我们前端人员也需要进行相应的修改，可能有改很多地方，那么有没有一种简便的办法一劳永逸呢？答案是肯定的，这个时候proxy.conf.json文件的pathRewrite选项就派上用场了。</code></pre><ul>
<li><p>proxy.conf.json修改如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"/api/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3700"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"changeOrigin"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"pathRewrite"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"^/api/settings"</span>: <span class="string">"/api/app/settings"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"^/api"</span>: <span class="string">""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>修改完成之后重启</p>
</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 终端运行命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm start</span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">2</span>. 访问Angular项目</span></pre></td></tr><tr><td class="code"><pre><span class="line">http://localhos<span class="variable">t:4200</span></span></pre></td></tr></table></figure>


<h4 id="6、思考二"><a href="#6、思考二" class="headerlink" title="6、思考二"></a>6、思考二</h4><pre><code>项目里有很多个模块要访问很多模块下的接口，这个时候我们的proxy.conf.json文件重复的代码就变得很多了，这个时候有没有简便一点的重构方法呢？答案仍旧是肯定的，这个时候就要用到前面我们提到过的proxy.conf.js了而不是proxy.conf.json。</code></pre><ul>
<li>proxy.conf.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PROXY_CONFIG = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        context: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"/api"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"/userapi"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"/settingsapi"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"/productapi"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target: <span class="string">"http://localhost:3700"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        secure: <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = PROXY_CONFIG;</span></pre></td></tr></table></figure>

<ul>
<li>同样的，我们也需要在angular.json文件里进行配置，让Angular找到我们的<code>proxy.conf.js</code>配置文件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"serve"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="attr">"builder"</span>: <span class="string">"@angular-devkit/build-angular:dev-server"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="attr">"options"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"browserTarget"</span>: <span class="string">"api:build"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"proxyConfig"</span>: <span class="string">"proxy.conf.js"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="attr">"configurations"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"production"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="attr">"browserTarget"</span>: <span class="string">"api:build:production"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>修改完成之后重启</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 终端运行命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm start</span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">2</span>. 访问Angular项目</span></pre></td></tr><tr><td class="code"><pre><span class="line">http://localhos<span class="variable">t:4200</span></span></pre></td></tr></table></figure>


<h4 id="7、思考三"><a href="#7、思考三" class="headerlink" title="7、思考三"></a>7、思考三</h4><pre><code>现实开发中我们与服务器交互的过程中可能还会涉及到跨多个服务器去请求数据，这个时候我们的项目中就需要调用好几个服务器的地址（协议、端口、IP不一样），这个时候我们该怎么办呢？机灵的小伙伴估计已经想到了，那就是在proxy.conf.json里配置多条就可以了。</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/8303589-fd8b3a15b32c763d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="代理多个API"></p>
<ul>
<li>proxy.conf.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"/user/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3700"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"/product/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3800"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"/settings/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3900"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h4><p>文章出自medium，我进行了一下翻译和总结，如果想查看原文的，可以通过以下链接进行查看：</p>
<p><a href="https://medium.com/bb-tutorials-and-thoughts/angular-how-to-proxy-to-backend-server-6fb37ef0d025" target="_blank" rel="noopener">Angular — How To Proxy To Backend Server</a></p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>iTunes 未能连接到此 iPhone。 无法分配资源。</title>
    <url>/2019/03/28/mac-iTunes/</url>
    <content><![CDATA[<p>前几天用在Mac上用同步助手給iPhone手机安装ipa应用文件，发现iTunes总是会弹出来<code>iTunes 未能连接到此 iPhone。 无法分配资源。</code>,然后一开始以为是数据线问题，然后换了3根数据线然并卵，手机显示可以充上电，但是无法连接到iTunes，同步助手也无法连接到设备。</p>
<p>思考了再三，然后在同事的电脑上试试，竟然3根数据线都没有问题，顺利连接上了手机，最后确认是自己的Mac pro出了问题，然后Google了一番，发现原来是之前自己不小心删除了Mac上的<code>/private/var/db/lockdown/</code> <strong>lockdown</strong>文件夹（在学习Flutter的时候，配置IOS环境，不小心把lockdown文件夹删除了…&lt;手动惊恐表情&gt;），操作步骤如下：</p>
<ol>
<li><code>cd /private/var/db/</code>  进入到目录</li>
<li><code>ls -la</code> 查看目录下是否有<strong>lockdown</strong>文件夹，如果没有则执行步骤三，有则直接执行步骤四</li>
<li><code>sudo mkdir lockdown</code>  创建空文件夹</li>
<li><code>ls -la</code> 查看<strong>lockdown</strong>文件夹属性<br><img src="https://upload-images.jianshu.io/upload_images/8303589-b897f7cd1d2bffa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误的lockdown文件夹属性"><br>我们可以看到文件夹的权限属性、所属用户、所属组都和正确的不匹配。<br><img src="https://upload-images.jianshu.io/upload_images/8303589-0178e20c0ba552e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="正确的lockdown文件夹属性"></li>
<li><code>sudo chmod 700 /private/var/db/lockdown</code>  修改文件夹权限属性</li>
<li><code>chgrp _usbmuxd ./lockdown</code>  修改所属组</li>
<li><code>chgrp _usbmuxd ./lockdown</code>  修改所属用户</li>
</ol>
<p><strong>重启iTunes，连接手机，Alert弹出框终于是不弹出来了，顺利识别上了iPhone手机。</strong></p>
<p><a href="https://blog.elcomsoft.com/2018/07/accessing-lockdown-files-on-macos/" target="_blank" rel="noopener">附赠Google链接</a></p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mac-dock</title>
    <url>/2019/03/26/mac-dock/</url>
    <content><![CDATA[<p>最近单位給配置了27寸的大屏幕，在鼠标焦点切换的时候一不小心dock被切到了大屏幕上边，然后不知道咋整，鼠标指针就在屏幕底部上一顿瞎点，神奇的就回到了Mac pro上边，然后就在想，难道没有便捷的方式，比如快捷键什么的，轻松解决我的问题吗？Google科普了下，原来是有的，就是<code>你把鼠标指针放到另一个屏幕的下边框（没有 Dock 的屏幕底部）悬停一会， dock 就会自动过去，想移回来就在原来的屏幕下边框停一会即可。</code></p>
<p>另外，这里也安利一个Mac上多屏幕焦点切换的问题解决方案，这个也是Google查到的，链接贴在下边：<br><a href="https://medium.com/thevelops-tech-blog/how-to-switch-focus-between-screens-in-macos-21c6f02883a6" target="_blank" rel="noopener">如何在MacOS中的屏幕之间切换焦点</a></p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-lazyload 动态更新图片bug</title>
    <url>/2019/01/10/vue-lazyload/</url>
    <content><![CDATA[<p>今天小学习了下Vue的使用，当然我的是2.9.4版本，vue-lazyload支持vue 2.x，在做列表分页的时候发现取到数据之后，文字部分都更新了，但是唯独图片不更新，检查了下接口的返回没有问题，再看了下element上的元素，原来图片的src始终没有改变！</p>
<p>阿西吧…改成src，发现还是亲的好（皮一下-_-#）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 之前的写法</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &lt;img v-lazy&#x3D;&quot;&#39;static&#x2F;&#39;+item.image&quot; alt&#x3D;&quot;&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 改之后的写法:key&#x3D;&quot;item.image&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &lt;img v-bind:src&#x3D;&quot;&#39;static&#x2F;&#39;+item.image&quot; alt&#x3D;&quot;&quot;&gt;</span></pre></td></tr></table></figure>
<p>仔细想了下难道就没有办法了吗？我就想用了插件咋就这么困难呢！按照以往的经验先上GitHub的issues问题库找找，不行再去stack overfolw查找【技巧：xxx site:stackoverflow.com】，果然又踩了前人留下的坑，翻了几个issues看看，原来加个key就搞定了！<br><img src="https://upload-images.jianshu.io/upload_images/8303589-a5fc9304548236f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 完美版的代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;img v-lazy&#x3D;&quot;&#39;static&#x2F;&#39;+item.image&quot; :key&#x3D;&quot;item.image&quot; alt&#x3D;&quot;&quot;&gt;</span></pre></td></tr></table></figure>

<p>总结：查找问题还是先从根源查找，不要上来就各种百度！</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git 多账号配置</title>
    <url>/2018/11/15/git-multiple-account/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>有的时候我们肯那个会用到两个<code>github</code>账号，这个时候提交代码就出现了问题，第一个可以提交，但是第二个提交就出现了问题。</p>
<h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h4><ul>
<li>生成公钥和私钥文件</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 首先进入到.ssh目录</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/.ssh</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">2</span>. 查看本地是否已经有存在的公钥和私钥文件(PS: 如果存在了，则只需要生成第二个账号即可，或者全部删除重新生成)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">3</span>.生成SSHkey</span></pre></td></tr><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的github邮箱"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">然后按下Enter(回车键)</span></pre></td></tr><tr><td class="code"><pre><span class="line">这个时候提示：Enter <span class="keyword">file</span> in which <span class="keyword">to</span> save the key（xxx/xxx/.ssh/id_rsa）:</span></pre></td></tr><tr><td class="code"><pre><span class="line">我们按照格式键入要保存的文件名即可：id_rsa_xxx   xxx是你自己定义的名字</span></pre></td></tr><tr><td class="code"><pre><span class="line">这个时候又提示：Enter passphrase (<span class="built_in">empty</span> <span class="keyword">for</span> <span class="keyword">no</span> passphrase):</span></pre></td></tr><tr><td class="code"><pre><span class="line">直接按下Enter(回车键)</span></pre></td></tr><tr><td class="code"><pre><span class="line">这个时候又提示：Enter same passphrase again:</span></pre></td></tr><tr><td class="code"><pre><span class="line">继续按下Enter(回车键)</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK，成功之后会提示以下信息(PS: 说明已经成功生成SSHKey):</span></pre></td></tr><tr><td class="code"><pre><span class="line">Your public key <span class="built_in">has</span> been saved in xxx/xxx/.ssh/id_rsa_(你刚才定义的名字).pub</span></pre></td></tr><tr><td class="code"><pre><span class="line">The key fingerprint i<span class="variable">s:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SHA256:lEmncZqtuXuHgZ4XtkVMkazLaTC5XgN0VLjYi3T8Fk8 xxx@xxx.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    The key s randomart image i<span class="variable">s:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    +---[RSA <span class="number">2048</span>]----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        <span class="keyword">o</span> <span class="keyword">o</span>..=+<span class="keyword">o</span> |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |       . @. + <span class="keyword">o</span> <span class="keyword">X</span>|</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        B..B <span class="keyword">o</span>   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |       . oB B . E|</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        So <span class="keyword">X</span> = + |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        ..* <span class="keyword">X</span> <span class="keyword">o</span> .|</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |       ..+ O <span class="keyword">o</span>   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        <span class="keyword">o</span>.* .    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        .<span class="keyword">o</span> .     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    +----[SHA256]-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">4</span>. 再次查看.ssh目录</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">这个时候应会看到有文件: id_rsa_(你刚才定义的名字)、id_rsa_(你刚才定义的名字).pub</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">5</span>. 把公钥配置到GitHub</span></pre></td></tr><tr><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa_(你刚才定义的名字).pub   // 拷贝公钥到剪贴板</span></pre></td></tr><tr><td class="code"><pre><span class="line">登录github SSH <span class="built_in">keys</span>粘贴进去配置好</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">6</span>. 新的密钥添加到SSH agent中</span></pre></td></tr><tr><td class="code"><pre><span class="line">ssh-<span class="built_in">add</span> id_rsa_(你刚才定义的名字)  // 这里是添加私钥</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">7</span>. 创建配置文件config</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> config  // 新建并打开config文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">键入以下字符：</span></pre></td></tr><tr><td class="code"><pre><span class="line">==============分割线(不要粘贴进去)=================</span></pre></td></tr><tr><td class="code"><pre><span class="line">Host github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">HostName github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">PreferredAuthentications publickey</span></pre></td></tr><tr><td class="code"><pre><span class="line">IdentityFile ~/.ssh/id_rsa</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Host (你刚才定义的名字).github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">HostName github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">PreferredAuthentications publickey</span></pre></td></tr><tr><td class="code"><pre><span class="line">IdentityFile ~/.ssh/id_rsa_(你刚才定义的名字)</span></pre></td></tr><tr><td class="code"><pre><span class="line">==============分割线(不要粘贴进去)=================</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">8</span>. 验证连接</span></pre></td></tr><tr><td class="code"><pre><span class="line">ssh -T git@(你刚才定义的名字).github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">这个如果成功会出现提示：Hi xxx! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">// 9. 设置本地全局git邮箱和用户名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">git config --global user.email "你的邮箱"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">git config --global user.name  "你的名字"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">git config --list  //  查看设置好的内容</span></span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌浏览器屏幕截图以及书签问题</title>
    <url>/2018/09/19/chrome-screenshots/</url>
    <content><![CDATA[<h5 id="Windows系统："><a href="#Windows系统：" class="headerlink" title="Windows系统："></a>Windows系统：</h5><p>1、<code>F12</code> 打开开发者工具台<br>2、<code>ctrl + shift + p</code>，弹出搜索框之后输入： <code>cap</code><br>3、选中第二个按下回车键，成功保存图片。【即：Mobile– Capture fullsize screenshot】</p>
<h5 id="Mac-系统："><a href="#Mac-系统：" class="headerlink" title="Mac 系统："></a>Mac 系统：</h5><p>1、<code>commend + option + i</code>，也就是 <code>⌘ + ⌥ + i</code>，打开开发者工具台<br>2、<code>command + shift + p</code>，也就是 <code>⌘ + ⇧ + p</code>，弹出搜索框之后输入： <code>cap</code><br>3、选中第二个按下回车键，成功保存图片。【即：Mobile– Capture fullsize screenshot】</p>
<p>最后关于收藏夹链接跳转新页面问题：</p>
<h5 id="Windows系统：-1"><a href="#Windows系统：-1" class="headerlink" title="Windows系统："></a>Windows系统：</h5><p>鼠标悬浮状态下移动到要跳转的收藏条目【链接】然后右键在弹出的悬浮窗体中选择在新的标签页中打开即可</p>
<h5 id="Mac系统："><a href="#Mac系统：" class="headerlink" title="Mac系统："></a>Mac系统：</h5><p>鼠标悬浮状态下移动到要跳转的收藏条目【链接】然后双指按下触摸板在弹出的悬浮窗体中选择在新的标签页中打开即可<br>最后最后，哈哈，安利一个书签栏【即收藏夹】扩展插件：<code>Neater Bookmarks</code></p>
]]></content>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>mac xxx 文件已经损坏，请移除到废纸篓问题</title>
    <url>/2018/09/19/mac-spctl/</url>
    <content><![CDATA[<p>执行命令：<code>sudo spctl --master-disable</code>  然后安装，<br>安装完毕之后，再执行命令： <code>sudo spctl --master-enable</code> 关闭</p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>ngx-datatable组件table重新计算，手动触发resize事件</title>
    <url>/2018/08/10/ngx-datatable/</url>
    <content><![CDATA[<p>最近写Angular项目用到@swimlane/ngx-datatable组件，其中table有一个recalculate()方法，可以重新计算网格大小。由于左侧边栏可以伸缩导致table没有重新计算，看了下ngx-datatable的实现源码，原来是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">* Window resize handler to update sizes.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">@HostListener(&#39;window:resize&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">@throttleable(5)</span></pre></td></tr><tr><td class="code"><pre><span class="line">onWindowResize(): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  this.recalculate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>只有触发window的resize事件才能重新计算，故想到一个方法：手动触发一个resize事件加入异步队列得以解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1. 得到组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">@ViewChild(&#39;datatable&#39;) datatable;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 2. 触发方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">const e &#x3D; document.createEvent(&#39;Event&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">e.initEvent(&#39;resize&#39;, true, true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">window.dispatchEvent(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.datatable.recalculate();</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular4日期时间控件 --- laydate</title>
    <url>/2017/12/31/ng-laydate/</url>
    <content><![CDATA[<p>最近在项目中由于要使用到日期控件，但是看了好多github上的许多日期控件都只提供了选择年月日的功能，然后项目中需要精确到时间，自己写还比较麻烦，满足不了需求。由于之前的项目中有用到layDate这个日期控件，可以精确选择到时间，整好满足当前的项目需求，但是由于Angular2.x之后使用typeScript编程，无法直接使用js文件，所以做了些修改，导入项目中，下边是一些引入的步骤，我的版本是（4.2.4），当然其他版本应该也可以。</p>
<p>第一步：上官网下载独立版本的日期与时间组件文件包：<a href="http://www.layui.com/laydate/" target="_blank" rel="noopener">http://www.layui.com/laydate/</a></p>
<p><img src="https://upload-images.jianshu.io/upload_images/8303589-4c1219d365ebc3ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="laydate官网"></p>
<p>01<br>第二步：Angular2.x之后推荐将资源文件放到 src\assets 目录下，所以将下载好的文件 laydate文件夹下的 theme 文件夹和 laydate.js 一起复制（拷贝）一份到项目 src\assets 目录下，如图所示：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/8303589-d3963920d48e6276.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="assets配置"></p>
<p>02<br>第三步：由于我是使用脚手架 angular-cli 生成的项目，所以在引入外部文件的时候需要在 .angular-cli.json 文件中配置，配置项信息如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/8303589-9d8de30f90a3dacd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="angular.json配置"></p>
<p>03<br>第四步： 用过laydate的都知道在执行的时候需要一个laydate实例，然后由于是ts文件，直接使用 laydate.render() 方法实例化一个日期组件会报错，说laydate未定义该变量的声明而报错，所以需要在组件你的 xxx.component.ts 文件里边声明laydate变量，声明如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/8303589-2756dfcd4f76d862.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="组件中使用"></p>
<p>04<br>第五步：声明之后按理说就可以实例化一个日期时间控件了，但是仍然为报laydate找不到定义的错误，所以我们需要，原因就是我们程序没有访问到自己的路径，所以我们需要修改 laydate.js文件中theme源文件路径，用文本编辑器打开laydate.js 文件，全局搜索如下内容： modules/laydate/“:”theme/ </p>
<p><img src="https://upload-images.jianshu.io/upload_images/8303589-54f48625801cb6cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="版本修复"></p>
<p>05-1<br>修改theme文件夹的路径为 assets/theme，并将返回的默认版本信息删除，修改之后文件如下：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/8303589-f70f02ad266d04a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="样式修复"></p>
<p>05-2<br>第六步：做完以上步骤之后，接下来就是轻松愉快是使用啦，(<em>^__^</em>) 嘻嘻。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/8303589-c24abf8391860706.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="html中使用"></p>
<p>06-1</p>
<p><img src="https://upload-images.jianshu.io/upload_images/8303589-2fbfc3541dc35b97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化"></p>
<p>06-2<br>laydate的使用手册可以参考官网文档： <a href="http://www.layui.com/doc/modules/laydate.html" target="_blank" rel="noopener">http://www.layui.com/doc/modules/laydate.html</a></p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/11/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3>]]></content>
  </entry>
</search>
