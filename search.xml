<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular cdk</title>
    <url>/2020/06/03/cdk/</url>
    <content><![CDATA[<h4 id="1-起源"><a href="#1-起源" class="headerlink" title="1. 起源"></a>1. 起源</h4><blockquote>
<p>CDK是Component Dev kit的简称，首次提出是在2017年（PS：2017.07推出了可用的Beta版本），是Angular Material团队在开发Library时发现组件有很多相似的地方，最后进行了抽取，提炼出了公共的逻辑，这部分即是CDK，具体可以观看[2017年Angular Mix大会上的Jeremy Elbourn的介绍。</p>
</blockquote><a id="more"></a>
<ul>
<li><a href="https://www.youtube.com/watch?v=kYDLlfpTLEA" target="_blank" rel="noopener">youtube传送门</a></li>
</ul>
<p><img src="https://github.com/lanxuexing/assets/raw/master/cdk/struct.png" alt="image"></p>
<blockquote>
<p>官方用了一个很形象的比喻：<code>if the component library is a rocket ship,
the cdk is the box of engine parts.</code>，如果组件库是火箭飞船，<br>那么CDK就是发动机零件盒。</p>
</blockquote>
<h4 id="2-分类"><a href="#2-分类" class="headerlink" title="2. 分类"></a>2. 分类</h4><h6 id="Common-Behaviors"><a href="#Common-Behaviors" class="headerlink" title="Common Behaviors"></a>Common Behaviors</h6><ul>
<li><p>Accessibility</p>
<blockquote>
<p>包提供了许多提高无障碍性（可访问性）的工具，最终让屏幕阅读更容易理解。</p>
</blockquote>
</li>
<li><p>Bidirectionality</p>
<blockquote>
<p>包为组件提供了一个通用的体系，来获取和响应应用的 LTR（从左到右）/RTL（从右到左）布局方向的变化。</p>
</blockquote>
</li>
<li><p>Clipboard</p>
<blockquote>
<p>提供用于使用系统剪贴板的帮助器。</p>
</blockquote>
</li>
</ul>
<h4 id="3-Accessibility"><a href="#3-Accessibility" class="headerlink" title="3. Accessibility"></a>3. Accessibility</h4><h6 id="1-FocusTrap"><a href="#1-FocusTrap" class="headerlink" title="1. FocusTrap"></a>1. FocusTrap</h6><p>FocusTrap是一个指令，它用于捕获元素中的Tab键焦点，常用于我们的表单里，可能说的比较模式，可以直接看下图的演示效果。</p>
<video controls preload="none" poster="https://github.com/lanxuexing/assets/raw/master/cdk/demo.png">
      <source src="https://github.com/lanxuexing/assets/raw/master/cdk/focus-trap.mov">
      <p>Your user agent does not support the HTML5 Video element.</p>
</video>

<p>从视频演示中我们可以看到，使用指令包裹元素和不包裹元素，按下Tab键之后的效果是不同的。HTML其实很简单，如下：</p>
<p><img src="https://github.com/lanxuexing/assets/raw/master/cdk/focus-trap-html.png" alt="focus trap html"></p>
<p>如果你想自己控制指令的作用范围，那么CDK还提供另外的三个指令：<code>cdkFocusRegionStart</code>、<code>cdkFocusRegionEnd</code> 和<code>cdkFocusInitial</code>，其中<code>cdkFocusInitial</code>用于指定初始化时获取焦点的元素或者区域。tab键会在该区域内自动回卷。</p>
<h6 id="2-ListKeyManager"><a href="#2-ListKeyManager" class="headerlink" title="2. ListKeyManager"></a>2. ListKeyManager</h6><p>ListKeyManager可以通过键盘交互来管理条目列表。要使用ListKeyManager一般需要做三件事儿。</p>
<ul>
<li>为管理的条目创建一个<code>@ViewChildren</code>查询</li>
<li>初始化<code>ListKeyManager</code>，并传入条目</li>
<li>将键盘事件转发给<code>ListKeyManager</code></li>
</ul>
<p>原则上应该实现<code>ListKeyManagerOption</code>接口（可选），<code>ListKeyManagerOption</code>里有一个可选方法和可选属性。</p>
<p><img src="https://github.com/lanxuexing/assets/raw/master/cdk/list-key-manager-option.png" alt="ListKeyManagerOption">        </p>
<p>但是必须实现<code>FocusableOption</code>接口。</p>
<p><img src="https://github.com/lanxuexing/assets/raw/master/cdk/focusable-option.png" alt="FocusableOption"></p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular文件上传，支持多文件、拖拽、重试以及上传进度</title>
    <url>/2020/05/03/ng-file-upload/</url>
    <content><![CDATA[<p><img src="https://github.com/lanxuexing/assets/raw/master/file-upload/file-upload.png" alt="file-upload"></p><h4 id="1-Dependencies"><a href="#1-Dependencies" class="headerlink" title="1. Dependencies"></a>1. Dependencies</h4><ul>
<li>@angular/cdk</li>
<li>@angular/material</li>
</ul><h4 id="2-file-upload组件"><a href="#2-file-upload组件" class="headerlink" title="2. file-upload组件"></a>2. file-upload组件</h4><ul>
<li><p>file-upload.component.html</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;upload-container&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     #uploadzone</span></pre></td></tr><tr><td class="code"><pre><span class="line">     dropzone</span></pre></td></tr><tr><td class="code"><pre><span class="line">     [class.hovering]&#x3D;&quot;uploadzone.isHovering&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     (hovered)&#x3D;&quot;uploadzone.isHovering &#x3D; $event&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     (dropped)&#x3D;&quot;onDrop($event)&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     (click)&#x3D;&quot;onClick()&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;p class&#x3D;&quot;icon&quot;&gt;&lt;mat-icon&gt;cloud_upload&lt;&#x2F;mat-icon&gt;&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;p class&#x3D;&quot;title&quot;&gt;Click or drag file to this area to upload&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;p class&#x3D;&quot;desc&quot;&gt;Support for a single or bulk upload. Strictly prohibit from uploading company data or other band files&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;li *ngFor&#x3D;&quot;let file of files&quot; [@fadeInOut]&#x3D;&quot;file.state&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;mat-progress-bar [value]&#x3D;&quot;file.progress&quot;&gt;&lt;&#x2F;mat-progress-bar&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;span class&#x3D;&quot;file-label&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#123;&#123;file.data.name&#125;&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;a title&#x3D;&quot;Retry&quot; (click)&#x3D;&quot;retryFile(file)&quot; *ngIf&#x3D;&quot;file.canRetry&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;mat-icon&gt;refresh&lt;&#x2F;mat-icon&gt;&lt;&#x2F;a&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;a title&#x3D;&quot;Cancel&quot; (click)&#x3D;&quot;cancelFile(file)&quot; *ngIf&#x3D;&quot;file.canCancel&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;mat-icon&gt;cancel&lt;&#x2F;mat-icon&gt;&lt;&#x2F;a&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;span&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;input</span></pre></td></tr><tr><td class="code"><pre><span class="line">  type&#x3D;&quot;file&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  id&#x3D;&quot;fileUpload&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name&#x3D;&quot;fileUpload&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  multiple&#x3D;&quot;multiple&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  accept&#x3D;&quot;&#123;&#123;accept&#125;&#125;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  style&#x3D;&quot;display:none;&quot;&#x2F;&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>file-upload.component.scss</p>
</li>
</ul><a id="more"></a>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &#39;~@angular&#x2F;material&#x2F;theming&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">.upload-container &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  display: flex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flex-direction: column;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  align-content: center;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  justify-content: center;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  text-align: center;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  background: #fafafa;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  border: 1px dashed #d9d9d9;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  padding: 16px 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  margin: 20px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  cursor: pointer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  p &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    margin: 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    padding: 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .icon &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    margin-bottom: 20px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .title &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    margin: 0 0 4px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color: rgba(0,0,0,.85);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    font-size: 16px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .desc &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    color: rgba(0,0,0,.45);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    font-size: 14px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">.hovering &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  border: 1px dashed tomato;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ul,</span></pre></td></tr><tr><td class="code"><pre><span class="line">li &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    margin: 0 20px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    padding: 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    list-style: none;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mat-progress-bar &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        border-radius: 10px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .file-label &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        display: inline-flex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        vertical-align: middle;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        font-size: 12px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line-height: 18px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        justify-content: flex-end;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        width: 100%;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        padding-top: 5px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mat-icon &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            font-size: 18px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            text-align: center;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mat-icon:hover &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            color: map-get($mat-red, 500);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            margin-left: 4px;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cursor: pointer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>file-upload.component.ts</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Component, OnInit, Input, Output, EventEmitter &#125; from &quot;@angular&#x2F;core&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  trigger,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  state,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  style,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  animate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  transition</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; from &quot;@angular&#x2F;animations&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HttpClient,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HttpResponse,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HttpRequest,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HttpEventType,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  HttpErrorResponse</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; from &quot;@angular&#x2F;common&#x2F;http&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; of &#125; from &quot;rxjs&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; catchError, last, map, tap &#125; from &quot;rxjs&#x2F;operators&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; FileUploadModel &#125; from &#39;.&#x2F;file-upload.model&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &quot;app-file-upload&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  templateUrl: &quot;.&#x2F;file-upload.component.html&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  styleUrls: [&quot;.&#x2F;file-upload.component.scss&quot;],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  animations: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    trigger(&quot;fadeInOut&quot;, [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      state(&quot;in&quot;, style(&#123; opacity: 100 &#125;)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">      transition(&quot;* &#x3D;&gt; void&quot;, [animate(300, style(&#123; opacity: 0 &#125;))])</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class FileUploadComponent implements OnInit &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;** Link text *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @Input() text &#x3D; &quot;Upload&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;** Name used in form which will be sent in HTTP request. *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @Input() param &#x3D; &quot;file&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;** Target URL for file uploading. *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @Input() target &#x3D; &quot;https:&#x2F;&#x2F;file.io&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;** File extension that accepted, same as &#39;accept&#39; of &lt;input type&#x3D;&quot;file&quot; &#x2F;&gt;. By the default, it&#39;s set to &#39;image&#x2F;*&#39;. *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @Input() accept &#x3D; &quot;image&#x2F;*&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;** Allow you to add handler after its completion. Bubble up response text from remote. *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @Output() complete &#x3D; new EventEmitter&lt;string&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  private files: Array&lt;FileUploadModel&gt; &#x3D; [];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(private _http: HttpClient) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngOnInit() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  onDrop(files: FileList) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (let index &#x3D; 0; index &lt; files.length; index++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const file &#x3D; files[index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.files.push(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data: file,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        state: &quot;in&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        inProgress: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        progress: 0,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        canRetry: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        canCancel: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.uploadFiles();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  onClick() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const fileUpload &#x3D; document.getElementById(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;fileUpload&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ) as HTMLInputElement;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fileUpload.onchange &#x3D; () &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      for (let index &#x3D; 0; index &lt; fileUpload.files.length; index++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        const file &#x3D; fileUpload.files[index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.files.push(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          data: file,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          state: &quot;in&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          inProgress: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          progress: 0,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          canRetry: false,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          canCancel: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.uploadFiles();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fileUpload.click();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  cancelFile(file: FileUploadModel) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    file.sub.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.removeFileFromArray(file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  retryFile(file: FileUploadModel) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.uploadFile(file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    file.canRetry &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  private uploadFile(file: FileUploadModel) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const fd &#x3D; new FormData();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fd.append(this.param, file.data);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    const req &#x3D; new HttpRequest(&quot;POST&quot;, this.target, fd, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      reportProgress: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    file.inProgress &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    file.sub &#x3D; this._http</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .request(req)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map(event &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          switch (event.type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case HttpEventType.UploadProgress:</span></pre></td></tr><tr><td class="code"><pre><span class="line">              file.progress &#x3D; Math.round((event.loaded * 100) &#x2F; event.total);</span></pre></td></tr><tr><td class="code"><pre><span class="line">              break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case HttpEventType.Response:</span></pre></td></tr><tr><td class="code"><pre><span class="line">              return event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tap(message &#x3D;&gt; &#123;&#125;),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        last(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        catchError((error: HttpErrorResponse) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          file.inProgress &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          file.canRetry &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          return of(&#96;$&#123;file.data.name&#125; upload failed.&#96;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      )</span></pre></td></tr><tr><td class="code"><pre><span class="line">      .subscribe((event: any) &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (typeof event &#x3D;&#x3D;&#x3D; &quot;object&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          this.removeFileFromArray(file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">          this.complete.emit(event.body);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  private uploadFiles() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const fileUpload &#x3D; document.getElementById(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;fileUpload&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ) as HTMLInputElement;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fileUpload.value &#x3D; &quot;&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.files.forEach(file &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.uploadFile(file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  private removeFileFromArray(file: FileUploadModel) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const index &#x3D; this.files.indexOf(file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (index &gt; -1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.files.splice(index, 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>file-upload.model.ts</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Subscription &#125; from &quot;rxjs&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">export class FileUploadModel &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data: File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  state: string;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  inProgress: boolean;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  progress: number;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  canRetry: boolean;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  canCancel: boolean;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sub?: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="3-drop指令"><a href="#3-drop指令" class="headerlink" title="3. drop指令"></a>3. drop指令</h4><ul>
<li>dropzone.directive.ts</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Directive, HostListener, Output, EventEmitter &#125; from &quot;@angular&#x2F;core&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Directive(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &quot;[dropzone]&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class DropzoneDirective &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @Output() dropped &#x3D; new EventEmitter&lt;FileList&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @Output() hovered &#x3D; new EventEmitter&lt;boolean&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostListener(&quot;drop&quot;, [&quot;$event&quot;])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onDrop($event) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $event.preventDefault();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.dropped.emit($event.dataTransfer.files);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.hovered.emit(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostListener(&quot;dragover&quot;, [&quot;$event&quot;])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onDragOver($event) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $event.preventDefault();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.hovered.emit(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostListener(&quot;dragleave&quot;, [&quot;$event&quot;])</span></pre></td></tr><tr><td class="code"><pre><span class="line">  onDragLeave($event) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $event.preventDefault();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.hovered.emit(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="4-Demo-Stackblitz-地址"><a href="#4-Demo-Stackblitz-地址" class="headerlink" title="4. Demo Stackblitz 地址"></a>4. Demo Stackblitz 地址</h4><p><a href="[https://angular-drag-file-upload.stackblitz.io/](https://angular-drag-file-upload.stackblitz.io/)">angular-drag-file-upload</a></p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>如何将你的Angular项目变成渐进式PWA应用？</title>
    <url>/2020/04/06/ng-pwa/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>渐进式Web应用程序（PWA）是一种Web应用程序，它提供了一组功能，可以为网站提供类似App的体验。</p><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><p>==特别提醒：以下是采用了angular/cli 9.1==</p><ul>
<li>使用脚手架将pwa集成到我们的项目里<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 终端命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">ng add @angular&#x2F;pwa</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 以下是输出信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">localhost:d1 apple$ ng add @angular&#x2F;pwa</span></pre></td></tr><tr><td class="code"><pre><span class="line">Installing packages for tooling via npm.</span></pre></td></tr><tr><td class="code"><pre><span class="line">Installed packages for tooling via npm.</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE ngsw-config.json (620 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;manifest.webmanifest (1296 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;assets&#x2F;icons&#x2F;icon-128x128.png (1253 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;assets&#x2F;icons&#x2F;icon-144x144.png (1394 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;assets&#x2F;icons&#x2F;icon-152x152.png (1427 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;assets&#x2F;icons&#x2F;icon-192x192.png (1790 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;assets&#x2F;icons&#x2F;icon-384x384.png (3557 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;assets&#x2F;icons&#x2F;icon-512x512.png (5008 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;assets&#x2F;icons&#x2F;icon-72x72.png (792 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">CREATE src&#x2F;assets&#x2F;icons&#x2F;icon-96x96.png (958 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">UPDATE angular.json (3795 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">UPDATE package.json (1319 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">UPDATE src&#x2F;app&#x2F;app.module.ts (604 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">UPDATE src&#x2F;index.html (470 bytes)</span></pre></td></tr><tr><td class="code"><pre><span class="line">✔ Packages installed successfully.</span></pre></td></tr><tr><td class="code"><pre><span class="line">localhost:d1 apple$</span></pre></td></tr></table></figure>

</li>
</ul><a id="more"></a>


<p>从输出日志我们可以看出来，命令会添加service-worker 包，并建立必要的支持文件，如果你生成的文件不全或者写入失败则需要手动创建对应的文件。</p>
<h4 id="3-运行"><a href="#3-运行" class="headerlink" title="3. 运行"></a>3. 运行</h4><ul>
<li>由于 ng serve 对 Service Worker 无效，所以必须用一个独立的 HTTP 服务器在本地测试你的项目。这里我们选择<a href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener">http-server</a>，这也是官方推荐的。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1. 全局安装http-server（PS：如果你之前安装有可以跳过这一步）</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i -g http-server</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 2. 构建生产文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">ng build --prod</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 3. 运行项目（PS：下边的文件目录是默认目录，如果你项目做了更改则调整我自己项目构建出来的生产文件目录即可）</span></pre></td></tr><tr><td class="code"><pre><span class="line">http-server -p 4200 -c-1 dist&#x2F;&lt;项目的名字&gt;</span></pre></td></tr></table></figure>

<ul>
<li>http-server 简单介绍<ul>
<li><ol>
<li>如果你的项目是默认打包，则使用以下终端命令：-p 是 –port 的简写，-c-1是禁用浏览器cache-control max-age。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http-server -p 4200 -c-1 dist&#x2F;&lt;项目的名字&gt;</span></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="2">
<li>如果你的项目是使用了gzip压缩，则使用以下终端命令：-g 是 –gzip 的简写；-p 是 –port 的简写，-c-1是禁用浏览器cache-control max-age。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http-server -g -p 4200 -c-1 dist&#x2F;&lt;项目的名字&gt;</span></pre></td></tr></table></figure></li>
</ol>
</li>
<li><ol start="3">
<li>如果你的项目是使用了brotli压缩，则使用以下终端命令：-b 是 –brotli 的简写，；-p 是 –port 的简写，-c-1是禁用浏览器cache-control max-age。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http-server -b -p 4200 -c-1 dist&#x2F;&lt;项目的名字&gt;</span></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><img src="https://github.com/lanxuexing/assets/raw/master/pwa/install.png" alt="PWA标识"></p>
<p><img src="https://github.com/lanxuexing/assets/raw/master/pwa/install-tip.png" alt="安装提示框"></p>
<h4 id="4-PWA结构介绍"><a href="#4-PWA结构介绍" class="headerlink" title="4. PWA结构介绍"></a>4. PWA结构介绍</h4><ul>
<li>manifest.webmanifest（PS：旧版本的cli生成的文件是：manifest.json）<br>  它是Web应用程序清单文件，json结构，主要用于浏览器识别Web应用程序。里边有很多配置项，具体可以查阅<a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="noopener">MDN Web app manifests</a>。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;name&quot;: &quot;pwa&quot;, &#x2F;&#x2F; 应用程序安装的的名字，主要用于浏览器上的显示</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;short_name&quot;: &quot;pwa&quot;, &#x2F;&#x2F; 移动设备或者iPad上的安装</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;theme_color&quot;: &quot;#1976d2&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;background_color&quot;: &quot;#fafafa&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;display&quot;: &quot;standalone&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;scope&quot;: &quot;.&#x2F;&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;start_url&quot;: &quot;.&#x2F;&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;icons&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;src&quot;: &quot;assets&#x2F;icons&#x2F;icon-72x72.png&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;sizes&quot;: &quot;72x72&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;src&quot;: &quot;assets&#x2F;icons&#x2F;icon-96x96.png&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;sizes&quot;: &quot;96x96&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;src&quot;: &quot;assets&#x2F;icons&#x2F;icon-128x128.png&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;sizes&quot;: &quot;128x128&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;src&quot;: &quot;assets&#x2F;icons&#x2F;icon-144x144.png&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;sizes&quot;: &quot;144x144&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;src&quot;: &quot;assets&#x2F;icons&#x2F;icon-152x152.png&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;sizes&quot;: &quot;152x152&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;src&quot;: &quot;assets&#x2F;icons&#x2F;icon-192x192.png&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;sizes&quot;: &quot;192x192&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;src&quot;: &quot;assets&#x2F;icons&#x2F;icon-384x384.png&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;sizes&quot;: &quot;384x384&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;src&quot;: &quot;assets&#x2F;icons&#x2F;icon-512x512.png&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;sizes&quot;: &quot;512x512&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;type&quot;: &quot;image&#x2F;png&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 上边是图标配置的一些信息，但是在Apple设备上会有问题，IOS在PWA的支持上目前还有点落后，为确保你的Web应用在IOS设备上也有一个完美的图标，将将以下代码加入到你项目的index.html的head的tag中。（PS：确保这些文件要存在于你的资产目录）</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;apple-touch-icon&quot; href&#x3D;&quot;&#x2F;assets&#x2F;icons&#x2F;apple-touch-icon-iphone.png&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;apple-touch-icon&quot; sizes&#x3D;&quot;152x152&quot; href&#x3D;&quot;&#x2F;assets&#x2F;icons&#x2F;apple-touch-icon-iphone.png&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;apple-touch-icon&quot; sizes&#x3D;&quot;167x167&quot; href&#x3D;&quot;&#x2F;assets&#x2F;icons&#x2F;apple-touch-icon-ipad-retina.png&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;apple-touch-icon&quot; sizes&#x3D;&quot;180x180&quot; href&#x3D;&quot;&#x2F;assets&#x2F;icons&#x2F;apple-touch-icon-iphone-retina.png&quot;&#x2F;&gt;</span></pre></td></tr></table></figure>

<ul>
<li><p>app.module.ts</p>
<p>  默认PWA是在生产模式才开启，如果你想在测试环境也开启的话，请手动修改这里。</p>
</li>
</ul>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; BrowserModule &#125; from &#39;@angular&#x2F;platform-browser&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; NgModule &#125; from &#39;@angular&#x2F;core&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; AppRoutingModule &#125; from &#39;.&#x2F;app-routing.module&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; AppComponent &#125; from &#39;.&#x2F;app.component&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; ServiceWorkerModule &#125; from &#39;@angular&#x2F;service-worker&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; environment &#125; from &#39;..&#x2F;environments&#x2F;environment&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@NgModule(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  declarations: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AppComponent</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  imports: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    BrowserModule,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AppRoutingModule,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ServiceWorkerModule.register(&#39;ngsw-worker.js&#39;, &#123; enabled: environment.production &#125;) &#x2F;&#x2F; &lt;&#x3D;&#x3D;&#x3D; 手动修改这里，去掉enabled即可所有环境开启PWA</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  providers: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  bootstrap: [AppComponent]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class AppModule &#123; &#125;</span></pre></td></tr></table></figure></code></pre><ul>
<li>ngsw-config.json<br>  顾名思义，是angular工程创建pwa的配置文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;$schema&quot;: &quot;.&#x2F;node_modules&#x2F;@angular&#x2F;service-worker&#x2F;config&#x2F;schema.json&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;index&quot;: &quot;&#x2F;index.html&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;assetGroups&quot;: [ &#x2F;&#x2F; 资产组配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;name&quot;: &quot;app&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;installMode&quot;: &quot;prefetch&quot;, &#x2F;&#x2F; 安装策略，默认拉取所有资源，好处是脱机状态下也能使用Web APP，另一种备用策略是：lazy，即按需安装。</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;resources&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;files&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &quot;&#x2F;favicon.ico&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &quot;&#x2F;index.html&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &quot;&#x2F;manifest.webmanifest&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &quot;&#x2F;*.css&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &quot;&#x2F;*.js&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;name&quot;: &quot;assets&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;installMode&quot;: &quot;lazy&quot;, &#x2F;&#x2F; 资产缓存，默认是用lazy策略。</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;updateMode&quot;: &quot;prefetch&quot;, &#x2F;&#x2F; 使用lazy策略之后需要设置更新模式为：prefetch，这样有新的更新可以主动更新。</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;resources&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;files&quot;: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &quot;&#x2F;assets&#x2F;**&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &quot;&#x2F;*.(eot|svg|cur|jpg|png|webp|gif|otf|ttf|woff|woff2|ani)&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;urls&quot;: [ &#x2F;&#x2F; 这里是使用外部服务器或者CDN的配置，比如这里我设置了使用Google字体</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;**&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;dataGroups&quot;: [&#123; &#x2F;&#x2F; 数据组配置，与资产组配置不同的是，这里的配置没有被打包在Web APP里，比如下边这个是使用了外部API。数组组配置支持两种策略：freshness 和 performance。freshness多用于经常更新的资源，即：始终尝试获取最新的版本资源，然后再回退到缓存里。performance策略是默认策略，对于变化不大的资源有用。</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;name&quot;: &quot;api-freshness&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;urls&quot;: [ &quot;https:&#x2F;&#x2F;my.apipage.com&#x2F;user&quot; ], &#x2F;&#x2F; 这里的配置是：从&#x2F;user接口拉取数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &quot;cacheConfig&quot;: &#123; &#x2F;&#x2F; 缓存配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;strategy&quot;: &quot;freshness&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;maxSize&quot;: 5, &#x2F;&#x2F; 最多同时支持5个相应</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;maxAge&quot;: &quot;1h&quot;, &#x2F;&#x2F; 最多缓存一小时</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &quot;timeout&quot;: &quot;3s&quot; &#x2F;&#x2F; 超时时间是3秒</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="https://github.com/lanxuexing/assets/raw/master/pwa/console.png" alt="PWA面板"></p>
<p><img src="https://github.com/lanxuexing/assets/raw/master/pwa/pull.png" alt="PWA资源拉取"></p>
<h4 id="5-PWA更新"><a href="#5-PWA更新" class="headerlink" title="5. PWA更新"></a>5. PWA更新</h4><p>PWA @angular/service-worker 中的 SwUpdate 提供更新检测，也就是说当用户正在使用Web APP或者网页版网站时，我们刚好部署了新版本，这个时候就可以使用SwUpdate的trigger机制，通知用户更新新版本。</p>
<p><img src="https://github.com/lanxuexing/assets/raw/master/pwa/update.png" alt="PWA版本更新"></p>
<p>那么如何实现这个功能呢？其实也很简单，我们创建一个服务，然后订阅这个服务就好了，当有版本更新的时候，PWA的服务会收到这个回调，我们在回调里处理我们的逻辑即可。话不多说，上代码啦～</p>
<ul>
<li>sw-updates.service.ts</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; ApplicationRef, Injectable, OnDestroy &#125; from &#39;@angular&#x2F;core&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; SwUpdate &#125; from &#39;@angular&#x2F;service-worker&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; concat, interval, NEVER, Observable, Subject &#125; from &#39;rxjs&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; first, map, takeUntil, tap &#125; from &#39;rxjs&#x2F;operators&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * SwUpdatesService</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @description</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 1. 实例化后检查可用的ServiceWorker更新.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 2. 每6小时重新检查一次.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 3. 只要有可用的更新, 就会激活更新.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @propertys</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * &#96;updateActivated&#96; &#123;Observable&lt;string&gt;&#125; - 每当激活更新时，发出版本哈希.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">@Injectable(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  providedIn: &#39;root&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class SwUpdatesService implements OnDestroy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  private checkInterval &#x3D; 1000 * 60 * 60 * 6; &#x2F;&#x2F; 6 小时</span></pre></td></tr><tr><td class="code"><pre><span class="line">  private onDestroy &#x3D; new Subject&lt;void&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  updateActivated: Observable&lt;string&gt;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    appRef: ApplicationRef,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private swu: SwUpdate</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!swu.isEnabled) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      this.updateActivated &#x3D; NEVER.pipe(takeUntil(this.onDestroy));</span></pre></td></tr><tr><td class="code"><pre><span class="line">      return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 定期检查更新(在应用稳定后).</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const appIsStable &#x3D; appRef.isStable.pipe(first(v &#x3D;&gt; v));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concat(appIsStable, interval(this.checkInterval))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tap(() &#x3D;&gt; this.log(&#39;Checking for update...&#39;)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            takeUntil(this.onDestroy),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .subscribe(() &#x3D;&gt; this.swu.checkForUpdate());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 激活可用的更新.</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.swu.available</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tap(evt &#x3D;&gt; this.log(&#96;Update available: $&#123;JSON.stringify(evt)&#125;&#96;)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            takeUntil(this.onDestroy),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">        .subscribe(() &#x3D;&gt; this.swu.activateUpdate());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 通知已激活的更新.</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.updateActivated &#x3D; this.swu.activated.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tap(evt &#x3D;&gt; this.log(&#96;Update activated: $&#123;JSON.stringify(evt)&#125;&#96;)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map(evt &#x3D;&gt; evt.current.hash),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        takeUntil(this.onDestroy),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngOnDestroy() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.onDestroy.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  private log(message: string) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    const timestamp &#x3D; new Date().toISOString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    console.log(&#96;[SwUpdates - $&#123;timestamp&#125;]: $&#123;message&#125;&#96;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>app.component.ts</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Component, OnInit &#125; from &#39;@angular&#x2F;core&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; SwUpdatesService &#125; from &#39;.&#x2F;sw-updates.service&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &#39;app-root&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  templateUrl: &#39;.&#x2F;app.component.html&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  styleUrls: [&#39;.&#x2F;app.component.scss&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class AppComponent implements OnInit &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  title &#x3D; &#39;pwa&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private swUpdates: SwUpdatesService</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngOnInit(): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.swUpdates.updateActivated.subscribe(_ &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      if (confirm(&#39;检测到版本更新，是否更新到最新版本？(╯#-_-)╯~~&#39;)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        window.location.reload();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="6-PWA消息推送"><a href="#6-PWA消息推送" class="headerlink" title="6. PWA消息推送"></a>6. PWA消息推送</h4><p>在PWA @angular/service-worker 的 SwPush 中，我们可以订阅并接收来着Service Worker的推送通知，当然我们需要借助服务器来实现这个机制，下边是简单的开发模式实现，后续有时间我再更新文章啦～</p>
<p><img src="https://github.com/lanxuexing/assets/raw/master/pwa/push.png" alt="PWA消息推送"></p>
<ul>
<li>前端代码实现</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Component &#125; from &#39;@angular&#x2F;core&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; SwPush &#125; from &#39;@angular&#x2F;service-worker&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &#39;app-root&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  templateUrl: &#39;.&#x2F;app.component.html&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  styleUrls: [&#39;.&#x2F;app.component.scss&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class AppComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  title &#x3D; &#39;pwa&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private swPush: SwPush</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 监听通知的点击事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.swPush.notificationClicks.subscribe(event &#x3D;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      console.log(&#39;消息推送: &#39;, event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      const url &#x3D; event.notification.data.url;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      window.open(url, &#39;_blank&#39;); &#x2F;&#x2F; 这里是点击推送的通知后跳转新页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>angualr</tag>
      </tags>
  </entry>
  <entry>
    <title>Angualr如何禁用插值表达式？</title>
    <url>/2020/03/20/ng-interpolation/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><pre><code>最近收到一个需求，说要在html里显示这样的文本信息：`{{ $random }} 产生随机数`，但是`{{ }}`插值表达式被插入html的时候默认会被Angular解析，最终显示：`产生随机数`，显然不是我们想要的结果！怎么办呢？</code></pre><h4 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h4><p>原来Angular是可以使用指令禁用这个插值表达式的，即：<code>ngNonBindable</code></p><a id="more"></a>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 没有指令的情况，最终输出 ==&gt; 产生随机数 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; $random &#125;&#125; 产生随机数<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有指令的情况，最终输出 ==&gt; &#123;&#123; $random &#125;&#125; 产生随机数 --&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ngNonBindable</span>&gt;</span>&#123;&#123; $random &#125;&#125; 产生随机数<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angualr</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular如果设置Title和Meta信息</title>
    <url>/2020/02/29/ng-title-meta/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>我们在项目中有的时候想要动态设置网页的title，有的时候会根据某种需求去动态设置meta信息，那么在SPA的Angular中如何做到呢？（PS：当然你可能会想，直接写javascript脚本修改不就OK了？！，下面要讨论的是如何用Angular的方式去修改。）</p><h4 id="2-如何修改网页的Title呢？"><a href="#2-如何修改网页的Title呢？" class="headerlink" title="2. 如何修改网页的Title呢？"></a>2. 如何修改网页的Title呢？</h4><a id="more"></a>
<p>Angular在platform-browser包中为我们提供了一个<a href="https://angular.io/api/platform-browser/Title" target="_blank" rel="noopener">Title</a>服务，我们可以通过这个服务做到动态修改Title。</p>
<p>话不多说，直接上代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Html</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">请输入你要设置的Title值：&lt;input #titleInput&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;br&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;button (click)&#x3D;&quot;dynamicSetTitle(titleInput.value)&quot;&gt;点击我设置Title&lt;&#x2F;button&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">-----------------------------------------</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; TS</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; Component &#125; from &#39;@angular&#x2F;core&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; Title &#125; from &#39;@angular&#x2F;platform-browser&#39;; &#x2F;&#x2F; 引入包依赖</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &#39;my-app&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  templateUrl: &#39;.&#x2F;app.component.html&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  styleUrls: [ &#39;.&#x2F;app.component.css&#39; ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class AppComponent  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private titleService: Title &#x2F;&#x2F; 注入Title服务</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#x2F;&#x2F; 根据输入框输入的文本内容动态设置Title值</span></pre></td></tr><tr><td class="code"><pre><span class="line">  dynamicSetTitle(title: string): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.titleService.setTitle(title);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>是不是很easy！</p>
<h4 id="3-如何修改Meta信息？"><a href="#3-如何修改Meta信息？" class="headerlink" title="3. 如何修改Meta信息？"></a>3. 如何修改Meta信息？</h4><p>Angular在platform-browser包中为我们提供了一个<a href="https://angular.io/api/platform-browser/Meta" target="_blank" rel="noopener">Meta</a>服务，我们可以通过这个服务做到动态修改Meta。</p>
<p>话不多说，直接上代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Component &#125; from &#39;@angular&#x2F;core&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; Meta &#125; from &#39;@angular&#x2F;platform-browser&#39;; &#x2F;&#x2F; 引入包依赖</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &#39;my-app&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  templateUrl: &#39;.&#x2F;app.component.html&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  styleUrls: [ &#39;.&#x2F;app.component.css&#39; ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class AppComponent  &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  constructor(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private metaService: Meta</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.metaService.updateTag(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      name: &#39;description&#39;, content: &#39;我动态设置的描述信息～&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>OK，是不是也很简单呢？当然Meta服务提供的方法还有很多，具体如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Meta &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  addTag(tag: MetaDefinition, forceCreation: boolean &#x3D; false): HTMLMetaElement | null</span></pre></td></tr><tr><td class="code"><pre><span class="line">  addTags(tags: MetaDefinition[], forceCreation: boolean &#x3D; false): HTMLMetaElement[]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getTag(attrSelector: string): HTMLMetaElement | null</span></pre></td></tr><tr><td class="code"><pre><span class="line">  getTags(attrSelector: string): HTMLMetaElement[]</span></pre></td></tr><tr><td class="code"><pre><span class="line">  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null</span></pre></td></tr><tr><td class="code"><pre><span class="line">  removeTag(attrSelector: string): void</span></pre></td></tr><tr><td class="code"><pre><span class="line">  removeTagElement(meta: HTMLMetaElement): void</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="4-stackblitz在线Demo"><a href="#4-stackblitz在线Demo" class="headerlink" title="4. stackblitz在线Demo"></a>4. stackblitz在线Demo</h4><p><a href="https://stackblitz.com/edit/angular-title-meta-demo" target="_blank" rel="noopener">https://stackblitz.com/edit/angular-title-meta-demo</a></p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular import path 最佳实践</title>
    <url>/2020/02/25/ng-path-mapping/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>当我们的Angular项目越来越大之后，我们会发现我们的每一个模块都散落在很深层次的路径当中，当我们需要导入某个模块或者组件时，我们会发现我们import的TypeScript路径可读性非常的差。当然你可以说，我们强大的IDE不就帮我把这个解决了吗，其实我们完全可以写得更优雅一些，import的path完全不需要那么长，那么怎么解决这个问题呢？答案就是：<strong>TypeScript Path Mapping</strong>。</p><a id="more"></a>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里举例说明</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">'../../../../../shared/shared.service'</span>;</span></pre></td></tr></table></figure>

<h4 id="2-How-do-you-do-it"><a href="#2-How-do-you-do-it" class="headerlink" title="2. How do you do it?"></a>2. How do you do it?</h4><p>找到你Angular项目目录下的<strong>tsconfig.json</strong>文件，然后编辑<strong>paths</strong>配置，使用你自定义的有意义的路径名映射你要找到全路径。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"compileOnSave"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"./"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"typeRoots"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">"node_modules/@types"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"lib"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">"es2018"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="string">"dom"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"paths"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"@stubs/*"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"./src/app/stubs/*"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"@state/*"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"./src/app/state/*"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"@shared/*"</span>: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">"./src/app/shared/*"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"angularCompilerOptions"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"fullTemplateTypeCheck"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"strictInjectionParameters"</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>配置完成之后，接下来就可以优雅的更改我们之前的代码啦～</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置好tsconfig.json中的paths之后的版本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">'@shared/shared.service'</span>;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>vim学习笔记</title>
    <url>/2020/01/16/vim/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul>
<li>vim语法高亮</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~&#x2F;.vimrc</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 然后在文件中添加如下代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">syntax on</span></pre></td></tr><tr><td class="code"><pre><span class="line">colorscheme darkblue</span></pre></td></tr></table></figure>

<ul>
<li><a href="https://yianwillis.github.io/vimcdoc/doc/help.html" target="_blank" rel="noopener">vim在线中文帮助文档</a></li>
</ul>
<h4 id="1-插入文本"><a href="#1-插入文本" class="headerlink" title="1. 插入文本"></a>1. 插入文本</h4><a id="more"></a>
<ul>
<li><ol>
<li>Normal模式与Insert模式<ul>
<li>Normal模式：键入的每个自负都被视为一个命令</li>
<li>Insert模式：键入的自负作为实际要输入的文本内容，使用<code>i</code>命令（insert）</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>现在是什么模式？<ul>
<li>打开显示模式：<code>:set showmode</code></li>
<li>关闭显示模式：<code>:set noshowmode</code></li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>模式之灾<ul>
<li>使用Vim经常忘记自己身在何种模式，或者不经意敲了那个字符就切换到别的模式去了，按再次<code>Esc</code>，如果Vim以一声蜂鸣来回答你，那说明你已经是在<code>Normal</code>模式了。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>移动光标<ul>
<li>移动光标命令<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">       K  上</span></pre></td></tr><tr><td class="code"><pre><span class="line">h  左         l  右</span></pre></td></tr><tr><td class="code"><pre><span class="line">       j  下</span></pre></td></tr></table></figure></li>
<li>也可以用箭头键来移动光标，会大大的降低效率，想象一下要是一下你在一小时内这样的做一百次会占用你多少时间？在编辑器中移动光标是十分常用的操作，这些字符在键盘上都分布在你右手周围，精心挑选的。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>删除字符<ul>
<li><ol>
<li>删除一个字符命令：<code>x</code><ul>
<li>这是在追忆古老的打字机的时代，在打字机上删除字符就是用xxxx来覆盖它的。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>删除一行命令：<code>dd</code><ul>
<li>删除后下边的行会移上来填补空缺。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>删除换行符命令：<code>J</code><ul>
<li>把两行合并为一行，也就是说两行之间的换行符被删除了。 </li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>撤销和重做<ul>
<li><ol>
<li>撤销命令：<code>u</code>（undo）<ul>
<li>如果误删除了过多的内容，命令<code>u</code>更简便，它可以撤销上一次的操作。</li>
<li>撤销命令还有另一种形式，<code>U</code>命令，它一次撤销对一行的全部操作，即打开文件时的状态。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>重做命令：<code>ctrl + r</code>（repeat）<ul>
<li>如果你撤销了多次，可以用<code>ctrl + r</code>来反转撤销的动作，换句话说它是对撤销的撤销。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>其他编辑命令<ul>
<li><ol>
<li>追加</li>
</ol>
<ul>
<li>在光标之后插入文本命令：<code>a</code>（append）</li>
<li>另起一行命令：<code>o/O</code><ul>
<li><code>o</code>命令可以在当前行的下边另起一行，并使当前模式反转为Insert模式，而大写的<code>O</code>，是在当前行的上边另起一行。</li>
</ul>
</li>
</ul>
</li>
<li><ol start="2">
<li>使用命令计数</li>
</ol>
<ul>
<li>指定的数字要紧挨在它所有修饰的命令前边。</li>
<li>假设你要向上移动9行，这可以用<code>kkkkkkkkk</code>或者<code>9K</code>来完成。</li>
<li>行尾追加三个感叹号，可以用<code>a!!!</code>，另一个办法是<code>3a! &lt;Esc&gt;</code>命令。</li>
<li>删除3个字符可以用<code>3x</code></li>
</ul>
</li>
<li><ol start="3">
<li>退出</li>
</ol>
<ul>
<li>放弃编辑命令：<code>q!</code><ul>
<li>有时你会在做了一连串的修改之后突然意识到最好是放弃所有的修改重新来过，这个命令由3个部分组成：冒号<code>,</code>，用以进入冒号命令行模式：<code>q</code>命令，告诉编辑器退出；最后是强制命令行的修饰符（！） </li>
</ul>
</li>
<li>放弃所有修改后还想以该文件的初始内容作为开始继续编辑：<code>e!</code>（edit）</li>
<li>保存并退出命令：<code>ZZ</code>或者<code>:wq</code> （write quit）</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="2-帮助文档"><a href="#2-帮助文档" class="headerlink" title="2. 帮助文档"></a>2. 帮助文档</h4><p>你想做的任何操作都可以在vim的帮助文文件中找到答案，所以不用怕问问题。</p>
<ul>
<li><ol>
<li>打开帮助命令：<code>:help</code> 或者 <code>F1</code></li>
</ol>
</li>
<li><ol start="2">
<li>打开用户手册的目录：<code>:help usr_toc.txt</code></li>
</ol>
</li>
<li><ol start="3">
<li>常用的帮助命令的使用<ul>
<li><ol>
<li>查看关于某个特殊主题的帮助：<code>:help {subject}</code><ul>
<li><ol>
<li><code>:help x</code> 关于x命令的帮助</li>
</ol>
</li>
<li><ol start="2">
<li><code>:help deleting</code>  关于如何删除的内容</li>
</ol>
</li>
<li><ol start="3">
<li><code>:helo index</code>   所有vim命令的索引</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>关于某个控制字符的帮助： <code>CTRL-{subject}</code><ul>
<li><ol>
<li><code>:help CTRL-A</code></li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>查找其他模式下的帮助<ul>
<li><ol>
<li><code>:help i_CTRL-H</code>  insert模式</li>
</ol>
</li>
<li><ol start="2">
<li><code>:help v_CTRL-B</code>  Visusl模式</li>
</ol>
</li>
<li><ol start="3">
<li><code>:help c_CTRL-B</code>  Command模式</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>关于命令行选项：<code>-{subject}</code><ul>
<li><ol>
<li><code>:help -R</code>   vim -R file.txt 以只读模式打开文件   </li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>关于命令行选项的说明：<code>showmode</code><ul>
<li><code>:help &#39;showmode&#39;</code>  </li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>特殊键用尖括号中的简单的描述性名字表示<ul>
<li><ol>
<li><code>:help i_&lt;Up&gt;</code></li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="7">
<li>错误ID号的作为帮助的主题<ul>
<li><ol start="2">
<li><code>:help {错误ID}</code> </li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="8">
<li>关于函数<code>subject</code>的帮助<ul>
<li><ol>
<li><code>:help add()</code>  在vimscript中使用</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="9">
<li>关于编译时特性<code>+subject</code>的帮助<ul>
<li><ol>
<li><code>:help +visual</code></li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="10">
<li>查找一个以<code>pattern</code>开始的帮助标记，重复按<code>Tab</code>查看其他匹配的帮助标记<ul>
<li><ol>
<li><code>:help pattern&lt;Tab&gt;</code> </li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="11">
<li>同时列出匹配<code>pattern</code>的所有可能的帮助主题<ul>
<li><ol>
<li><code>:help pattern&lt;Ctrl-d&gt;</code></li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="12">
<li>在所有帮助文档中搜索全部文本查找指定的pattern<ul>
<li><ol>
<li><code>:helpgrep pattern</code></li>
</ol>
</li>
<li><ol start="2">
<li><code>:copen</code> 打开快速列表 直接回车键进入编辑</li>
</ol>
</li>
<li><ol start="3">
<li><code>:cclose</code> 关闭快速列表</li>
</ol>
</li>
<li><ol start="4">
<li><code>:cn</code> 下一匹配</li>
</ol>
</li>
<li><ol start="5">
<li><code>:cprev  或者  :cN</code>  前一个匹配</li>
</ol>
</li>
<li><ol start="6">
<li><code>:cfirst</code> 第一个匹配</li>
</ol>
</li>
<li><ol start="7">
<li><code>:clast</code>  最后一个匹配</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="3-移动"><a href="#3-移动" class="headerlink" title="3. 移动"></a>3. 移动</h4><p>要想把vim玩得好，移动是必备的技能点。</p>
<ul>
<li><ol>
<li>以word为单位的移动<ul>
<li><code>w</code>命令（word）：光标向前移动一个word，光标会移动到下一个word的首字符上，同时可以加计数前缀，如<code>3w</code>，将光标向前移动3个word。</li>
<li><code>b</code>命令（backward）：光标向后移动到前一个word的首字符上，同时可以加计数前缀，如<code>3b</code>，将光标向后移动3个word。</li>
<li><code>e</code>命令（end of word）：光标向前移动到下一个word的最后一个字符上。</li>
<li><code>ge</code>命令：光标向后移动到前一个word的最后一个字符上。<ul>
<li>以上命令如果遇到连字符<code>/ - _ . 、(</code>等等，按下大写的命令即可。</li>
<li>混合使用这几种不同的大小写命令，可以让你更快的在文本前后移动。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>移动到行首或行尾<ul>
<li><code>$</code>命令：光标移动到当前行行尾，与<code>End</code>键作用相同，可以接受计数命令，如<code>2$</code>表示下一行的行尾。</li>
<li><code>^</code>命令：光标移动到当前行第一个非空的字符上。</li>
<li><code>0</code>命令：光标移动到当前行第一个字符上，与<code>Home</code>键作用相同。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>移动到指定的字符上<ul>
<li><code>f</code>命令（find）：向后单字符搜索命令，如<code>fx</code>在当前行查找下一个字符x,同时也可以使用计数命令，如<code>3fx</code>。</li>
<li><code>F</code>命令：向左单字符搜索命令。</li>
<li><code>t</code>命令（to）：向右单字符搜索命令，只不过不是把光标停留在被搜索字符上，而是它之前的一个字符上。</li>
<li><code>T</code>命令：向左单字符搜索命令。<ul>
<li>可以同时与<code>;</code>键来重复使用这些命令。 </li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>以匹配一个括号为目的移动<ul>
<li><code>%</code>命令：光标跳转到与当前光标相匹配的括号上，括号：() [] {}<ul>
<li>如果当前光标没有停留在一个可用的括号字符上，会向前找到第一个括号，与之匹配。 </li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>移动到指定行<ul>
<li><code>G</code>命令（go）：光标定位到计数指定的行，如果没有指定计数，光标会定位到最后一行。</li>
<li><code>gg</code>命令：定位到第一行与<code>1G</code>的效果相同。</li>
<li><code>%</code>命令：光标定位到计数指定的行上，如<code>50%</code>，<code>90%</code>等。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>告诉你当前的位置<ul>
<li><code>Ctrl-g</code>命令：显示信息行，如行号，总行数，以及当前行在文件中的百分比。</li>
<li><code>set number</code>命令：显示行号。</li>
<li><code>set nonumber</code>命令：关闭显示行号。</li>
<li><code>set ruler</code>命令：显示当前光标的位置。</li>
<li><code>set noruler</code>命令：关闭显示当前光标的位置。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="7">
<li>滚屏<ul>
<li><code>Ctrl-u</code>命令（up）：文本向下滚动半屏，窗口向上滚动半屏。</li>
<li><code>Ctrl-d</code>命令（down）：文本向上滚动半屏，窗口向下滚动半屏。</li>
<li><code>Ctrl-e</code>命令（extra）：文本向上滚动一行，窗口向下滚动一行。</li>
<li><code>Ctrl-y</code>命令：文本向下滚动一行，窗口向上滚动一行。</li>
<li><code>Ctrl-f</code>命令（forward）：文本向下滚动一屏，窗口向上滚动一屏。</li>
<li><code>Ctrl-b</code>命令（backward）：文本向上滚动一屏，窗口向下滚动一屏。</li>
<li><code>zz</code>命令：当前行置于正中央。</li>
<li><code>zt</code>命令（top）：当前行置于屏幕顶端。</li>
<li><code>zb</code>命令（bottom）：当前行置于屏幕底端。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="8">
<li>简单搜索<ul>
<li><ol>
<li>常用命令<ul>
<li><code>/{string}</code>命令：向下搜索一个字符串。</li>
<li><code>?{string}</code>命令：向上搜索一个字符串。<ul>
<li><code>n</code>命令：下一次搜索，可以加计数命令。</li>
<li><code>N</code>命令：上一次搜索，可以加计数命令。<ul>
<li><code>. * ^ ~ $</code>有特殊的意义，需要一个反斜杠<code>\</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>大小写问题<ul>
<li><code>:set ignorecase</code>：开启搜索忽略大小写。</li>
<li><code>:set noignorecase</code>：关闭搜索忽略大小写。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>命令历史记录<ul>
<li>按下<code>/</code>来搜索，先别按回车键，上箭头键会显示你上一次进行搜索的命令。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>在文本中查找下一个word<ul>
<li><code>*</code>命令：向下搜索下一个当前光标所在的单词。</li>
<li><code>#</code>命令：向上搜索下一个当前光标所在的单词。<ul>
<li>默认以<code>\&lt;{word}\&gt;</code>，完整的单词搜索。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>查找整个word<ul>
<li><code>\&gt;</code>：单词结束符。</li>
<li><code>\&lt;</code>：单词开始符。</li>
<li><code>\&lt;{word}\&gt;</code>：完整的单词搜索。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>高亮显示搜索结果<ul>
<li><code>:set hlsearch</code>命令（highlight search）： 开启高亮显示搜索结果。</li>
<li><code>:set nohlsearch</code>命令： 关闭高亮显示搜索结果。</li>
<li><code>nohlsearch</code>：去掉当前的高亮显示</li>
</ul>
</li>
</ol>
</li>
<li><ol start="7">
<li>调整搜索<ul>
<li><code>:set incsearch</code>：开启使用键入莫表字符串同时就开始搜索。</li>
<li><code>:set noincsearch</code>：关闭使用键入莫表字符串同时就开始搜索。</li>
<li><code>set warpscan</code>：开启到达文件的尾部会向另一个方向进行搜索。</li>
<li><code>set nowarpscan</code>：关闭到达文件的尾部会向另一个方向进行搜索。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="4-简单的搜索模式"><a href="#4-简单的搜索模式" class="headerlink" title="4. 简单的搜索模式"></a>4. 简单的搜索模式</h4><p>vim使用正则表达式进行搜索的功能十分的强大。</p>
<ul>
<li><ol>
<li>一行的开头与结尾<ul>
<li><code>^</code>字符：匹配一行的开头。</li>
<li>$字符：匹配一行的结尾。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>匹配任何一个字符<ul>
<li><code>.</code>字符：匹配任何一个字符。<ul>
<li>备注：如果是特殊字符，需要反斜杠。 </li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="5-使用标记"><a href="#5-使用标记" class="headerlink" title="5. 使用标记"></a>5. 使用标记</h4><ul>
<li><ol>
<li>常用命令<ul>
<li>``命令：当使用<code>G</code>命令进行跳转时，回到原来的跳转位置。<ul>
<li>跳转：包括G / 与n等搜索命令，但不包括fx或者tx，以及word为单位的移动命令，或者光标的移动均不包括。</li>
</ul>
</li>
<li><code>Ctrl-o</code>命令（old）：跳转到前一个光标停留的位置。 </li>
<li><code>Ctrl-i</code>命令：跳转到下一个光标停留的为位置，与<code>Tab</code>键作用功能相同。</li>
<li><code>jumps</code>命令：显示你曾经跳转过的位置。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>具体的命令的标记命令<ul>
<li><code>m</code>命令（mark）：定义一个标记，如<code>ms</code>，名为s（start）的标记。</li>
<li><code>,</code>命令：跳转到某个名字的标记。如<code>s</code>。</li>
<li><code>:mark</code>：查看所有的标记。</li>
<li>特殊的标记<ul>
<li>`：进行此次跳转之前的跳点。</li>
<li><code>&#39;&#39;</code>到上次跳转的位置。</li>
<li><code>[</code>最后一次修改的起始位置。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="6-小幅改动"><a href="#6-小幅改动" class="headerlink" title="6. 小幅改动"></a>6. 小幅改动</h4><ul>
<li><ol>
<li>操作符命令和位移<ul>
<li><code>dw</code>命令（delete word）：删除一个word，w可以看作一个word，也可以看作右移了一个word。</li>
<li><code>d4w</code>命令：删除4个word，4w看作一次右移4个word。</li>
<li><code>d2e</code>命令：删除2个word，光标移动到第二个word的尾部。</li>
<li><code>d$</code>命令：删除光标到行尾。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>改变文本<ul>
<li><ol>
<li>常用命令<ul>
<li><code>cw</code>命令（change word）：改变命令，与<code>d</code>命令类似，执行完成之后会进入Insert模式，意为改变一个word。</li>
<li><code>cc</code>命令：改变整行，保持原有的缩进。<ul>
<li><code>set all</code>：查看vim所有的一些基础配置。</li>
<li><code>set cindent</code>：开启缩进。</li>
<li><code>set nocindent</code>：关闭缩进。</li>
</ul>
</li>
<li><code>c$</code>命令：删除到行尾的内容，等于<code>d$a</code>。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>快捷命令<ul>
<li><code>x</code> = <code>dl</code></li>
<li><code>X</code> = <code>dh</code></li>
<li><code>D</code> = <code>d$</code></li>
<li><code>C</code> = <code>c$</code></li>
<li><code>s</code> = <code>cl</code></li>
<li><code>S</code> = <code>cc</code></li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>命令计数放在哪里？<ul>
<li><code>3dw</code>、<code>d3w</code>、<code>3d2w</code>，这些有什么区别呢？</li>
<li>第一个数字是计数命令，代表命令的重复次数。</li>
<li>第二个数字是位移命令，代表作用的范围。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>替换单个字符<ul>
<li><code>r</code>命令（replace）：替换单个字符，你也可以使用<code>s</code>或者<code>cl</code>命令来完成相同的功能，但使用<code>r</code>命令不需要再按<code>Esc</code>键回到Normal模式。<ul>
<li>备注：<code>r</code>命令同样可以使用数字计数，如<code>5rx</code>等操作。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>重复改动<ul>
<li><code>.</code>命令：重复上一次做出的修改。<ul>
<li>如删除Html语言。</li>
</ul>
</li>
<li><code>.</code>命令重复的是修改命令，而不是被改动的内容。</li>
<li>使用<code>.</code>命令来替换。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>Visual模式<ul>
<li><ol>
<li>选择文本范围</li>
</ol>
<ul>
<li><code>v</code>命令：进入visual模式，移动光标覆盖你想操作的文本范围，最后键入操作符。</li>
</ul>
</li>
<li><ol start="2">
<li>选择多行</li>
</ol>
<ul>
<li><code>vjj</code>命令：选择3行，可以选择多行。</li>
</ul>
</li>
<li><ol start="3">
<li>选择文本块</li>
</ol>
<ul>
<li><code>Ctrl-v</code>：进入visual块模式，以文本块为对象进行操作，常常用来编辑表格。</li>
</ul>
</li>
<li><ol start="4">
<li>文本块操作</li>
</ol>
<ul>
<li><code>o</code>命令（other end）：会让光标置于被选中的文本的另一端，对角的位置上去，可以通过光标移动进行行块的所选范围进行移动。</li>
<li><code>O</code>命令：同一行左右两个角之间进行移动。<ul>
<li>备注：在visual块模式下，进行操作。</li>
</ul>
</li>
</ul>
</li>
<li><ol start="5">
<li>移动文本</li>
</ol>
<ul>
<li><code>p</code>命令（put）：以前通过用<code>d</code>或<code>x</code>进行删除的文本都可以用<code>p</code>命令进行读取。<ul>
<li>如：<code>dd</code>删除行后，将光标移动到想要放入的地方然后<code>p</code>命令进行放入。</li>
<li>如：移动某个单词，<code>dw</code>删除后，将光标移动到想要放入的地方然后使用<code>p</code>命令进行放入。</li>
<li>如：交换两个字符，<code>x</code>删除字符，用<code>p</code>命令取回。</li>
</ul>
</li>
<li><code>P</code>命令：把取回的内容放在光标之前。 <ul>
<li>备注：可以与计数命令一起使用，如：<code>dd</code>删除行之后，<code>3p</code>会将删除的行取回三次放在当前的位置。 </li>
</ul>
</li>
</ul>
</li>
<li><ol start="6">
<li>复制文本</li>
</ol>
<ul>
<li><code>y</code>命令（yanking）： 将文本复制到一个寄存器中，用<code>p</code>命令取回。<ul>
<li>备注：<ul>
<li>和<code>d</code>命令类型。</li>
<li><code>yw</code>：复制一个word。</li>
<li><code>y2w</code>：复制两个word。</li>
<li><code>yy</code>：复制一行。</li>
<li><code>y$</code>：复制光标到行尾，<code>D</code>或<code>d$</code>（删除光标到行尾的内容）类似。</li>
<li><code>Y</code>：与<code>yy</code>类似，复制一整行，规律是存在例外的。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><ol start="7">
<li>使用剪贴板</li>
</ol>
<ul>
<li><code>*yy</code>命令：将一行内容复制到剪贴板中。</li>
<li><code>*p</code>命令：把剪贴板中的内容复制出来。<ul>
<li>备至：只适用于gvim，实质上是将内容复制到名为*的寄存器中。</li>
</ul>
</li>
</ul>
</li>
<li><ol start="8">
<li>文本对象</li>
</ol>
<ul>
<li><code>daw</code>命令（delete a word）：删除一个单词，光标位于单词的中间而你要删除这个单词时使用的。</li>
<li><code>diw</code>命令（delete inner word）：删除一个单词，不删除之后的空格符。</li>
<li><code>cas</code>命令（change a sentence）：要修改一整个句子，删除之后的空格符，由Normal模式转到Insert模式。</li>
<li><code>cis</code>命令（change inner sentence）：要修改一整个句子，不会删除之后的空格符。</li>
</ul>
</li>
<li><ol start="9">
<li>替换模式</li>
</ol>
<ul>
<li><code>R</code>命令：键入的字符都会替换当前光标下的字符，键入<code>Esc</code>结束该模式。<ul>
<li><code>Insert</code>键可以在Insert模式与Replace模式之间进行切换，<code>Backspace</code>键可以将原来的字符进行修复。 </li>
</ul>
</li>
</ul>
</li>
<li><ol start="10">
<li>总结</li>
</ol>
<ul>
<li><ol>
<li>操作命令，位移命令和文本对象可以让你在使用这些命令时任意组合，如在使用操作符命令<code>N</code>配上位移命令<code>M</code>来构成一个<code>NM</code>命令。</li>
</ol>
</li>
<li><ol start="2">
<li>操作命令：<code>d</code>、<code>c</code>、<code>y</code>、<code>p</code></li>
</ol>
</li>
<li><ol start="3">
<li>位移命令：<code>w</code>、<code>O</code>、<code>^</code>、<code>$</code></li>
</ol>
</li>
<li><ol start="4">
<li>文本对象：<code>aw</code>、<code>as</code>、<code>iw</code>、<code>is</code></li>
</ol>
</li>
<li><ol start="5">
<li>删除文本常用的方法：<ul>
<li><ol>
<li><code>x</code>：删除当前光标下的字符，与<code>dl</code>功能是一样。 </li>
</ol>
</li>
<li><ol start="2">
<li><code>X</code>：删除当前光标之前的字符，与<code>dh</code>功能一样。</li>
</ol>
</li>
<li><ol start="3">
<li><code>D</code>：删除当前光标到行尾的内容，与<code>d$</code>功能一样。</li>
</ol>
</li>
<li><ol start="4">
<li><code>dw</code>：删除自当前光标到下一个word的开头。</li>
</ol>
</li>
<li><ol start="5">
<li><code>db</code>：删除自当前光标到前一个word的开始。</li>
</ol>
</li>
<li><ol start="6">
<li><code>diw</code>：删除自当前光标到前一个word（不包括空白字符）。</li>
</ol>
</li>
<li><ol start="7">
<li><code>daw</code>：删除当前光标所在word（包括空白字符）。</li>
</ol>
</li>
<li><ol start="8">
<li><code>dG</code>：删除当前行到文件尾的内容。</li>
</ol>
</li>
<li><ol start="9">
<li><code>dgg</code>：删除当前行到文件头的内容。</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>更改文本常用的方法<ul>
<li>如果用<code>c</code>命令代替<code>d</code>这些命令就都变成来更改命令，如此类推。</li>
<li><code>~</code>：改变当前光标下字符的大小写，并将光标移动到下一个字符。</li>
<li><code>I</code>：将光标置于当前行第一个非空白字符处并进入Insert模式。</li>
<li><code>A</code>：当前光标置于当前行尾并进入Insert模式。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="7-定制自己的vim"><a href="#7-定制自己的vim" class="headerlink" title="7. 定制自己的vim"></a>7. 定制自己的vim</h4><ul>
<li><ol>
<li><p>vimrc文件</p>
<ul>
<li><p>如果你厌倦了手工键入常用命令，或者要使你喜好的选项和映射一次性准备好，这时可以统统写入到<code>vimrc</code>（vim run command）的文件里，Vim在启动的时会读取这个文件。 </p>
</li>
<li><p><code>:read {filePath}</code>命令：读取文件到当前vim编辑器里边。</p>
</li>
<li><p><code>:set filetype={fileNameSuffix}</code>命令：设置当前vim窗口中文件的临时类型。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; vimrc位置：</span></pre></td></tr><tr><td class="code"><pre><span class="line">1.Unix and OS&#x2F;2： ~&#x2F;.vimrc</span></pre></td></tr><tr><td class="code"><pre><span class="line">2. Windows: $VIM\_vimrc</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置兼容性</span></pre></td></tr><tr><td class="code"><pre><span class="line">set nocompatible</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置历史命令缓存数量</span></pre></td></tr><tr><td class="code"><pre><span class="line">set history&#x3D;50</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置鼠标支持</span></pre></td></tr><tr><td class="code"><pre><span class="line">set mouse&#x3D;a</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 打开语法高亮</span></pre></td></tr><tr><td class="code"><pre><span class="line">set syntax on</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置高亮检索</span></pre></td></tr><tr><td class="code"><pre><span class="line">set hlsearch</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置自动缩进</span></pre></td></tr><tr><td class="code"><pre><span class="line">set autoindent</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置缩进宽度</span></pre></td></tr><tr><td class="code"><pre><span class="line">set shiftwidth&#x3D;4</span></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>简单的映射<ul>
<li>一个映射可以把一连串vim命令用一个按键来表示。</li>
<li>如：用一个功能键或者字符串，将某个word单词，变成{word}，可以使用<code>:map</code>命令。</li>
<li><code>:map &lt;F5&gt; i{&lt;Esc&gt;ea}&lt;Esc&gt;</code></li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>选项窗口<ul>
<li><code>:options</code>命令：在帮助主题中寻找或设置相应的选项。 </li>
<li><code>set all</code>命令：查看所有的设置选项</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>常用选项<ul>
<li><code>:help {options}</code>：查看某个选项的帮助。</li>
<li><code>set {options}&amp;:{options}</code>：修改为默认值。</li>
<li><code>set nowrap</code>：不要折行。</li>
<li><code>set sidescroll=10</code>：自动左右滚动10个字符。</li>
<li><code>set whichwrap=b,s,&lt;,&gt;,h,l,[,]</code>：Normal和Insert模式下跨行移动命令。</li>
<li><code>set cmdheight=3</code>：设置命令行高度为3。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>使用高亮<ul>
<li><code>syntax enable</code>：打开语法支持。</li>
<li><code>syntax clear</code>：关闭当前高亮。</li>
<li><code>colorscheme {themeName}</code>：打开不同的颜色主题。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="8-编辑多个文件"><a href="#8-编辑多个文件" class="headerlink" title="8. 编辑多个文件"></a>8. 编辑多个文件</h4><ul>
<li><ol>
<li>编辑另一个文件<ul>
<li><code>:edit {fileName}</code>：编辑另一个文件。</li>
<li><code>:hide edit {fileName}</code>：隐藏编辑另一个文件，不进行保存当前缓冲区的内容。</li>
<li><code>:edit! {fileName}</code>：强制编辑另一个文件，不进行保存当前缓冲区的内容。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>文件列表<ul>
<li><ol>
<li>打开多个文件<ul>
<li><code>vim fileName1 fileName2 fileName3</code></li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>文件列表，当前在编辑哪个文件<ul>
<li><code>:args</code>命令（arguments）： 显示当前的文件列表，当前文件以[]括起来。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>文件列表中的切换<ul>
<li><code>:next</code>命令：打开编辑下一个文件。</li>
<li><code>:next!</code>命令：强制打开编辑下一个文件。</li>
<li><code>:wnext</code>命令：完成两个单独的命令。即：<code>:write :next</code></li>
<li><code>:previous</code>命令：打开编辑上一个文件。</li>
<li><code>:wprevious</code>命令：保存当前文件，打开编辑上一个文件。</li>
<li><code>:last</code>命令：打开最后一个文件，<code>wlast</code>命令。</li>
<li><code>:first</code>命令：打开第一个文件，<code>wfirst</code>命令。</li>
<li><code>:2next</code>命令：使用计数命令，向前跳过两个文件。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>自动保存<ul>
<li><code>:set autowrite</code>：在不同的文件转移时，不需要每次都执行<code>write</code>命令。</li>
<li><code>:set noautowrite</code>：关闭自动保存。<ul>
<li>备注：与word自动保存不同，过一段时间会自动保存，指某个事件发生时自动保存这个文件。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>编辑另一个文件列表<ul>
<li><code>args fileName1 fileName2 fileName</code>：优点是不用重启Vim，就可以重新定义一个文件列表。</li>
<li><code>args *.{Filename Suffix}</code>：支持通配符。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>最后文件提醒<ul>
<li>当你有一个文件列表要编辑时，Vim会假设你要全部编辑它们，如果你要退出，就需要再执行一个退出命令。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>切换到另一文件<ul>
<li><ol>
<li><code>CTRL-^</code>：两个文件之间快速的切换。<ul>
<li><code>args fileName1 fileName2</code>打开文件之后，再使用了<code>:next</code>或者<code>previous</code>之后，可以使用这个命令非常方便的在两个文件中进行切换。 </li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>多个文件之间的标记。<ul>
<li>全局标记：使用大写字母命名标记。<ul>
<li>如：<code>args fileName1</code>后使用<code>m{markFlag}</code>，这个时候去别的文件之后可以使用<code>&#39;</code>或者`跳转到自定义标记的位置。</li>
<li>如果你删除了局部标记所在的行，也就相当于删除了这个局部标记。与全局标记不同，全局标记会一直存在下去。</li>
</ul>
</li>
<li>预定义标记<ul>
<li>`’’：关闭文件时的光标的位置。</li>
<li>`.：文件最后一次修改的地方。</li>
<li>在多文件中也可以使用<code>CTRL-i</code>和<code>CTRL-o</code>两个同样试用。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>备份<ul>
<li><code>:set backup</code>：生成备份文件，文件名为原文件名加一个<code>~</code>。<ul>
<li>备注：<code>ZZ</code>进行退出，是不能生成备份文件的，需要使用<code>:write</code>。</li>
</ul>
</li>
<li><code>:set backupext=.bak</code>：修改生成一个名为原文件名加<code>.bak</code>的备份文件。</li>
<li><code>:set patchmode=.orig</code>：保存一份修改前的原始文件作为副本，同时后缀名为<code>.orig</code>。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>在文件之间复制粘贴<ul>
<li><ol>
<li>简单的复制粘贴<ul>
<li><code>:edit {fileName}</code>打开你要找的文件，然后<code>/{检索内容}</code>搜索你要复制的内容，然后<code>v</code>进入可视模式选择你要复制的内容，然后<code>y</code>复制，然后<code>:edit {fileName}</code>回到你要粘贴的文件，之后<code>/{检索内容}</code>搜索你要粘贴的位置，最后<code>p</code>粘贴刚刚复制的文本。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>使用寄存器<ul>
<li>复制多个独立的文本到另一个文件中时，这个时候可以使用寄存器，使用<code>a</code>到<code>z</code>的字母作为寄存器的名字。 <ul>
<li>使用可视模式选择文本，然后<code>&quot;{寄存器名称}</code>，即：把一整块文本复制到寄存器中。</li>
</ul>
</li>
<li><code>&quot;fyas</code>：把一个句子复制到名为f（first）的寄存器中。</li>
<li><code>&quot;l3Y</code>：把3个整行的内容复制到名为l（line）的寄存器中。</li>
<li><code>&quot;bp</code>：取出寄存器b中的内容文本。</li>
<li><code>wdaw</code>：删除一个word并将其存入名为w（word）的寄存器中。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>向文件中追加内容<ul>
<li><code>:read {fileName}</code>：向当前文件进行追加<code>{fileName}</code>文件内容。</li>
<li><code>:write &gt;&gt; {fileName}</code>：将当前文件追加到文件名为<code>{fileName}</code>的文件中去，只能追加到文件的最后。</li>
<li><code>:write {newFileName}</code>：将当前文件写入到名为<code>{newFileName}</code>新文件中去。</li>
<li><code>:&#39;&lt;,&#39;&gt; write &gt;&gt; {newFileName}</code>：在Visual模式下也可以进行选择要写入的文本。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>查看文件<ul>
<li><code>vim {fileName}</code>：直接打开编辑文件，可以读写。</li>
<li><code>vim -R {fileNmae}</code>：以只读模式打开文件。</li>
<li><code>vim -M {fileNmae}</code>：强制性的避免对文件进行修改，其中<code>-M</code>选项是告诉Vim工作于viewer模式中。</li>
<li><code>:set modifiable</code> + <code>:set write</code>命令组合让viewer模式下的文件进行读写。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="7">
<li>更改文件名<ul>
<li><code>:write {filename}</code>：将当前文件写入到新的文件中。</li>
<li><code>saveas {filename}</code>：将当前文件进行另存为操作，且将新文件直接打开。</li>
<li><code>:file {filename}</code>：与<code>saveas</code>功能相似，也可以实现文件名的更改。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="9-分隔窗口"><a href="#9-分隔窗口" class="headerlink" title="9. 分隔窗口"></a>9. 分隔窗口</h4><p>将一个窗口分隔成多个窗口，可以同时显示或者编辑多个文件，或者可以显示或编辑同一个文件的不同位置。</p>
<ul>
<li><ol>
<li>分隔一个窗口<ul>
<li><code>:split</code>命令：将屏幕分成上下两个窗口，并将光标定位在上面的窗口中。</li>
<li><code>:vsplit</code>命令：将屏幕分成左右两个窗口，并将光标定位在左边的窗口中。</li>
<li><code>CTRL-w w</code>（window）命令：切换当前活动窗口，与<code>CTRL-w CTRL-w</code>功能相同。</li>
<li><code>:close</code>命令：关闭当前活动窗口。比如<code>:quit</code>或<code>ZZ</code>均可以关闭当前窗口，但是其优点在于可以阻止你关闭最后一个窗口，不会意外的将Vim退出。</li>
<li><code>:only</code>命令：关闭除当前窗口之外的所有窗口。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>为另一个文件分隔出一个窗口<ul>
<li><code>:split {otherFile}</code>：打开第二个窗口同时在新打开的窗口中开始编辑。</li>
<li><code>:new</code>：打开一个新的窗口并开始编辑一个空的缓冲区。<ul>
<li>备注：可以重复的使用<code>:split</code>或<code>new</code>命令打开任何你喜欢的窗口数目。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>窗口的大小<ul>
<li><ol>
<li><code>:3solit {fileName}</code>：高度为3的新窗口，名为<code>{fileName}</code>的文件。 </li>
</ol>
</li>
<li><ol start="2">
<li><code>CTRL-w +</code>：窗口高度增加1行。</li>
</ol>
</li>
<li><ol start="3">
<li><code>CTRL-w -</code>：窗口高度减小1行。<ul>
<li>备注：可以增加计数命令，如<code>4CTRL-w -</code>一次减少4行。 </li>
<li><code>{height} CTRL-w</code>：窗口高度指定为一个固定的height。</li>
<li>备注：不指定高度时，默认让窗口达到它的最大的高度。</li>
<li><code>:set mouse=a</code>：设置使用鼠标控制窗口调整。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>常用选项<ul>
<li><code>winminheight</code>：强制窗口的最小高度，可以使用<code>:set wmh=4</code>。</li>
<li><code>winminwidth</code>：强制窗口的最小宽度，可以使用<code>:set smw=4</code>。</li>
<li><code>equalalways</code>：自动让所有窗口均摊屏幕上可用的高度和宽度。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>垂直分隔<ul>
<li><ol>
<li>常用命令 <ul>
<li><code>:vsplit</code>命令：将屏幕分成左右两个窗口，并将光标定位在左边的窗口中。</li>
<li><code>:vnew</code>：垂直打开一个新的窗口并开始编辑一个空的缓冲区。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>切换窗口<ul>
<li><code>CTRL-w h</code>：切换到左边的窗口。</li>
<li><code>CTRL-w j</code>：切换到下边的窗口。</li>
<li><code>CTRL-w k</code>：切换到上边的窗口。</li>
<li><code>CTRL-w l</code>：切换到右边的窗口。</li>
<li><code>CTRL-w t</code>：切换到顶部的窗口。（top）</li>
<li><code>CTRL-w b</code>：切换到底部的窗口。（bottom）</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>移动窗口<ul>
<li><code>CTRL-w H</code>：向左移动窗口</li>
<li><code>CTRL-w J</code>：向下移动窗口</li>
<li><code>CTRL-w K</code>：向上移动窗口</li>
<li><code>CTRL-w L</code>：向右移动窗口</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>针对所有窗口操作的命令<ul>
<li><ol>
<li>常用命令<ul>
<li><code>:qall</code>：关闭所有的窗口。（quit all）</li>
<li><code>:wqall</code>：保存所有穿够内容并关闭窗口。（write quit all）</li>
<li><code>:qall!</code>：强制关闭所有的窗口，不为文件保存。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>为每一个文件打开一个窗口 <ul>
<li><code>vi -o *.txt</code>：水平打开多个文件，并且为每一个文件打开一个窗口。</li>
<li><code>vi -O *.txt</code>：垂直打开多个文件，并且为每一个文件打开一个窗口。</li>
<li><code>:all</code>命令：将文件列表中的文件，各打开一个水平的窗口进行显示或编辑。</li>
<li><code>:vertical all</code>命令：将文件列表中的文件，各打开一个垂直的窗口进行显示或编辑。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="7">
<li>使用vimdiff查看文件的区别<ul>
<li>备注：<code>vimdiff</code>是Vim的另一种特殊的启动方式，可以显示文件的不同之处。</li>
<li><ol>
<li>常用命令<ul>
<li><code>vimdiff {fileName} {fileName}</code>：以diff模式打开两个文件进行比较。</li>
<li><code>:vertical diffsplit {fileName}</code>：可以运行Vim之后进行比较两个不同的文件。</li>
<li><code>]c</code>和<code>[c</code>：跳到下一个或上一个两个文件的不同的地方。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>消除差异<ul>
<li><code>diffupdate</code>：重新比较两个文件，更细差异，主要用于修改文本之后。</li>
<li><code>dp</code>（diff put）：将当前窗口不同的内容放到另一个窗口中。</li>
<li><code>do</code>（diff obtain）：从另一个窗口中对应的位置上取来了差异的内容。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="8">
<li>其他<ul>
<li><ol>
<li><code>CTRL-w CTRL-^</code>：分隔出一个窗口来编辑前一个文件。</li>
</ol>
</li>
<li><ol start="2">
<li>常用选项<ul>
<li><code>:set scrollbind</code>：打开同步滚动，通常这个选项是默认开启的。</li>
<li><code>laststatus</code>：<strong>0</strong> 永不；<strong>1</strong> 只有在有至少两个窗口时；<strong>2</strong> 总是</li>
<li><code>splitbelow</code>：用来控制新打开窗口出现在当前窗口的下边。</li>
<li><code>splitright</code>：用来控制新打开窗口出现在当前窗口的右边。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="9">
<li>页签<ul>
<li>解决平铺在显示屏幕上窗口不够用的问题。</li>
<li><code>CTRL-w T</code>：将当前活动窗口以页签的形式显示。</li>
<li><code>:tabedit {fileName}</code>：以页签的形式显示<code>{fileName}</code>的文件。</li>
<li><code>gt</code>（goto tab）：转到下一个标签页，最后一个标签页回到第一个。</li>
<li><code>gT</code>（goto tab）：转到上一个标签页，第一个标签页回到最后一个。</li>
<li><code>{count}gt</code>：转到第<code>{count}</code>个标签页，首个标签页的编号为1。</li>
<li><code>:tabonly</code>：关闭除当前页签之后的所有页签。</li>
</ul>
</li>
</ol>
</li>
</ul>
<h4 id="10-大刀阔斧"><a href="#10-大刀阔斧" class="headerlink" title="10. 大刀阔斧"></a>10. 大刀阔斧</h4><ul>
<li><ol>
<li>命令的记录和回放<ul>
<li><ol>
<li>操作步骤：<ul>
<li><ol>
<li><code>q{register}</code>命令：将后续的动作记录到名为<code>{register}</code>的寄存器中，其中给出的寄存器名字必须是<code>a</code>到<code>z</code>之间的一个字母。</li>
</ol>
</li>
<li><ol start="2">
<li>执行你要执行的操作，按下<code>q</code>以结束对命令的记录。</li>
</ol>
</li>
<li><ol start="3">
<li><code>@{register}</code>命令：执行刚刚记录下来的宏。</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>例子：<ul>
<li><ol>
<li><code>qa</code>：开始将后续的命令记入到寄存器<code>a</code>中。</li>
</ol>
</li>
<li><ol start="2">
<li>将光标移动到行首。</li>
</ol>
</li>
<li><ol start="3">
<li><code>i#include &quot;&lt;Esc&gt;</code>，在该行之前插入<code>#include</code>。</li>
</ol>
</li>
<li><ol start="4">
<li>$将光标移动到行尾。</li>
</ol>
</li>
<li><ol start="5">
<li><code>a.h&quot;&lt;Esc&gt;</code>：在行尾加上<code>.h&quot;</code>字符。</li>
</ol>
</li>
<li><ol start="6">
<li><code>j</code>：移动到下一行。</li>
</ol>
</li>
<li><ol start="7">
<li><code>q</code>：停止记录。</li>
</ol>
</li>
<li><ol start="8">
<li><code>@a</code>：执行记录的宏，可以加计数命令。</li>
</ol>
</li>
<li><ol start="9">
<li><code>@@</code>：重复上一次宏的命令。</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>编辑宏的内容<ul>
<li><ol>
<li><code>&quot;ap</code>命令：显示宏的内容。 </li>
</ol>
</li>
<li><ol start="2">
<li><code>&quot;ad$</code>命令：将编辑好的宏的内容再一次的放入到寄存器中。</li>
</ol>
</li>
<li><ol start="3">
<li><code>qA</code>命令：向寄存器<code>a</code>中追加内容。</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>替换<ul>
<li><ol>
<li>通用形式<ul>
<li><code>:[range]submitute/from/to/[flags]</code>：对一个指定的范围执行替换操作，<code>range</code>指范围，<code>from</code>被替换的内容，与搜索命令所用的正则表达式类似，<code>to</code>替换为的内容，<code>flags</code>指一些常用的标记。 <ul>
<li>如：<code>:s/the /these /g</code>，g是global的意思。</li>
<li>如: <code>:s/one\two/one or two/g</code></li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>常用选项<ul>
<li><code>range</code>：作用范围，<code>range=%</code>范围为所有行，而缺省只作用于当前行。</li>
<li><code>flags</code>：标记，<code>flags=g（global）</code>将改变一行所有符合目标字符串的全部字符进行替换。<code>flags=c</code>：在执行每个替换前请求用户确认<code>confirm</code>。<ul>
<li><code>y</code>：好吧，yes。</li>
<li><code>n</code>：不，no。</li>
<li><code>a</code>：全部，all。</li>
<li><code>q</code>：退出，quit。</li>
<li><code>l</code>：把现在这个修改结束后进行退出。</li>
<li><code>CTRL-E</code>：向上滚屏一行。</li>
<li><code>CTRL-Y</code>：向下滚屏一行。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>命令的作用范围<ul>
<li><code>:1,5s/this/that/g</code>：对第1行到第5行的文本执行替换操作。</li>
<li><code>:3s/this/that/g</code>：对指定行进行替换操作。</li>
<li><code>:.,$s/this/that/g</code>：当前行到最后一行范围，如：<code>$=1,$</code>。</li>
<li><code>:?^Chapter?,/^Chapter/s=this=that=g</code>：使用搜索模式来指定作用范围。</li>
<li><code>:?^Chapter?+1,/^Chapter/-1s=this=that=g</code>：增与减行的范围操作。</li>
<li><code>.+3,$-5s/this/that/g</code>：将当前行的下三行到倒数第6行的作用操作。</li>
<li><code>&#39;t,&#39;bs/this/that/g</code>：使用标记确定操作范围。</li>
<li><code>&#39;&lt;,&#39;&gt;s/this/that/g</code>：Visual模式确定的范围。</li>
<li><code>&#39;&gt;,$</code>：从上一次VIsual模式时选定的文本区域的结束处到文本末尾的这样的区域。</li>
<li><code>.,.+4</code>：<code>.</code>当前行到,<code>+4</code>从当前行到向下4行。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>全局命令<ul>
<li><code>:[range]global/{pattern}/{command}</code>：找到符合某个匹配模式的行，然后将命令作用于这些行上，全局命令的默认作用范围是整个文件。</li>
<li><code>:g=//=s/foobar/barfoo/g</code>：整个文件中包含<code>//</code>的行，进行替换操作。</li>
<li><code>:g=//=d</code>：整个文件中包含<code>//</code>的行，进行删除操作。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>Visual Block模式<ul>
<li><ol>
<li>插入文本<ul>
<li><code>Insert&lt;Esc&gt;</code>：在文本块的每行的行首，进行插入文本。</li>
<li><code>Astring&lt;Esc&gt;</code>：在文本块的每行的行尾，进行插入文本。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>改变文本<ul>
<li><code>cstring&lt;Esc&gt;</code>：修改文本块的文本，仅仅会修改文本块的内容。</li>
<li><code>Cstring&lt;Esc&gt;</code>：修改文本块的文本，会删除文本块尾部的内容。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>改变文本的大小写<ul>
<li><code>~</code>：交换大小写。</li>
<li><code>U</code>：将小写变大写。</li>
<li><code>u</code>：将大写变小写。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>填充命令<ul>
<li><code>rx</code>：以字符<code>x</code>进行文本块的填充操作。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>左右移动<ul>
<li><code>&lt;</code>命令：会使你的文本向左移动一个shift单位。</li>
<li><code>&gt;</code>命令：会使你的文本向右移动一个shift单位。</li>
<li><code>:set shiftwidth=4</code>：设置一个shift单位的宽度。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>将多行内容粘贴起来<ul>
<li><code>J</code>命令：使文本块纵跨的所有文本被连接为一行。</li>
<li><code>gJ</code>命令：如果你想要保留那些前导空白和后缀的空白时，可以使用。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><ol start="6">
<li>读写文件<ul>
<li><ol>
<li>读取文件<ul>
<li><code>:read fileName</code>：读入文件的内容放在当前行。</li>
<li><code>$read fileName</code>：追加到文件的最后。</li>
<li><code>0read fileName</code>：把文件放在第一行的上面。</li>
<li><code>60read fileName</code>：那文件放在指定行的上面。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="2">
<li>写入文件<ul>
<li><code>:write fileName</code>：没有指定一个范围时该命令将写入整个文件的内容。</li>
<li><code>:.,$write fileName</code>：当前行到文件尾的内容写入文件，如果文件存在则失败。</li>
<li><code>:.,$write! fileName</code>：强制当前行到文件尾的内容写入文件，会进入覆盖模式。</li>
<li><code>:.write fileName</code>：将当前行写入文件中。</li>
<li><code>:.write &gt;&gt; fileName</code>：将当前行的内容追加到文件中。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="3">
<li>格式化文本<ul>
<li><code>:set textwidth</code>： 查看键入文字的时候每行的内容能自动调节到适应当前设置的宽度，每一行都会自动调整到只包含最多几个字符，Vim进行格式化文本的时候不会打断你的单词。</li>
<li><code>:set textwidth=100</code>： 设置键入文字的时候每行的内容能自动调节到适应当前设置的宽度，每一行都会自动调整到只包含最多<code>100</code>个字符，Vim进行格式化文本的时候不会打断你的单词。</li>
<li><code>:gqap</code>：<code>gq</code>为Vim的一个格式化操作符号，<code>ap</code>是一个文本对象，即：a paragraph。</li>
<li><code>gg gqG</code>：格式化整个文件的内容。</li>
<li><code>gqgq</code>：格式化当前行，可以与<code>.</code>重复命令一起使用。</li>
<li><code>gqj</code>：格式化当前行和它下面的一行。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="4">
<li>改变大小写<ul>
<li><code>guw</code>命令：<code>gu</code>是变小写的操作符，<code>w</code>是位移。</li>
<li><code>gUw</code>命令：<code>gU</code>是变大写的操作，<code>w</code>是位移。</li>
<li><code>g~w</code>命令：将字母的大小写进行反转，大写变小写，小写变大写。</li>
<li><code>gugu</code>命令：使一整行变为小写，简写为<code>guu</code>，同理<code>gUgU</code>、<code>gUU</code>、<code>g~g~</code>、<code>g~~</code>。</li>
</ul>
</li>
</ol>
</li>
<li><ol start="5">
<li>使用外部程序<ul>
<li><code>sort &lt; input.txt &gt; output.txt</code>：</li>
<li><code>!5G</code>：<code>!</code>过滤操作符，<code>5G</code>为移动命令，决定了将哪个区域送到过滤程序中。</li>
<li><code>!!date</code>：<code>!!</code>命令为过滤当前行，<code>date</code>命令显示当前时间。</li>
<li><code>write !wc</code>：将文本写入一个命令<code>wc</code>中，<code>wc</code>命令是统计行数，单词数，字符数。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【combineLatest、withLatestFrom、zip】</title>
    <url>/2020/01/11/rxjs-combineLatest-withLatestFrom-zip/</url>
    <content><![CDATA[<h1 id="Rxjs学习之路"><a href="#Rxjs学习之路" class="headerlink" title="Rxjs学习之路"></a>Rxjs学习之路</h1><h4 id="1、小贴士"><a href="#1、小贴士" class="headerlink" title="1、小贴士"></a>1、小贴士</h4><p>这篇文章是我的Angular Rxjs Series中的第六篇文章，在继续阅读本文之前，您至少应该熟悉系列中的第一篇基础文章</p><p><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></p><p><a href="https://www.jianshu.com/p/fc0e30328de3" target="_blank" rel="noopener">Rxjs【Observable】</a></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 以下的操作符介绍均采用rxjs6的写法！！！</span></span></pre></td></tr></table></figure><a id="more"></a>




<h4 id="2、combineLatest"><a href="#2、combineLatest" class="headerlink" title="2、combineLatest"></a>2、combineLatest</h4><p>combineLatest可以接收多个Observable，但最后一个参数一定是callback function，这个回调函数接收的参数个数和前边传入Observable一一对应，最后需要注意，一定至少有2个Observable送出新值的时候才会执行回调函数。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 取得各个observable 最后送出的值，再输出成一个值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * combineLatest可以接收多个observable，最后一个参数是callback function，这个callback function接收的参数数量跟合并的observable数量相同</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * callback 都会依照合并的observable 数量来传入参数，如果我们合并了三个observable，callback 就会有三个参数，而不管合并几个observable 都会只会回传一个值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      ----0----1----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      --0--1--2--3--4--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *          combineLatest(newest, (x, y) =&gt; x + y);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * example:     ----01--23-4--(56)--7|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = interval(<span class="number">500</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newest = interval(<span class="number">300</span>).pipe(take(<span class="number">6</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> combineLatestObservable = source.pipe(combineLatest(newest, <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.combineLatestSubscription = combineLatestObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====combineLatest操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====combineLatest操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====combineLatest操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
<ul>
<li>从上边的例子，我们可以看到，newest送出0时，source此时没有送出值，因此不执行回调函数，当source送出0时，此时newest送出的最新值是之前的0，执行回调0+0=0，以此类推…</li>
</ul>
<h4 id="3、withLatestFrom"><a href="#3、withLatestFrom" class="headerlink" title="3、withLatestFrom"></a>3、withLatestFrom</h4><p>withLatestFrom其实和combineLatest很像，唯一不同的是他多了一个主从关系，即只有主Observable送出新值的时候，才会执行callback function，其他情况下不会触发回调。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 和combineLatest类似，但是withLatestFrom只有在主要的observable 送出新的值时，才会执行callback，附随的observable 只是在背景下运作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * withLatestFrom 会在main 送出值的时候执行callback，但请注意如果main 送出值时some 之前没有送出过任何值callback 仍然不会执行！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * callback 都会依照合并的observable 数量来传入参数，如果我们合并了三个observable，callback 就会有三个参数，而不管合并几个observable 都会只会回传一个值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * main:       ----h----e----l----l----o|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * some:       --0--1--0--0--0--1|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *         withLatestFrom(some, (x, y) =&gt; y === 1 ? x.toUpperCase() : x);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * example:    ----h----e----l----L----O|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="keyword">from</span>(<span class="string">'hello'</span>).pipe(zip(interval(<span class="number">500</span>), <span class="function">(<span class="params">x, y</span>) =&gt;</span> x));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> some = <span class="keyword">from</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]).pipe(zip(interval(<span class="number">300</span>), <span class="function">(<span class="params">x, y</span>) =&gt;</span> x));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> withLatestFromObservable = main.pipe(withLatestFrom(some, <span class="function">(<span class="params">x, y</span>) =&gt;</span> y === <span class="number">1</span> ? x.toUpperCase() : x));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.withLatestFromSubscription = withLatestFromObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====withLatestFrom操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====withLatestFrom操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====withLatestFrom操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
<ul>
<li>从上边的例子，我们可以观察到：main送出h时，some的最新值是上一次的0，0不等于1，所以原样输出main，即h。当main送出e时，some送出的新值是上一次0，0不等于1，所以原样输出main，即e。以此类推…</li>
</ul>
<h4 id="4、zip"><a href="#4、zip" class="headerlink" title="4、zip"></a>4、zip</h4><p>zip会取每个Observable且按顺序传入callback function回调函数的参数中，简单的理解就是一一对应，成双成对。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 取每个observable 相同顺位的元素并传入callback，也就是说每个observable 的第n 个元素会一起被传入callback</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * zip 会把各个observable 相同顺位送出的值传入callback</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * zip 必须cache 住还没处理的元素，当我们两个observable 一个很快一个很慢时，就会cache 非常多的元素，等待比较慢的那个observable。这很有可能造成记忆体相关的问题！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * callback 都会依照合并的observable 数量来传入参数，如果我们合并了三个observable，callback 就会有三个参数，而不管合并几个observable 都会只会回传一个值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      ----0----1----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      --0--1--2--3--4--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *            zip(newest, (x, y) =&gt; x + y)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * exaple:      ----0----2----4|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source = interval(<span class="number">500</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> newest = interval(<span class="number">300</span>).pipe(take(<span class="number">6</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> zipObservable = source.pipe(zip(newest, <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.zipSubscription = zipObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====zip操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====zip操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====zip操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h5 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subscription, interval, <span class="keyword">from</span> &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; take, combineLatest, zip, withLatestFrom &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    selector: <span class="string">'app-rxjs-demo06'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;h3&gt;Rxjs Demo06 To Study! -- Operators操作符(combineLatest, withLatestFrom, zip)&lt;/h3&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button (click)="combineLatestHandler()"&gt;combineLatest&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="withLatestFromHandler()"&gt;withLatestFrom&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="zipHandler()"&gt;zip&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;app-back&gt;&lt;/app-back&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    styles: [<span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .mgLeft &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            margin-left: 20px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RxjsDemo06Component <span class="keyword">implements</span> OnInit, OnDestroy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    combineLatestSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    withLatestFromSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    zipSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnInit(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    combineLatestHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 取得各个observable 最后送出的值，再输出成一个值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * combineLatest可以接收多个observable，最后一个参数是callback function，这个callback function接收的参数数量跟合并的observable数量相同</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * callback 都会依照合并的observable 数量来传入参数，如果我们合并了三个observable，callback 就会有三个参数，而不管合并几个observable 都会只会回传一个值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      ----0----1----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      --0--1--2--3--4--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *          combineLatest(newest, (x, y) =&gt; x + y);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * example:     ----01--23-4--(56)--7|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> source = interval(<span class="number">500</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> newest = interval(<span class="number">300</span>).pipe(take(<span class="number">6</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> combineLatestObservable = source.pipe(combineLatest(newest, <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.combineLatestSubscription = combineLatestObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====combineLatest操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====combineLatest操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====combineLatest操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    withLatestFromHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 和combineLatest类似，但是withLatestFrom只有在主要的observable 送出新的值时，才会执行callback，附随的observable 只是在背景下运作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * withLatestFrom 会在main 送出值的时候执行callback，但请注意如果main 送出值时some 之前没有送出过任何值callback 仍然不会执行！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * callback 都会依照合并的observable 数量来传入参数，如果我们合并了三个observable，callback 就会有三个参数，而不管合并几个observable 都会只会回传一个值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * main:       ----h----e----l----l----o|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * some:       --0--1--0--0--0--1|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *         withLatestFrom(some, (x, y) =&gt; y === 1 ? x.toUpperCase() : x);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * example:    ----h----e----l----L----O|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> main = <span class="keyword">from</span>(<span class="string">'hello'</span>).pipe(zip(interval(<span class="number">500</span>), <span class="function">(<span class="params">x, y</span>) =&gt;</span> x));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> some = <span class="keyword">from</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]).pipe(zip(interval(<span class="number">300</span>), <span class="function">(<span class="params">x, y</span>) =&gt;</span> x));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> withLatestFromObservable = main.pipe(withLatestFrom(some, <span class="function">(<span class="params">x, y</span>) =&gt;</span> y === <span class="number">1</span> ? x.toUpperCase() : x));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.withLatestFromSubscription = withLatestFromObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====withLatestFrom操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====withLatestFrom操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====withLatestFrom操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    zipHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 取每个observable 相同顺位的元素并传入callback，也就是说每个observable 的第n 个元素会一起被传入callback</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * zip 会把各个observable 相同顺位送出的值传入callback</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * zip 必须cache 住还没处理的元素，当我们两个observable 一个很快一个很慢时，就会cache 非常多的元素，等待比较慢的那个observable。这很有可能造成记忆体相关的问题！</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * callback 都会依照合并的observable 数量来传入参数，如果我们合并了三个observable，callback 就会有三个参数，而不管合并几个observable 都会只会回传一个值。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      ----0----1----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      --0--1--2--3--4--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *            zip(newest, (x, y) =&gt; x + y)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * exaple:      ----0----2----4|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> source = interval(<span class="number">500</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> newest = interval(<span class="number">300</span>).pipe(take(<span class="number">6</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> zipObservable = source.pipe(zip(newest, <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.zipSubscription = zipObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====zip操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====zip操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====zip操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnDestroy() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.combineLatestSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.combineLatestSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.withLatestFromSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.withLatestFromSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.zipSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.zipSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
<h4 id="Angular-Rxjs-Series"><a href="#Angular-Rxjs-Series" class="headerlink" title="Angular Rxjs Series"></a>Angular Rxjs Series</h4><ol>
<li><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></li>
<li><a href="https://www.jianshu.com/p/fc0e30328de3" target="_blank" rel="noopener">Rxjs【Observable】</a></li>
<li><a href="https://www.jianshu.com/p/b81a5ad72641" target="_blank" rel="noopener">Rxjs【map、mapTo、filter】</a></li>
<li><a href="https://www.jianshu.com/p/55b6df31cc3e" target="_blank" rel="noopener">Rxjs【take, first, takeUntil, concatAll】</a></li>
<li><a href="[https://www.jianshu.com/p/5165dc302fae](https://www.jianshu.com/p/5165dc302fae)">Rxjs【skip, takeLast, last, concat, startWith, merge】</a></li>
</ol>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg学习笔记</title>
    <url>/2020/01/11/ffmpeg/</url>
    <content><![CDATA[<h4 id="1-ffmpeg常用命令"><a href="#1-ffmpeg常用命令" class="headerlink" title="1.ffmpeg常用命令"></a>1.ffmpeg常用命令</h4><ol>
<li>视频录制命令</li>
<li>多媒体文件的分解/复用命令</li>
<li>裁剪与合并互转命令</li>
<li>直播相关命令</li>
<li>各种滤镜命令</li>
</ol><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 视频--H264编码/解码</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2</span>. 音频--ACC编码/解码</span></pre></td></tr></table></figure><h4 id="2-应用场景"><a href="#2-应用场景" class="headerlink" title="2.应用场景"></a>2.应用场景</h4><ul>
<li>直播类：音视频会议、教育直播、娱乐/游戏</li>
<li>短视频：抖音、快手</li>
<li>网络视频：腾讯视频、优酷视频、爱奇艺</li>
<li>视频通话：微信、QQ</li>
<li>视频监控：幼儿园、停车场</li>
<li>人工智能：人脸视频、智能音箱</li>
</ul><a id="more"></a>



<h4 id="3-基本流程"><a href="#3-基本流程" class="headerlink" title="3.基本流程"></a>3.基本流程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 解复用 ---  音视频解码（ffmpeg）--- 音频播放&#x2F;视频渲染（SDL）</span></pre></td></tr><tr><td class="code"><pre><span class="line">2. YUL数据 --- 渲染器渲染成纹理 --- 显卡计算交换 --- 窗口展示</span></pre></td></tr></table></figure>

<h4 id="4-ffmpeg的历史"><a href="#4-ffmpeg的历史" class="headerlink" title="4.ffmpeg的历史"></a>4.ffmpeg的历史</h4><ul>
<li>2000年，由法布里斯.贝拉创建</li>
<li>2004年，迈克尔接管</li>
<li>2011年，Libav从ffmpeg分离</li>
</ul>
<h4 id="5-下载"><a href="#5-下载" class="headerlink" title="5.下载"></a>5.下载</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">git clone http<span class="variable">s:</span>//git.ffmpeg.org/ffmpeg.git</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">./configure --<span class="keyword">list</span>-filters</span></pre></td></tr><tr><td class="code"><pre><span class="line">./configure --helo | more</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">--disable-gpl</span></pre></td></tr></table></figure>

<h4 id="6-ffmpeg命令分类"><a href="#6-ffmpeg命令分类" class="headerlink" title="6.ffmpeg命令分类"></a>6.ffmpeg命令分类</h4><ul>
<li>基本信息查询命令</li>
<li>录制命令</li>
<li>分解/复用命令</li>
<li>处理原始数据命令</li>
<li>裁剪与合并命令</li>
<li>图片/视频互转命令</li>
<li>直播相关命令</li>
<li>各种滤镜命令</li>
</ul>
<h4 id="7-ffmpeg处理流程"><a href="#7-ffmpeg处理流程" class="headerlink" title="7.ffmpeg处理流程"></a>7.ffmpeg处理流程</h4><p>输入文件 – demuxer处理 — 编码数据包 — decoder处理 — 解码后数据帧 — encoder处理 — 编码数据包 — muxer处理 — 输出文件</p>
<h4 id="8-ffmpeg命令之基本信息查询"><a href="#8-ffmpeg命令之基本信息查询" class="headerlink" title="8.ffmpeg命令之基本信息查询"></a>8.ffmpeg命令之基本信息查询</h4><table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-version</td>
<td>显示版本</td>
</tr>
<tr>
<td>-demuxers</td>
<td>显示可用的demuxers</td>
</tr>
<tr>
<td>-muxers</td>
<td>显示可用的muxers</td>
</tr>
<tr>
<td>-devices</td>
<td>显示可用的设备</td>
</tr>
<tr>
<td>-codecs</td>
<td>显示所有编解码器</td>
</tr>
<tr>
<td>-decoders</td>
<td>显示可用的解码器</td>
</tr>
<tr>
<td>-encoders</td>
<td>显示所有的编码器</td>
</tr>
<tr>
<td>-bsfs</td>
<td>显示比特流filter</td>
</tr>
<tr>
<td>-formats</td>
<td>显示可用的格式</td>
</tr>
<tr>
<td>-protocols</td>
<td>显示可用的协议</td>
</tr>
<tr>
<td>-filters</td>
<td>显示可用的过滤器</td>
</tr>
<tr>
<td>-pix_fmts</td>
<td>显示可用的像素格式</td>
</tr>
<tr>
<td>-sample_fmts</td>
<td>显示可用过的采样格式</td>
</tr>
<tr>
<td>-layouts</td>
<td>显示channel名称</td>
</tr>
<tr>
<td>-colors</td>
<td>显示识别的颜色名称</td>
</tr>
</tbody></table>
<h4 id="9-ffmpeg命令之录制"><a href="#9-ffmpeg命令之录制" class="headerlink" title="9.ffmpeg命令之录制"></a>9.ffmpeg命令之录制</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 录制屏幕：ffmpeg -f avfoundation -i1-r30 out.yuv</span></pre></td></tr><tr><td class="code"><pre><span class="line">-f: 指定使用 avfoundation 采集数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：指定从哪儿采集数据，它是一个文件的索引号</span></pre></td></tr><tr><td class="code"><pre><span class="line">-r：指定帧率</span></pre></td></tr><tr><td class="code"><pre><span class="line">.yuv：采集之后保存的数据 </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">2. 录制音频：ffmpeg -f avfoundation -i :0 out.wav</span></pre></td></tr><tr><td class="code"><pre><span class="line">-f: 指定使用 avfoundation 采集数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：指定从哪儿采集数据，它是一个文件的索引号（：0 是音频，冒号前是视频）</span></pre></td></tr><tr><td class="code"><pre><span class="line">.yuv：采集之后保存的数据</span></pre></td></tr></table></figure>


<h4 id="10-ffmpeg命令之分解与复用"><a href="#10-ffmpeg命令之分解与复用" class="headerlink" title="10.ffmpeg命令之分解与复用"></a>10.ffmpeg命令之分解与复用</h4><p>输入文件 – demuxer – 编码数据包 – muxer 输出文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 多媒体格式转换：ffmpeg -i out.mp4 -vcodec copy -acodec copy out.flv</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：输入文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-vcodec copy：视频编码处理方式</span></pre></td></tr><tr><td class="code"><pre><span class="line">-acodec copy：音频编码处理方式 </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">2. 抽取视频：ffmpeg -i f35.mp4 -an -vcodec copy out.h264</span></pre></td></tr><tr><td class="code"><pre><span class="line">3. 抽取音频：ffmpeg -i f35.mp4 -acodec -vn copy out.aac</span></pre></td></tr></table></figure>


<h4 id="11-ffmpeg命令之处理原始数据"><a href="#11-ffmpeg命令之处理原始数据" class="headerlink" title="11.ffmpeg命令之处理原始数据"></a>11.ffmpeg命令之处理原始数据</h4><p>原始数据：ffmpeg解码在之后的数据，对于音频就是pcm数据，对于视频就是yuv数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 提取yuv数据：ffmpeg -i input.mp4 -an -c:v rawvideo -pix_fmt yuv420p out.yuv</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：输入文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-an：audio no 就是不需要音频</span></pre></td></tr><tr><td class="code"><pre><span class="line">-c:v：对视频进行编码，使用rawvideo格式进行编码</span></pre></td></tr><tr><td class="code"><pre><span class="line">-pix_fmt：指定像素格式</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">2. 提取pcm数据：ffmpeg -i out.mp4 -vn -ar 44100 -ac2 -f s16le out.pcm</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：输入文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-vn：video no 就是不需要视频</span></pre></td></tr><tr><td class="code"><pre><span class="line">-ar：audio read：指定音频采样率</span></pre></td></tr><tr><td class="code"><pre><span class="line">-ac2：audio channel 指定单声道、双声道、立体声、环绕立体声等等声道数</span></pre></td></tr><tr><td class="code"><pre><span class="line">-f：指定抽取出来的数据存储方式</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ffplay播放的时候原始数据需要指定一些参数以正确播放：</span></pre></td></tr><tr><td class="code"><pre><span class="line">视频： -s 指定分辨率</span></pre></td></tr><tr><td class="code"><pre><span class="line">音频:  -ar 指定采样率 -ar 指定声道数 -f 指定数据存储方式</span></pre></td></tr></table></figure>


<h4 id="12-ffmpeg命令之滤镜"><a href="#12-ffmpeg命令之滤镜" class="headerlink" title="12.ffmpeg命令之滤镜"></a>12.ffmpeg命令之滤镜</h4><p>视频加水印、logo、画中画等等…处理解码后的数据帧<br>decoded frames — filter处理 — filtered frames — encoder处理 —  encoded data</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 视频裁剪：ffmpeg -i in.mov -vf crop&#x3D;in_w-200:in_h-200 -c:v libx264 -c:a copy out.mp4</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：输入文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-vf：video filter 指定视频滤镜且要&#x3D;指定宽高w:h</span></pre></td></tr><tr><td class="code"><pre><span class="line">-c:v：指定视频编码器</span></pre></td></tr><tr><td class="code"><pre><span class="line">-c:a：指定音频编码器</span></pre></td></tr></table></figure>


<h4 id="13-ffmpeg命令之裁剪与合并"><a href="#13-ffmpeg命令之裁剪与合并" class="headerlink" title="13.ffmpeg命令之裁剪与合并"></a>13.ffmpeg命令之裁剪与合并</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 视频裁剪：ffmpeg -i in.mp4 -ss 00:00:00 -t 10 out.ts</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：输入文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-ss：指定裁剪的起始点</span></pre></td></tr><tr><td class="code"><pre><span class="line">-t：指定裁剪的时长(持续时长)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">2. 视频合并：ffmpeg -f concat -i inputs.txt out.flv</span></pre></td></tr><tr><td class="code"><pre><span class="line">-f：file 指定文件处理方式</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i: 输入文件集合，inputs.txt内容为 &#39;file filename&#39; 格式</span></pre></td></tr></table></figure>


<h4 id="14-ffmpeg命令之图片与视频互转"><a href="#14-ffmpeg命令之图片与视频互转" class="headerlink" title="14.ffmpeg命令之图片与视频互转"></a>14.ffmpeg命令之图片与视频互转</h4><p>机器学习，视频裁切成一张张图片，然后使用图片识别技术识别图片上的内容。又或者多张图片合成一个视频等等。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 视频转图片：ffmpeg -i in.flv -r 1 -f image2 image-%3d.jpeg</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：输入文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-r：指定转换图片的帧率(每秒钟转出1张图片)</span></pre></td></tr><tr><td class="code"><pre><span class="line">-f：指定文件转换格式</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">2. 图片转视频：ffmpeg -i image-%3d.jpeg out.mp4</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：输入文件</span></pre></td></tr></table></figure>


<h4 id="15-ffmpeg命令之直播推流与拉流"><a href="#15-ffmpeg命令之直播推流与拉流" class="headerlink" title="15.ffmpeg命令之直播推流与拉流"></a>15.ffmpeg命令之直播推流与拉流</h4><p><a href="https://blog.csdn.net/github_30662571/article/details/72466091" target="_blank" rel="noopener">一些直播流的rtmp地址</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 直播推流：ffmpeg -re -i out.mp4 -c copy -f flv rtmp:&#x2F;&#x2F;server&#x2F;live&#x2F;streamName</span></pre></td></tr><tr><td class="code"><pre><span class="line">-re：减慢帧率速度，保持帧率同步</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：指定推流的文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-c：音视频编解码 a是音频 v是视频 copy保持参数不变</span></pre></td></tr><tr><td class="code"><pre><span class="line">-f：指定推流的文件格式</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">2. 直播拉流：ffmpeg -i rtmp:&#x2F;&#x2F;server&#x2F;live&#x2F;streamName -c copy dump.flv</span></pre></td></tr><tr><td class="code"><pre><span class="line">-i：指定直播发布的rtmp服务地址</span></pre></td></tr><tr><td class="code"><pre><span class="line">-c：指定音视频编码器</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#96;&#96;&#96; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### 16.vim编辑器</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 命令模式：拷贝&#x2F;删除、粘贴 i&#x2F;a 切换到编辑模式</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 编辑模式：esc退出编辑模式</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 创建文件：vim filename</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 保存：:w</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 退出：:q</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 保存并退出：:wq</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 拷贝：yy&#x2F;yw  yy是拷贝一行   yw是拷贝一个单词</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 粘贴：p</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 删除：dd&#x2F;dw  dd是删除一行   dw是删除一个单词</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 左下上右：h&#x2F;j&#x2F;k&#x2F;l</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 跳到文件头：gg</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 跳到文件尾：GG</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 移动到行首：^</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 移动到行尾：$</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 按单词移动：向前 w&#x2F;2w  向后 b&#x2F;2b</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 查找关键字：&#x2F;关键字   下一个n  上一个N</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 查找与替换：:%s&#x2F;关键字&#x2F;替换字&#x2F;gc  c是表示要二次确认</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 分窗口：split&#x2F;vsplit</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 窗口间跳转：ctrl + ww&#x2F;w[hjkl]  ctrl + w + &#x3D; 恢复等屏幕    ctrl + w shift + | 最大化当前窗口  ctrl + w shift + - 最大化当前窗口</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### 17.C语言基础</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;c</span></pre></td></tr><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;  &#x2F;&#x2F; 导入头文件</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">int  main(int argc, char* argv[]) &#123; &#x2F;&#x2F; 入口函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int a &#x3D; 100;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    float b &#x3D; 7 .79;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    char c &#x3D; &#39;today&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    printf(&quot;Hello Worl!\n&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    printf(&quot;a&#x3D;%d\n&quot;, a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    printf(&quot;b&#x3D;%f\n&quot;, b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    printf(&quot;c&#x3D;%c\n&quot;, c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;  clang -g -o helloworld helloworld.c    -g输出debug信息  -o是输出可执行程序</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; .&#x2F;helloworld</span></pre></td></tr></table></figure>


<h4 id="18-C语言基础之常用基本类型"><a href="#18-C语言基础之常用基本类型" class="headerlink" title="18.C语言基础之常用基本类型"></a>18.C语言基础之常用基本类型</h4><ul>
<li>short int long</li>
<li>float double</li>
<li>char</li>
<li>void</li>
</ul>
<h4 id="19-C语言基础之指针与数组"><a href="#19-C语言基础之指针与数组" class="headerlink" title="19.C语言基础之指针与数组"></a>19.C语言基础之指针与数组</h4><ul>
<li>指针就是内存地址：void*  char*</li>
<li>数组： char c[2]   int arr[20]   连续的同一类型的内存空间</li>
<li>指针本身运算</li>
<li>指针所指内容的操作</li>
<li>操作系统如何管理内存？栈空间、堆空间、内存映射</li>
<li>分配内存：void* mem = malloc(size);</li>
<li>释放内存：free(mem);</li>
<li>申请的内存不用也不释放以引起内存泄漏</li>
<li>占用别人的内存成为野指针</li>
<li>函数指针：返回值类型(*指针变量名)([形参列表])</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int func(int x); &#x2F;&#x2F; 声明一个函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">int (*f) (int x); &#x2F;&#x2F; 声明一个函数指针</span></pre></td></tr><tr><td class="code"><pre><span class="line">f &#x3D; func; &#x2F;&#x2F; 将func函数的首地址赋给指针f</span></pre></td></tr></table></figure>


<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;studio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> a - b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argc[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">int</span> *a, *b; <span class="comment">// 定义两个指针类型</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     a = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">// 在堆里开辟空间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     b = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *a = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *b = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">int</span> c[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>&#125;; <span class="comment">// 定义一个数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="built_in">printf</span>(<span class="string">"addr of a:%p\n, %p, %d\n"</span>, &amp;a, a, *a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="built_in">printf</span>(<span class="string">"addr of b:%p\n, %p, %d\n"</span>, &amp;b, a, *b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="built_in">printf</span>(<span class="string">"addr of c:%p, %p, %d, %d, %d"</span>, &amp;c, c, c[<span class="number">0</span>], c[<span class="number">1</span>], c[<span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">int</span> (*f)(<span class="keyword">int</span>, <span class="keyword">int</span>); <span class="comment">// 定义一个函数指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">int</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">int</span> r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     f = sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     retsult = f(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">// 通过函数指针调用函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">     f = sub;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     r = f(result, <span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="built_in">printf</span>(<span class="string">"3+5=%d\n"</span>, result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="built_in">printf</span>(<span class="string">"8-5=%d\n"</span>, r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="20-C语言基础之结构体"><a href="#20-C语言基础之结构体" class="headerlink" title="20.C语言基础之结构体"></a>20.C语言基础之结构体</h4><p>原始类型，自定义的类型–结构体、枚举</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;studio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">st</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> em &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    red = <span class="number">10</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    green = <span class="number">20</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    blue = <span class="number">30</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    struct st sst;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sst.a = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sst.b = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"struct cpntent is:%d. %d\n"</span>, sst.a, sst.b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">enum</span> etype et;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    et = red;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"the color is %d\n"</span>, et);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    et = blue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"the color is %d\n"</span>, et);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="20-C语言基础之算数运算符与比较运算符"><a href="#20-C语言基础之算数运算符与比较运算符" class="headerlink" title="20.C语言基础之算数运算符与比较运算符"></a>20.C语言基础之算数运算符与比较运算符</h4><ul>
<li>+、-、*、/、%</li>
<li>&lt;=、&lt;、&gt;、&gt;=</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;studio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> c = a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"c=%d"</span>, c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="21-C语言基础之循环"><a href="#21-C语言基础之循环" class="headerlink" title="21.C语言基础之循环"></a>21.C语言基础之循环</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;studio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"i=%d\n"</span>, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (j &lt; <span class="number">10</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        printf('j=%d\n', j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        j++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="22-C语言基础之函数"><a href="#22-C语言基础之函数" class="headerlink" title="22.C语言基础之函数"></a>22.C语言基础之函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span>  a + b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is log info..."</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = sum(<span class="number">1</span>, <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"1 + 2 =%d\n"</span>, result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">log</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="23-C语言基础之文件操作"><a href="#23-C语言基础之文件操作" class="headerlink" title="23.C语言基础之文件操作"></a>23.C语言基础之文件操作</h4><ul>
<li>问价类型：FILE* file;</li>
<li>打开文件 FILE* fopen(path, mode);</li>
<li>关闭文件 fclose(FILE*);</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;studio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE* file;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>,&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    file = fopen(<span class="string">"1.txt"</span>, <span class="string">"a+"</span>); <span class="comment">// 打开一个文件，如果不存在就创建一个同名的文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fwrite(<span class="string">"Hello World"</span>, <span class="number">1</span>, <span class="number">11</span>, file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    rewind(file); <span class="comment">// 手动将游标放到文件的开头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fread(buf, <span class="number">1</span>, <span class="number">11</span>, file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"buf: %s\n"</span>, buf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="24-C语言基础之编译器"><a href="#24-C语言基础之编译器" class="headerlink" title="24.C语言基础之编译器"></a>24.C语言基础之编译器</h4><ul>
<li>Mac上使用clang，Linux上使用gcc</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. gcc&#x2F;clang -g -O2 -o test test.c -I... -L... -l</span></pre></td></tr><tr><td class="code"><pre><span class="line">-g：输出文件中的调试信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">-O：对输出文件做指令优化</span></pre></td></tr><tr><td class="code"><pre><span class="line">-o：输出文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-I：指定头文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">-L：指定库文件位置</span></pre></td></tr><tr><td class="code"><pre><span class="line">-l：指定使用哪个库</span></pre></td></tr></table></figure>

<ul>
<li>预编译：将头文件代码拷贝过来和项目代码合并</li>
<li>编译</li>
<li>链接、动态链接、静态链接</li>
<li>clang -g -c add.c  ==&gt;  add.o</li>
<li>libtool -static -o libmylib.a add.o  生成静态库</li>
<li>静态库代码<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add.h</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __MY_LIBRARY__</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __MY_LIBRARY__</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr></table></figure></li>
<li>引用静态库</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"add.h"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"add=%d\n"</span>, add(<span class="number">3</span>, <span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>编译：clang -g -o testlib testlib.c -I . -L . -l -lmylib</li>
</ul>
<h4 id="25-C语言基础之调试器"><a href="#25-C语言基础之调试器" class="headerlink" title="25.C语言基础之调试器"></a>25.C语言基础之调试器</h4><p>Mac下使用的是LLDB，Linux下使用Gdb</p>
<ul>
<li>编译输出带调试信息的程序</li>
<li>调试信息包含：指令地址、对应源代码及行号</li>
<li>指令完成后，回调</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>gdb/lldb</th>
</tr>
</thead>
<tbody><tr>
<td>设置断点</td>
<td>b</td>
</tr>
<tr>
<td>运行程序</td>
<td>r</td>
</tr>
<tr>
<td>单步执行</td>
<td>n</td>
</tr>
<tr>
<td>跳入函数</td>
<td>s</td>
</tr>
<tr>
<td>跳出函数</td>
<td>finish</td>
</tr>
<tr>
<td>打印内容</td>
<td>p</td>
</tr>
</tbody></table>
<ul>
<li>lldb testlib</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">break list &#x2F;&#x2F; 查看断点信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">p xxx &#x2F;&#x2F; 打印变量信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">c &#x2F;&#x2F; 一次执行完毕</span></pre></td></tr><tr><td class="code"><pre><span class="line">n &#x2F;&#x2F; 下一步</span></pre></td></tr><tr><td class="code"><pre><span class="line">quit &#x2F;&#x2F; 退出当前程序</span></pre></td></tr><tr><td class="code"><pre><span class="line">xxx.dSYM &#x2F;&#x2F; 带调试信息的编译后文件，使用dwarfdump xxx 即可查看对应的调试文件</span></pre></td></tr></table></figure>


<h4 id="27-ffmpeg代码结构"><a href="#27-ffmpeg代码结构" class="headerlink" title="27.ffmpeg代码结构"></a>27.ffmpeg代码结构</h4><table>
<thead>
<tr>
<th>文件夹</th>
<th>描述信息</th>
</tr>
</thead>
<tbody><tr>
<td>libavcodec</td>
<td>提供了一系列编码器的实现</td>
</tr>
<tr>
<td>libavformat</td>
<td>实现在流协议，容器格式及基本IO访问</td>
</tr>
<tr>
<td>libavutil</td>
<td>包括了hash器，解码器和各种工具函数</td>
</tr>
<tr>
<td>libavfilter</td>
<td>提供了各种音视频过滤器</td>
</tr>
<tr>
<td>libavdevice</td>
<td>提供了访问捕获设备和回访设备的接口</td>
</tr>
<tr>
<td>libswresample</td>
<td>实现了混音和重采样</td>
</tr>
<tr>
<td>libswscale</td>
<td>实现了色彩转换和缩放功能</td>
</tr>
</tbody></table>
<h4 id="28-ffmpeg日志系统"><a href="#28-ffmpeg日志系统" class="headerlink" title="28.ffmpeg日志系统"></a>28.ffmpeg日志系统</h4><ul>
<li>include &lt;libavutil/log.h&gt;  日志头文件</li>
<li>av_log_set_level(AV_LOG_DEBUG)  设置debug样式界别</li>
<li>av_log(NULL, AV_LOG_INFO, “..%s\n”, op)  日志打印</li>
<li>常用日志级别<ul>
<li>AV_LOG_ERROR </li>
<li>AV_LOG_WARNING</li>
<li>AV_LOG_INFO</li>
<li>AV_:OG_DEBUG</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/log.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_log_set_level(AV_LOG_DEBUG);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">"Hello WOrld!:%s\n"</span>, <span class="string">"Hi~"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>执行命令：clang -g -o ffmpeg_log ffmpeg_log.c -lavutil</li>
</ul>
<h4 id="29-ffmpeg文件的删除与重命名"><a href="#29-ffmpeg文件的删除与重命名" class="headerlink" title="29.ffmpeg文件的删除与重命名"></a>29.ffmpeg文件的删除与重命名</h4><ul>
<li>avpriv_io_delete()</li>
<li>avpriv_io_move()</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = avpriv_io_move(<span class="string">"111.txt"</span>, <span class="string">"222.txt"</span>); <span class="comment">// 重命名文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Failed to rename\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">"Success to rename\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = avpriv_io_delete(<span class="string">"./mytestfile.txt"</span>); <span class="comment">// 删除文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Failed to delete file mytestfile.txt\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">"Success to delete mytestfile.txt\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>执行程序：clang -g -o ffmpeg_del ffmpeg_file.c <code>pkg-config --libs libavformat</code></li>
</ul>
<h4 id="30-ffmpeg操作目录函数"><a href="#30-ffmpeg操作目录函数" class="headerlink" title="30.ffmpeg操作目录函数"></a>30.ffmpeg操作目录函数</h4><ul>
<li>avio_open_dir()</li>
<li>avio_read_dir()</li>
<li>avio_close_dir()<ul>
<li>AVIO_DirContext操作目录的上下文</li>
<li>AVIODirEntry目录想，用于存放文件名、文件属性等等</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/log.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVIODirEntry *entry = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVIODirCotext *ctx = <span class="literal">NULL</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_log_set_level(AV_LOG_INFO);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = avio_open_dir(&amp;ctx, <span class="string">"./"</span>, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cant open dir:%s\n"</span>, av_err2str(ret));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = avio_read_dir(ctx, &amp;entry);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cant read dir:%s\n"</span>, av_err2str(ret));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">goto</span> __fail;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!entry) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_INFO, <span class="string">"%12"</span>PRId64<span class="string">" %s \n"</span>, entry-&gt;<span class="built_in">size</span>, entry-&gt;name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avio_free_directory_entry(&amp;entry); <span class="comment">// 释放内存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    __fail;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avio_close_dir(&amp;ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="31-多媒体文件"><a href="#31-多媒体文件" class="headerlink" title="31.多媒体文件"></a>31.多媒体文件</h4><ul>
<li>多媒体文件其实就是个容器</li>
<li>在容器里又很多流（Stream/Track）</li>
<li>每种流是由不同的编码器编码的</li>
<li>从流中读取的数据称为包</li>
<li>在一个包中包含着一个或多个帧</li>
<li>AVFormatContext   读取多媒体文件的上下文</li>
<li>AVStream</li>
<li>AVPacket</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">解复用 -- 获取流 -- 读取数据包 -- 释放资源</span></pre></td></tr></table></figure>


<h4 id="32-打印音视频信息"><a href="#32-打印音视频信息" class="headerlink" title="32.打印音视频信息"></a>32.打印音视频信息</h4><ul>
<li>av_register_all()</li>
<li>avformat_open_input() / avformat_close_input()</li>
<li>av_dump_format()</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/log.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFormatContext *fmt_ctx = <span class="literal">NULL</span>: <span class="comment">// 格式上下文</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_log_set_level(AV_LOG_INFO);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_register_all(); <span class="comment">// 注册各种解码器、协议等等</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = avformat_open_input(&amp;fmt_ctx, <span class="string">"./test.mp4"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"Cant open file: %s\n"</span>, averr2str(ret));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_dump_format(fmt_ctx, <span class="number">0</span>, <span class="string">"./test.mp4"</span>, <span class="number">0</span>); <span class="comment">// 打印metadata</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_close_input(&amp;fmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>执行程序：clang -g -o mediainfo mediainfo.c <code>pkg-config --libs libavutil libavformat</code></li>
</ul>
<h4 id="33-抽取音频数据"><a href="#33-抽取音频数据" class="headerlink" title="33.抽取音频数据"></a>33.抽取音频数据</h4><ul>
<li>av_init_packet()  初始化数据包结构体</li>
<li>av_find_best_stream()   从对媒体文件中找到最好的一路流</li>
<li>av_read_frame()/av_packet_unref()   读取流中的数据包/释放读取之后的引用计数-1，防止内存泄漏</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/log.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADTS_HEADER_LEN 7;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adts_header</span><span class="params">(<span class="keyword">char</span> *szAdtsHeader, <span class="keyword">int</span> dataLen)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> audio_object_type = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> sampling_frequency_index = <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> channel_config = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> adtsLen = dataLen + <span class="number">7</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">0</span>] = <span class="number">0xff</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">1</span>] = <span class="number">0xf0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">1</span>] |= (<span class="number">0</span> &lt;&lt; <span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">1</span>] |= (<span class="number">0</span> &lt;&lt; <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">1</span>] |= <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">2</span>] = (audio_object_type - <span class="number">1</span>) &lt;&lt; <span class="number">6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">2</span>] |= (sampling_frequency_index &amp; <span class="number">0x0f</span>) &lt;&lt; <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">2</span>] |= (<span class="number">0</span> &lt;&lt; <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">2</span>] |= (channel_config &amp; <span class="number">0x04</span>) &gt;&gt; <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">3</span>] = (channel_config &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">3</span>] |= (<span class="number">0</span> &lt;&lt; <span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">3</span>] |= (<span class="number">0</span> &lt;&lt; <span class="number">4</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">3</span>] |= (<span class="number">0</span> &lt;&lt; <span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">3</span>] |= (<span class="number">0</span> &lt;&lt; <span class="number">2</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">3</span>] |= ((adtsLen &amp; <span class="number">0x1800</span>) &gt;&gt; <span class="number">11</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">4</span>] = (<span class="keyword">uint8_t</span>)((adtsLen &amp; <span class="number">0x7f8</span>) &gt;&gt; <span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">5</span>] = (<span class="keyword">uint8_t</span>)((adtsLen &amp; <span class="number">0x7</span>) &lt;&lt; <span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">5</span>] = <span class="number">0x1f</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    szAdtsHeader[<span class="number">6</span>] = <span class="number">0xfc</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> audio_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span>* src = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span>* dst = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVPacket pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFormatContext *fmt_ctx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_log_set_level(AV_LOG_INFO);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// av_register_all(); // 注册各种解码器、协议等等，ffmpeg4.0之后不再需要手动注册</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 第一步：从控制台读取两次参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"the count of params should be more than three! \n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    src = argv[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dst = argv[<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!src || !dst) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"src or dst is null! \n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = avformat_open_input(&amp;fmt_ctx, src, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">// 读取多媒体文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"can not open file: %s\n"</span>, av_err2str(ret));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE* dst_fd = fopen(dst, <span class="string">"wb"</span>); <span class="comment">// 以只写的方式打开一个二进制文件，若无则创建这个文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!dst_fd) &#123; <span class="comment">// 判断输出文件是否存在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"can not open out file! \n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avformat_close_input(&amp;fmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_dump_format(fmt_ctx, <span class="number">0</span>, src, <span class="number">0</span>); <span class="comment">// 打印metadata</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 2.第二步：获取流</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_AUDIO, <span class="number">-1</span>, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>); <span class="comment">// 音频</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_log(<span class="literal">NULL</span>, AV_LOG_ERROR, <span class="string">"can not find the best stream!\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avformat_close_input(&amp;fmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fclose(dst_fd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    audio_index = ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_init_packet(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(av_read_frame(fmt_ctx, &amp;pkt) &gt;= <span class="number">0</span>) &#123; <span class="comment">// 读取流中的所有数据包</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(pkt.stream_index == audio_index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">char</span> adts_header_buf[<span class="number">7</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            adts_header(adts_header_buf, pkt.<span class="built_in">size</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fwrite(adts_header_buf, <span class="number">1</span>, <span class="number">7</span>, dst_fd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第三步：读取流数据包</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            len = fwrite(pkt.data, <span class="number">1</span>, pkt.<span class="built_in">size</span>, dst_fd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>(len != pkt.<span class="built_in">size</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                av_log(<span class="literal">NULL</span>, AV_LOG_WARNING, <span class="string">"warning length of data is not equal size of pkt! \n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_packet_unref(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_close_input(&amp;fmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (dst_fd) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fclose(dst_fd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">34.</span>抽取视频数据</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- Start code  特征码</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SPS/PPS  去解码的视频参数  超级小，一般每一帧前面加</span></pre></td></tr><tr><td class="code"><pre><span class="line">- codec -&gt; extradata  获取SPS/PPS，在编码器的扩展数据空间里获取</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/log.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="35-将MP4转成FLV格式"><a href="#35-将MP4转成FLV格式" class="headerlink" title="35.将MP4转成FLV格式"></a>35.将MP4转成FLV格式</h4><ul>
<li>avformat_alloc_output_context2() / avformat_free_context()</li>
<li>avformat_new_stream()</li>
<li>avcodec_parameters_copy()</li>
<li>avformat_write_header()</li>
<li>av_write_frame() / av_interleaved_write_frame()</li>
<li>av_write_trailer()</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/timestamp.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log_packet</span><span class="params">(<span class="keyword">const</span> AVFormatContext *fmt_ctx, <span class="keyword">const</span> AVPacket *pkt, <span class="keyword">const</span> <span class="keyword">char</span> *tag)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVRational *time_base = &amp;fmt_ctx-&gt;streams[pkt-&gt;stream_index]-&gt;time_base;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s: pts:%s pts_time:%s dts:%s dts_time:%s duration:%s duration_time:%s stream_index:%d\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">           tag,</span></pre></td></tr><tr><td class="code"><pre><span class="line">           av_ts2str(pkt-&gt;pts), av_ts2timestr(pkt-&gt;pts, time_base),</span></pre></td></tr><tr><td class="code"><pre><span class="line">           av_ts2str(pkt-&gt;dts), av_ts2timestr(pkt-&gt;dts, time_base),</span></pre></td></tr><tr><td class="code"><pre><span class="line">           av_ts2str(pkt-&gt;duration), av_ts2timestr(pkt-&gt;duration, time_base),</span></pre></td></tr><tr><td class="code"><pre><span class="line">           pkt-&gt;stream_index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVOutputFormat *ofmt = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFormatContext *ifmt_ctx = <span class="literal">NULL</span>, *ofmt_ctx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVPacket pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *in_filename, *out_filename;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret, i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> stream_index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> *stream_mapping = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> stream_mapping_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"usage: %s input output\n"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="string">"API example program to remux a media file with libavformat and libavcodec.\n"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="string">"The output format is guessed according to the file extension.\n"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="string">"\n"</span>, argv[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    in_filename  = argv[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    out_filename = argv[<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((ret = avformat_open_input(&amp;ifmt_ctx, in_filename, <span class="number">0</span>, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open input file '%s'"</span>, in_filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((ret = avformat_find_stream_info(ifmt_ctx, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to retrieve input stream information"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_dump_format(ifmt_ctx, <span class="number">0</span>, in_filename, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_alloc_output_context2(&amp;ofmt_ctx, <span class="literal">NULL</span>, <span class="literal">NULL</span>, out_filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!ofmt_ctx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not create output context\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = AVERROR_UNKNOWN;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream_mapping_size = ifmt_ctx-&gt;nb_streams;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream_mapping = av_mallocz_array(stream_mapping_size, <span class="keyword">sizeof</span>(*stream_mapping));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!stream_mapping) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = AVERROR(ENOMEM);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ofmt = ofmt_ctx-&gt;oformat;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ifmt_ctx-&gt;nb_streams; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AVStream *out_stream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AVStream *in_stream = ifmt_ctx-&gt;streams[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AVCodecParameters *in_codecpar = in_stream-&gt;codecpar;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (in_codecpar-&gt;codec_type != AVMEDIA_TYPE_AUDIO &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            in_codecpar-&gt;codec_type != AVMEDIA_TYPE_VIDEO &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            in_codecpar-&gt;codec_type != AVMEDIA_TYPE_SUBTITLE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            stream_mapping[i] = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        stream_mapping[i] = stream_index++;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        out_stream = avformat_new_stream(ofmt_ctx, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!out_stream) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed allocating output stream\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ret = AVERROR_UNKNOWN;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = avcodec_parameters_copy(out_stream-&gt;codecpar, in_codecpar);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to copy codec parameters\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        out_stream-&gt;codecpar-&gt;codec_tag = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_dump_format(ofmt_ctx, <span class="number">0</span>, out_filename, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!(ofmt-&gt;flags &amp; AVFMT_NOFILE)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = avio_open(&amp;ofmt_ctx-&gt;pb, out_filename, AVIO_FLAG_WRITE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open output file '%s'"</span>, out_filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = avformat_write_header(ofmt_ctx, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error occurred when opening output file\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AVStream *in_stream, *out_stream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = av_read_frame(ifmt_ctx, &amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        in_stream  = ifmt_ctx-&gt;streams[pkt.stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (pkt.stream_index &gt;= stream_mapping_size ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">            stream_mapping[pkt.stream_index] &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            av_packet_unref(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.stream_index = stream_mapping[pkt.stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        out_stream = ofmt_ctx-&gt;streams[pkt.stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        log_packet(ifmt_ctx, &amp;pkt, <span class="string">"in"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* copy packet */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.pts = av_rescale_q_rnd(pkt.pts, in_stream-&gt;time_base, out_stream-&gt;time_base, AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.dts = av_rescale_q_rnd(pkt.dts, in_stream-&gt;time_base, out_stream-&gt;time_base, AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.duration = av_rescale_q(pkt.duration, in_stream-&gt;time_base, out_stream-&gt;time_base);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.pos = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        log_packet(ofmt_ctx, &amp;pkt, <span class="string">"out"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = av_interleaved_write_frame(ofmt_ctx, &amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error muxing packet\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_packet_unref(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_write_trailer(ofmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">end</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_close_input(&amp;ifmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* close output */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ofmt_ctx &amp;&amp; !(ofmt-&gt;flags &amp; AVFMT_NOFILE))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avio_closep(&amp;ofmt_ctx-&gt;pb);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_free_context(ofmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_freep(&amp;stream_mapping);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> &amp;&amp; ret != AVERROR_EOF) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error occurred: %s\n"</span>, av_err2str(ret));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">36.</span>cong从MP4截取一段视频</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- av_seek_frame()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/timestamp.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log_packet</span><span class="params">(<span class="keyword">const</span> AVFormatContext *fmt_ctx, <span class="keyword">const</span> AVPacket *pkt, <span class="keyword">const</span> <span class="keyword">char</span> *tag)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVRational *time_base = &amp;fmt_ctx-&gt;streams[pkt-&gt;stream_index]-&gt;time_base;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s: pts:%s pts_time:%s dts:%s dts_time:%s duration:%s duration_time:%s stream_index:%d\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">           tag,</span></pre></td></tr><tr><td class="code"><pre><span class="line">           av_ts2str(pkt-&gt;pts), av_ts2timestr(pkt-&gt;pts, time_base),</span></pre></td></tr><tr><td class="code"><pre><span class="line">           av_ts2str(pkt-&gt;dts), av_ts2timestr(pkt-&gt;dts, time_base),</span></pre></td></tr><tr><td class="code"><pre><span class="line">           av_ts2str(pkt-&gt;duration), av_ts2timestr(pkt-&gt;duration, time_base),</span></pre></td></tr><tr><td class="code"><pre><span class="line">           pkt-&gt;stream_index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cut_video</span><span class="params">(<span class="keyword">double</span> from_seconds, <span class="keyword">double</span> end_seconds, <span class="keyword">const</span> <span class="keyword">char</span>* in_filename, <span class="keyword">const</span> <span class="keyword">char</span>* out_filename)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVOutputFormat *ofmt = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFormatContext *ifmt_ctx = <span class="literal">NULL</span>, *ofmt_ctx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVPacket pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret, i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((ret = avformat_open_input(&amp;ifmt_ctx, in_filename, <span class="number">0</span>, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open input file '%s'"</span>, in_filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((ret = avformat_find_stream_info(ifmt_ctx, <span class="number">0</span>)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to retrieve input stream information"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_dump_format(ifmt_ctx, <span class="number">0</span>, in_filename, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_alloc_output_context2(&amp;ofmt_ctx, <span class="literal">NULL</span>, <span class="literal">NULL</span>, out_filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!ofmt_ctx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not create output context\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = AVERROR_UNKNOWN;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ofmt = ofmt_ctx-&gt;oformat;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ifmt_ctx-&gt;nb_streams; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AVStream *in_stream = ifmt_ctx-&gt;streams[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AVStream *out_stream = avformat_new_stream(ofmt_ctx, in_stream-&gt;codec-&gt;codec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!out_stream) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed allocating output stream\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ret = AVERROR_UNKNOWN;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = avcodec_copy_context(out_stream-&gt;codec, in_stream-&gt;codec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to copy context from input to output stream codec context\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        out_stream-&gt;codec-&gt;codec_tag = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ofmt_ctx-&gt;oformat-&gt;flags &amp; AVFMT_GLOBALHEADER)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            out_stream-&gt;codec-&gt;flags |= AV_CODEC_FLAG_GLOBAL_HEADER;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_dump_format(ofmt_ctx, <span class="number">0</span>, out_filename, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!(ofmt-&gt;flags &amp; AVFMT_NOFILE)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = avio_open(&amp;ofmt_ctx-&gt;pb, out_filename, AVIO_FLAG_WRITE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open output file '%s'"</span>, out_filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = avformat_write_header(ofmt_ctx, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error occurred when opening output file\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//    int indexs[8] = &#123;0&#125;;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//    int64_t start_from = 8*AV_TIME_BASE;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = av_seek_frame(ifmt_ctx, <span class="number">-1</span>, from_seconds*AV_TIME_BASE, AVSEEK_FLAG_ANY);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error seek\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> <span class="built_in">end</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int64_t</span> *dts_start_from = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int64_t</span>) * ifmt_ctx-&gt;nb_streams);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">memset</span>(dts_start_from, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int64_t</span>) * ifmt_ctx-&gt;nb_streams);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int64_t</span> *pts_start_from = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int64_t</span>) * ifmt_ctx-&gt;nb_streams);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">memset</span>(pts_start_from, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int64_t</span>) * ifmt_ctx-&gt;nb_streams);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AVStream *in_stream, *out_stream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = av_read_frame(ifmt_ctx, &amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        in_stream  = ifmt_ctx-&gt;streams[pkt.stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        out_stream = ofmt_ctx-&gt;streams[pkt.stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        log_packet(ifmt_ctx, &amp;pkt, <span class="string">"in"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (av_q2d(in_stream-&gt;time_base) * pkt.pts &gt; end_seconds) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            av_free_packet(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (dts_start_from[pkt.stream_index] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dts_start_from[pkt.stream_index] = pkt.dts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">printf</span>(<span class="string">"dts_start_from: %s\n"</span>, av_ts2str(dts_start_from[pkt.stream_index]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (pts_start_from[pkt.stream_index] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pts_start_from[pkt.stream_index] = pkt.pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">printf</span>(<span class="string">"pts_start_from: %s\n"</span>, av_ts2str(pts_start_from[pkt.stream_index]));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* copy packet */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.pts = av_rescale_q_rnd(pkt.pts - pts_start_from[pkt.stream_index], in_stream-&gt;time_base, out_stream-&gt;time_base, AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.dts = av_rescale_q_rnd(pkt.dts - dts_start_from[pkt.stream_index], in_stream-&gt;time_base, out_stream-&gt;time_base, AV_ROUND_NEAR_INF|AV_ROUND_PASS_MINMAX);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (pkt.pts &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pkt.pts = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (pkt.dts &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            pkt.dts = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.duration = (<span class="keyword">int</span>)av_rescale_q((<span class="keyword">int64_t</span>)pkt.duration, in_stream-&gt;time_base, out_stream-&gt;time_base);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.pos = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        log_packet(ofmt_ctx, &amp;pkt, <span class="string">"out"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = av_interleaved_write_frame(ofmt_ctx, &amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error muxing packet\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_free_packet(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">free</span>(dts_start_from);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">free</span>(pts_start_from);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_write_trailer(ofmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">end</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_close_input(&amp;ifmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* close output */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ofmt_ctx &amp;&amp; !(ofmt-&gt;flags &amp; AVFMT_NOFILE))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avio_closep(&amp;ofmt_ctx-&gt;pb);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_free_context(ofmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span> &amp;&amp; ret != AVERROR_EOF) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error occurred: %s\n"</span>, av_err2str(ret));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">5</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                command startime, endtime, srcfile, outfile"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">double</span> startime = atoi(argv[<span class="number">1</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">double</span> endtime = atoi(argv[<span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    cut_video(startime, endtime, argv[<span class="number">3</span>], argv[<span class="number">4</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">37.</span>h264解码</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 常用数据结构体</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - AVCodec 编码器结构体</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - AVCodecCotext 编码器上下文</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - AVFrame 解码后的帧</span></pre></td></tr><tr><td class="code"><pre><span class="line">- av_frame_alloc() / av_frame_free()</span></pre></td></tr><tr><td class="code"><pre><span class="line">- avcodec_alloc_context3()</span></pre></td></tr><tr><td class="code"><pre><span class="line">- avcodec_free_context()</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 解码步骤</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">1.</span> 查找解码器（avcodec_find_decoder / avcodec_find_encoder_by_name）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">2.</span> 打开解码器（avcodec_open2）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">3.</span> 解码（avcodec_decode_video2）</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- h264编码流程</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">1.</span> 查找编码器（avcodec_find_encoder_by_name）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">2.</span> 设置编码参数，并打开编码器（avcodec_open2）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="number">3.</span> 编码（avcodec_encode_video2）</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INBUF_SIZE 4096</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WORD uint16_t</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DWORD uint32_t</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LONG int32_t</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPFILEHEADER</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  bfType;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD bfSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  bfReserved1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  bfReserved2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD bfOffBits;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; BITMAPFILEHEADER, *PBITMAPFILEHEADER;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPINFOHEADER</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  LONG  biWidth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  LONG  biHeight;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  biPlanes;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  biBitCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biCompression;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biSizeImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  LONG  biXPelsPerMeter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  LONG  biYPelsPerMeter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biClrUsed;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biClrImportant;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; BITMAPINFOHEADER, *PBITMAPINFOHEADER;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBMP</span><span class="params">(struct SwsContext *img_convert_ctx, AVFrame *frame, <span class="keyword">char</span> *filename)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//1 先进行转换,  YUV420=&gt;RGB24:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> w = frame-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> h = frame-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> numBytes=avpicture_get_size(AV_PIX_FMT_BGR24, w, h);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> *<span class="built_in">buffer</span>=(<span class="keyword">uint8_t</span> *)av_malloc(numBytes*<span class="keyword">sizeof</span>(<span class="keyword">uint8_t</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFrame *pFrameRGB = av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="comment">/* buffer is going to be written to rawvideo file, no alignment */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if (av_image_alloc(pFrameRGB-&gt;data, pFrameRGB-&gt;linesize,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                              w, h, AV_PIX_FMT_BGR24, pix_fmt, 1) &lt; 0) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        fprintf(stderr, "Could not allocate destination image\n");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        exit(1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpicture_fill((AVPicture *)pFrameRGB, <span class="built_in">buffer</span>, AV_PIX_FMT_BGR24, w, h);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sws_scale(img_convert_ctx, frame-&gt;data, frame-&gt;linesize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="number">0</span>, h, pFrameRGB-&gt;data, pFrameRGB-&gt;linesize);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//2 构造 BITMAPINFOHEADER</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    BITMAPINFOHEADER header;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biSize = <span class="keyword">sizeof</span>(BITMAPINFOHEADER);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biWidth = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biHeight = h*(<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biBitCount = <span class="number">24</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biCompression = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biSizeImage = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biClrImportant = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biClrUsed = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biXPelsPerMeter = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biYPelsPerMeter = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biPlanes = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//3 构造文件头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    BITMAPFILEHEADER bmpFileHeader = &#123;<span class="number">0</span>,&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//HANDLE hFile = NULL;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    DWORD dwTotalWriten = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    DWORD dwWriten;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bmpFileHeader.bfType = <span class="number">0x4d42</span>; <span class="comment">//'BM';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bmpFileHeader.bfSize = <span class="keyword">sizeof</span>(BITMAPFILEHEADER) + <span class="keyword">sizeof</span>(BITMAPINFOHEADER)+ numBytes;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    bmpFileHeader.bfOffBits=<span class="keyword">sizeof</span>(BITMAPFILEHEADER)+<span class="keyword">sizeof</span>(BITMAPINFOHEADER);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE* pf = fopen(filename, <span class="string">"wb"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fwrite(&amp;bmpFileHeader, <span class="keyword">sizeof</span>(BITMAPFILEHEADER), <span class="number">1</span>, pf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fwrite(&amp;header, <span class="keyword">sizeof</span>(BITMAPINFOHEADER), <span class="number">1</span>, pf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fwrite(pFrameRGB-&gt;data[<span class="number">0</span>], <span class="number">1</span>, numBytes, pf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(pf);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//释放资源</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//av_free(buffer);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_freep(&amp;pFrameRGB[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_free(pFrameRGB);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pgm_save</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> wrap, <span class="keyword">int</span> xsize, <span class="keyword">int</span> ysize,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">                     <span class="keyword">char</span> *filename)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE *f;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    f = fopen(filename,<span class="string">"w"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(f, <span class="string">"P5\n%d %d\n%d\n"</span>, xsize, ysize, <span class="number">255</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ysize; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fwrite(buf + i * wrap, <span class="number">1</span>, xsize, f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">decode_write_frame</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *outfilename, AVCodecContext *avctx,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">                              struct SwsContext *img_convert_ctx, AVFrame *frame, <span class="keyword">int</span> *frame_count, AVPacket *pkt, <span class="keyword">int</span> last)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len, got_frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    len = avcodec_decode_video2(avctx, frame, &amp;got_frame, pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error while decoding frame %d\n"</span>, *frame_count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (got_frame) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"Saving %sframe %3d\n"</span>, last ? <span class="string">"last "</span> : <span class="string">""</span>, *frame_count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fflush(<span class="built_in">stdout</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* the picture is allocated by the decoder, no need to free it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"%s-%d.bmp"</span>, outfilename, *frame_count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        pgm_save(frame-&gt;data[0], frame-&gt;linesize[0],</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 frame-&gt;width, frame-&gt;height, buf);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        saveBMP(img_convert_ctx, frame, buf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        (*frame_count)++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pkt-&gt;data) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt-&gt;<span class="built_in">size</span> -= len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt-&gt;data += len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE *f;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filename, *outfilename;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFormatContext *fmt_ctx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> AVCodec *codec;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVCodecContext *c= <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVStream *st = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> stream_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> frame_count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFrame *frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SwsContext</span> *<span class="title">img_convert_ctx</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//uint8_t inbuf[INBUF_SIZE + AV_INPUT_BUFFER_PADDING_SIZE];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVPacket avpkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (argc &lt;= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: %s &lt;input file&gt; &lt;output file&gt;\n"</span>, argv[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename    = argv[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    outfilename = argv[<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* register all formats and codecs */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* open input file, and allocate format context */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;fmt_ctx, filename, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open source file %s\n"</span>, filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* retrieve stream information */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(fmt_ctx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not find stream information\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* dump input information to stderr */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_dump_format(fmt_ctx, <span class="number">0</span>, filename, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_init_packet(&amp;avpkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* set end of buffer to 0 (this ensures that no overreading happens for damaged MPEG streams) */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//memset(inbuf + INBUF_SIZE, 0, AV_INPUT_BUFFER_PADDING_SIZE);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, <span class="number">-1</span>, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not find %s stream in input file '%s'\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                av_get_media_type_string(AVMEDIA_TYPE_VIDEO), filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream_index = ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    st = fmt_ctx-&gt;streams[stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* find decoder for the stream */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    codec = avcodec_find_decoder(st-&gt;codecpar-&gt;codec_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!codec) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to find %s codec\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                av_get_media_type_string(AVMEDIA_TYPE_VIDEO));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> AVERROR(EINVAL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* find the MPEG-1 video decoder */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    codec = avcodec_find_decoder(AV_CODEC_ID_MPEG1VIDEO);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if (!codec) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        fprintf(stderr, "Codec not found\n");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        exit(1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c = avcodec_alloc_context3(<span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate video codec context\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* Copy codec parameters from input stream to output codec context */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((ret = avcodec_parameters_to_context(c, st-&gt;codecpar)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to copy %s codec parameters to decoder context\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                av_get_media_type_string(AVMEDIA_TYPE_VIDEO));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if (codec-&gt;capabilities &amp; AV_CODEC_CAP_TRUNCATED)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        c-&gt;flags |= AV_CODEC_FLAG_TRUNCATED; // we do not send complete frames</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* For some codecs, such as msmpeg4 and mpeg4, width and height</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       MUST be initialized there because this information is not</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       available in the bitstream. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* open it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (avcodec_open2(c, codec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open codec\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    f = fopen(filename, "rb");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if (!f) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        fprintf(stderr, "Could not open %s\n", filename);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        exit(1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    img_convert_ctx = sws_getContext(c-&gt;<span class="built_in">width</span>, c-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     c-&gt;pix_fmt,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     c-&gt;<span class="built_in">width</span>, c-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     AV_PIX_FMT_RGB24,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     SWS_BICUBIC, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (img_convert_ctx == <span class="literal">NULL</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Cannot initialize the conversion context\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame = av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!frame) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate video frame\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame_count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (av_read_frame(fmt_ctx, &amp;avpkt) &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        avpkt.size = fread(inbuf, 1, INBUF_SIZE, f);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        if (avpkt.size == 0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">            break;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* NOTE1: some codecs are stream based (mpegvideo, mpegaudio)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           and this is the only method to use them because you cannot</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           know the compressed data size before analysing it.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           BUT some other codecs (msmpeg4, mpeg4) are inherently frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           based, so you must call them with all the data for one</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           frame exactly. You must also initialize 'width' and</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           'height' before initializing them. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* NOTE2: some codecs allow the raw parameters (frame size,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           sample rate) to be changed at any frame. We handle this, so</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           you should also take care of it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* here, we use a stream based decoder (mpeg1video), so we</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           feed decoder and see if it could decode a frame */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//avpkt.data = inbuf;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//while (avpkt.size &gt; 0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(avpkt.stream_index == stream_index)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (decode_write_frame(outfilename, c, img_convert_ctx, frame, &amp;frame_count, &amp;avpkt, <span class="number">0</span>) &lt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_packet_unref(&amp;avpkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* Some codecs, such as MPEG, transmit the I- and P-frame with a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       latency of one frame. You must do the following to have a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       chance to get the last frame of the video. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpkt.data = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpkt.<span class="built_in">size</span> = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    decode_write_frame(outfilename, c, img_convert_ctx, frame, &amp;frame_count, &amp;avpkt, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(f);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_close_input(&amp;fmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sws_freeContext(img_convert_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_free_context(&amp;c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_frame_free(&amp;frame);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line">- 执行程序：clang -g -o encode_video encode_video.c `pkg-<span class="built_in">config</span> --libs libavcodec`</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">38.</span>视频转图片</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INBUF_SIZE 4096</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WORD uint16_t</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DWORD uint32_t</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LONG int32_t</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPFILEHEADER</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  bfType;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD bfSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  bfReserved1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  bfReserved2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD bfOffBits;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; BITMAPFILEHEADER, *PBITMAPFILEHEADER;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagBITMAPINFOHEADER</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  LONG  biWidth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  LONG  biHeight;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  biPlanes;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  WORD  biBitCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biCompression;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biSizeImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  LONG  biXPelsPerMeter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  LONG  biYPelsPerMeter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biClrUsed;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  DWORD biClrImportant;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; BITMAPINFOHEADER, *PBITMAPINFOHEADER;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBMP</span><span class="params">(struct SwsContext *img_convert_ctx, AVFrame *frame, <span class="keyword">char</span> *filename)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//1 先进行转换,  YUV420=&gt;RGB24:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> w = frame-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> h = frame-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> numBytes=avpicture_get_size(AV_PIX_FMT_BGR24, w, h);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> *<span class="built_in">buffer</span>=(<span class="keyword">uint8_t</span> *)av_malloc(numBytes*<span class="keyword">sizeof</span>(<span class="keyword">uint8_t</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFrame *pFrameRGB = av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     <span class="comment">/* buffer is going to be written to rawvideo file, no alignment */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if (av_image_alloc(pFrameRGB-&gt;data, pFrameRGB-&gt;linesize,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                              w, h, AV_PIX_FMT_BGR24, pix_fmt, 1) &lt; 0) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        fprintf(stderr, "Could not allocate destination image\n");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        exit(1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpicture_fill((AVPicture *)pFrameRGB, <span class="built_in">buffer</span>, AV_PIX_FMT_BGR24, w, h);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sws_scale(img_convert_ctx, frame-&gt;data, frame-&gt;linesize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="number">0</span>, h, pFrameRGB-&gt;data, pFrameRGB-&gt;linesize);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//2 构造 BITMAPINFOHEADER</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    BITMAPINFOHEADER header;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biSize = <span class="keyword">sizeof</span>(BITMAPINFOHEADER);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biWidth = w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biHeight = h*(<span class="number">-1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biBitCount = <span class="number">24</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biCompression = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biSizeImage = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biClrImportant = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biClrUsed = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biXPelsPerMeter = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biYPelsPerMeter = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    header.biPlanes = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//3 构造文件头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    BITMAPFILEHEADER bmpFileHeader = &#123;<span class="number">0</span>,&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//HANDLE hFile = NULL;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    DWORD dwTotalWriten = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    DWORD dwWriten;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bmpFileHeader.bfType = <span class="number">0x4d42</span>; <span class="comment">//'BM';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bmpFileHeader.bfSize = <span class="keyword">sizeof</span>(BITMAPFILEHEADER) + <span class="keyword">sizeof</span>(BITMAPINFOHEADER)+ numBytes;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    bmpFileHeader.bfOffBits=<span class="keyword">sizeof</span>(BITMAPFILEHEADER)+<span class="keyword">sizeof</span>(BITMAPINFOHEADER);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE* pf = fopen(filename, <span class="string">"wb"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fwrite(&amp;bmpFileHeader, <span class="keyword">sizeof</span>(BITMAPFILEHEADER), <span class="number">1</span>, pf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fwrite(&amp;header, <span class="keyword">sizeof</span>(BITMAPINFOHEADER), <span class="number">1</span>, pf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fwrite(pFrameRGB-&gt;data[<span class="number">0</span>], <span class="number">1</span>, numBytes, pf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(pf);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//释放资源</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//av_free(buffer);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_freep(&amp;pFrameRGB[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_free(pFrameRGB);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pgm_save</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *buf, <span class="keyword">int</span> wrap, <span class="keyword">int</span> xsize, <span class="keyword">int</span> ysize,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">                     <span class="keyword">char</span> *filename)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE *f;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    f = fopen(filename,<span class="string">"w"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(f, <span class="string">"P5\n%d %d\n%d\n"</span>, xsize, ysize, <span class="number">255</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ysize; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fwrite(buf + i * wrap, <span class="number">1</span>, xsize, f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">decode_write_frame</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *outfilename, AVCodecContext *avctx,</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="params">                              struct SwsContext *img_convert_ctx, AVFrame *frame, <span class="keyword">int</span> *frame_count, AVPacket *pkt, <span class="keyword">int</span> last)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> len, got_frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    len = avcodec_decode_video2(avctx, frame, &amp;got_frame, pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error while decoding frame %d\n"</span>, *frame_count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (got_frame) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"Saving %sframe %3d\n"</span>, last ? <span class="string">"last "</span> : <span class="string">""</span>, *frame_count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fflush(<span class="built_in">stdout</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* the picture is allocated by the decoder, no need to free it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"%s-%d.bmp"</span>, outfilename, *frame_count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        pgm_save(frame-&gt;data[0], frame-&gt;linesize[0],</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                 frame-&gt;width, frame-&gt;height, buf);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        saveBMP(img_convert_ctx, frame, buf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        (*frame_count)++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pkt-&gt;data) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt-&gt;<span class="built_in">size</span> -= len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt-&gt;data += len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE *f;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filename, *outfilename;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFormatContext *fmt_ctx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> AVCodec *codec;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVCodecContext *c= <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVStream *st = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> stream_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> frame_count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFrame *frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SwsContext</span> *<span class="title">img_convert_ctx</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//uint8_t inbuf[INBUF_SIZE + AV_INPUT_BUFFER_PADDING_SIZE];</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVPacket avpkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (argc &lt;= <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: %s &lt;input file&gt; &lt;output file&gt;\n"</span>, argv[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename    = argv[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    outfilename = argv[<span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* register all formats and codecs */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* open input file, and allocate format context */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;fmt_ctx, filename, <span class="literal">NULL</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open source file %s\n"</span>, filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* retrieve stream information */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(fmt_ctx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not find stream information\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* dump input information to stderr */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_dump_format(fmt_ctx, <span class="number">0</span>, filename, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_init_packet(&amp;avpkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* set end of buffer to 0 (this ensures that no overreading happens for damaged MPEG streams) */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//memset(inbuf + INBUF_SIZE, 0, AV_INPUT_BUFFER_PADDING_SIZE);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = av_find_best_stream(fmt_ctx, AVMEDIA_TYPE_VIDEO, <span class="number">-1</span>, <span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not find %s stream in input file '%s'\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                av_get_media_type_string(AVMEDIA_TYPE_VIDEO), filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream_index = ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    st = fmt_ctx-&gt;streams[stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* find decoder for the stream */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    codec = avcodec_find_decoder(st-&gt;codecpar-&gt;codec_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!codec) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to find %s codec\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                av_get_media_type_string(AVMEDIA_TYPE_VIDEO));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> AVERROR(EINVAL);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* find the MPEG-1 video decoder */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    codec = avcodec_find_decoder(AV_CODEC_ID_MPEG1VIDEO);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if (!codec) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        fprintf(stderr, "Codec not found\n");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        exit(1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c = avcodec_alloc_context3(<span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate video codec context\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* Copy codec parameters from input stream to output codec context */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> ((ret = avcodec_parameters_to_context(c, st-&gt;codecpar)) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to copy %s codec parameters to decoder context\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                av_get_media_type_string(AVMEDIA_TYPE_VIDEO));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if (codec-&gt;capabilities &amp; AV_CODEC_CAP_TRUNCATED)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        c-&gt;flags |= AV_CODEC_FLAG_TRUNCATED; // we do not send complete frames</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* For some codecs, such as msmpeg4 and mpeg4, width and height</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       MUST be initialized there because this information is not</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       available in the bitstream. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* open it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (avcodec_open2(c, codec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open codec\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    f = fopen(filename, "rb");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if (!f) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        fprintf(stderr, "Could not open %s\n", filename);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        exit(1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    img_convert_ctx = sws_getContext(c-&gt;<span class="built_in">width</span>, c-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     c-&gt;pix_fmt,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     c-&gt;<span class="built_in">width</span>, c-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     AV_PIX_FMT_RGB24,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     SWS_BICUBIC, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (img_convert_ctx == <span class="literal">NULL</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Cannot initialize the conversion context\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame = av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!frame) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate video frame\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame_count = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (av_read_frame(fmt_ctx, &amp;avpkt) &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        avpkt.size = fread(inbuf, 1, INBUF_SIZE, f);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        if (avpkt.size == 0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">            break;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* NOTE1: some codecs are stream based (mpegvideo, mpegaudio)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           and this is the only method to use them because you cannot</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           know the compressed data size before analysing it.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           BUT some other codecs (msmpeg4, mpeg4) are inherently frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           based, so you must call them with all the data for one</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           frame exactly. You must also initialize 'width' and</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           'height' before initializing them. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* NOTE2: some codecs allow the raw parameters (frame size,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           sample rate) to be changed at any frame. We handle this, so</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           you should also take care of it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* here, we use a stream based decoder (mpeg1video), so we</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">           feed decoder and see if it could decode a frame */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//avpkt.data = inbuf;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//while (avpkt.size &gt; 0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(avpkt.stream_index == stream_index)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (decode_write_frame(outfilename, c, img_convert_ctx, frame, &amp;frame_count, &amp;avpkt, <span class="number">0</span>) &lt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_packet_unref(&amp;avpkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* Some codecs, such as MPEG, transmit the I- and P-frame with a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       latency of one frame. You must do the following to have a</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">       chance to get the last frame of the video. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpkt.data = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpkt.<span class="built_in">size</span> = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    decode_write_frame(outfilename, c, img_convert_ctx, frame, &amp;frame_count, &amp;avpkt, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(f);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_close_input(&amp;fmt_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sws_freeContext(img_convert_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_free_context(&amp;c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_frame_free(&amp;frame);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">``` </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">39.</span>AAC编码</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 编码流程与视频相同</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 编码函数 avcodec_encodec_audio2</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">1.</span> 添加头文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">2.</span> 注册编解码器</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">3.</span> 通过名字去找到编码器</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">4.</span> 设置参数，打开编码器</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">5.</span> 获取数据包，进行编码</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/channel_layout.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/common.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/frame.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/samplefmt.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* check that a given sample format is supported by the encoder */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">check_sample_fmt</span><span class="params">(<span class="keyword">const</span> AVCodec *codec, <span class="keyword">enum</span> AVSampleFormat sample_fmt)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">enum</span> AVSampleFormat *p = codec-&gt;sample_fmts;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (*p != AV_SAMPLE_FMT_NONE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (*p == sample_fmt)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* just pick the highest supported samplerate */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">select_sample_rate</span><span class="params">(<span class="keyword">const</span> AVCodec *codec)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> best_samplerate = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!codec-&gt;supported_samplerates)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">44100</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p = codec-&gt;supported_samplerates;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (*p) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!best_samplerate || <span class="built_in">abs</span>(<span class="number">44100</span> - *p) &lt; <span class="built_in">abs</span>(<span class="number">44100</span> - best_samplerate))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            best_samplerate = *p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> best_samplerate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* select layout with the highest channel count */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">select_channel_layout</span><span class="params">(<span class="keyword">const</span> AVCodec *codec)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">uint64_t</span> *p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint64_t</span> best_ch_layout = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> best_nb_channels   = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!codec-&gt;channel_layouts)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> AV_CH_LAYOUT_STEREO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    p = codec-&gt;channel_layouts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (*p) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">int</span> nb_channels = av_get_channel_layout_nb_channels(*p);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (nb_channels &gt; best_nb_channels) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            best_ch_layout    = *p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            best_nb_channels = nb_channels;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> best_ch_layout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *filename;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> AVCodec *codec;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVCodecContext *c= <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVFrame *frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AVPacket pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> i, j, k, ret, got_output;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE *f;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint16_t</span> *samples;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">float</span> t, tincr;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (argc &lt;= <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: %s &lt;output file&gt;\n"</span>, argv[<span class="number">0</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filename = argv[<span class="number">1</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* register all the codecs */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* find the MP2 encoder */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    codec = avcodec_find_encoder(AV_CODEC_ID_MP2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!codec) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Codec not found\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c = avcodec_alloc_context3(codec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate audio codec context\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* put sample parameters */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c-&gt;bit_rate = <span class="number">64000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* check that the encoder supports s16 pcm input */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c-&gt;sample_fmt = AV_SAMPLE_FMT_S16;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!check_sample_fmt(codec, c-&gt;sample_fmt)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Encoder does not support sample format %s"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                av_get_sample_fmt_name(c-&gt;sample_fmt));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* select other audio parameters supported by the encoder */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c-&gt;sample_rate    = select_sample_rate(codec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    c-&gt;channel_layout = select_channel_layout(codec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    c-&gt;channels       = av_get_channel_layout_nb_channels(c-&gt;channel_layout);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* open it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (avcodec_open2(c, codec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open codec\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    f = fopen(filename, <span class="string">"wb"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!f) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not open %s\n"</span>, filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* frame containing input raw audio */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame = av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!frame) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate audio frame\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame-&gt;nb_samples     = c-&gt;frame_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame-&gt;format         = c-&gt;sample_fmt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame-&gt;channel_layout = c-&gt;channel_layout;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* allocate the data buffers */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = av_frame_get_buffer(frame, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate audio data buffers\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* encode a single tone sound */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    t = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tincr = <span class="number">2</span> * M_PI * <span class="number">440.0</span> / c-&gt;sample_rate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        av_init_packet(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.data = <span class="literal">NULL</span>; <span class="comment">// packet data will be allocated by the encoder</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        pkt.<span class="built_in">size</span> = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* make sure the frame is writable -- makes a copy if the encoder</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * kept a reference internally */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = av_frame_make_writable(frame);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        samples = (<span class="keyword">uint16_t</span>*)frame-&gt;data[<span class="number">0</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; c-&gt;frame_size; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            samples[<span class="number">2</span>*j] = (<span class="keyword">int</span>)(<span class="built_in">sin</span>(t) * <span class="number">10000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> (k = <span class="number">1</span>; k &lt; c-&gt;channels; k++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                samples[<span class="number">2</span>*j + k] = samples[<span class="number">2</span>*j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            t += tincr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/* encode the samples */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = avcodec_encode_audio2(c, &amp;pkt, frame, &amp;got_output);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error encoding audio frame\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (got_output) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fwrite(pkt.data, <span class="number">1</span>, pkt.<span class="built_in">size</span>, f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            av_packet_unref(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* get the delayed frames */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (got_output = <span class="number">1</span>; got_output; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ret = avcodec_encode_audio2(c, &amp;pkt, <span class="literal">NULL</span>, &amp;got_output);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error encoding frame\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (got_output) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fwrite(pkt.data, <span class="number">1</span>, pkt.<span class="built_in">size</span>, f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            av_packet_unref(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(f);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_frame_free(&amp;frame);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_free_context(&amp;c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">40.</span>SDL简介、编译与安装</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL，全称：Simple DirectMedia Layer</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 由C语言实现的跨平台的媒体开源库</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 多用于开发游戏、模拟器、媒体播放器等多媒体应用领域</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 官网：https:<span class="comment">//www.libsdl.org</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 安装编译：</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">1.</span> 下载SDL源码</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">2.</span> 生成Makefile configure --prefix=/usr/local  （--prefix即为安装目录在哪儿）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">3.</span> 安装 sudo make -j <span class="number">8</span> &amp;&amp; make install (-j <span class="number">8</span> 的是意思是开<span class="number">8</span>个线程同时进行操作，即内核*<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">41.</span>SDL的使用步骤</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 添加头文件 #include&lt;SDL.h&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 初始化SDL</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 退出SDL</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL主要用来渲染窗口</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_Init() / SDL——Quit()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_CreateWindow() / SDL_DestroyWindow()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_CreateRender() 创建渲染器，将图片渲染帧渲染到上边</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line">#include &lt;SDL.h&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Window *window = <span class="literal">NULL</span>:];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Init(SDL_INIT_VIDEO);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建窗口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    window = SDL_CreateWindow(<span class="string">"SDL2 Window"</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">640</span>, <span class="number">480</span>, SDL_WINDOW_SHOWN); <span class="comment">// name,x,y,height,width,option</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!window) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to Create Window!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __EXIT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyWindow(window);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    __EXIT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 退出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建的窗口实际上是在内存上分配的空间，要显示的话需要将内容推动到显卡驱动上</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line">- 执行：clang -g -o firstsdl firstsdl.c `pkg-<span class="built_in">config</span> --cflags --libs sdl2`</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">42.</span>SDL渲染窗口</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL_CreateRenderer / SDL_DestroyRenderer</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL_RenderClear</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL_RenderPresent 推送数据包</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Window *window = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Renderer *render = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Init(SDL_INIT_VIDEO);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建窗口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    window = SDL_CreateWindow(<span class="string">"SDL2 Window"</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">640</span>, <span class="number">480</span>, SDL_WINDOW_SHOWN); <span class="comment">// name,x,y,height,width,option</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!window) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to Create Window!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __EXIT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建渲染器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    render = SDL_CreateRenderer(window, <span class="number">-1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!render) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Log(<span class="string">"Faild to Create Render!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __DWINDOW;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_SetRenderDrawColor(render, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>); <span class="comment">// rgba</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 清屏缓存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderClear(render);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 推送到显卡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderPresent(render);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 这里是延迟，为了看到效果</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Delay(<span class="number">30000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 销毁窗口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__DWINDOW:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyWindow(window);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 退出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__EXIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line">- 执行：clang -g -o firstsdl firstsdl.c `pkg-<span class="built_in">config</span> --cflags --libs sdl2`</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">43.</span>SDL处理事件基本原理</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL将所有的事件都存放到一个队列中</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 所有对事件的操作，其实就是对队列的操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL事件分类</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_WIndowEvent: 窗口事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_KeyboardEvent: 键盘事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_MouseMotionEvent: 鼠标事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL事件处理</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_PollEvent 轮循队列处理事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_WaitEvent 事件触发机制</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> quit = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Window *window = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Renderer *render = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Init(SDL_INIT_VIDEO);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建窗口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    window = SDL_CreateWindow(<span class="string">"SDL2 Window"</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">640</span>, <span class="number">480</span>, SDL_WINDOW_SHOWN); <span class="comment">// name,x,y,height,width,option</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!window) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to Create Window!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __EXIT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建渲染器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    render = SDL_CreateRenderer(window, <span class="number">-1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!render) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Log(<span class="string">"Faild to Create Render!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __DWINDOW;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_SetRenderDrawColor(render, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>); <span class="comment">// rgba</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 清屏缓存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderClear(render);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 推送到显卡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderPresent(render);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_WaitEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">switch</span>(event.type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">case</span> SDL_QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                quit = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                SDL_Log(<span class="string">"event type is %d"</span>, event.type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">while</span>(quit);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 销毁窗口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__DWINDOW:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyWindow(window);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 退出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__EXIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>执行：clang -g -o eventsdl eventsdl.c <code>pkg-config --cflags --libs sdl2</code></li>
</ul>
<h4 id="44-纹理渲染"><a href="#44-纹理渲染" class="headerlink" title="44.纹理渲染"></a>44.纹理渲染</h4><ul>
<li>内存图像 –（渲染器）– 纹理 –（交换：显卡计算）– 窗口展示</li>
<li>纹理相关的API<ul>
<li>SDL_CreateTexture()<ul>
<li>format: YUV,GRB</li>
<li>access: Texture类型、Target，Stream</li>
</ul>
</li>
<li>SDL_DestroyTexture()</li>
</ul>
</li>
<li>渲染相关的API<ul>
<li>SDL_SetRenderTarget()  // 设置渲染目标</li>
<li>SDL_RenderClear()</li>
<li>SDL_RenderCopy()</li>
<li>SDL_RenderPresent() // 控制渲染</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> quit = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Rect <span class="built_in">rect</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.w = <span class="number">30</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.h = <span class="number">30</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Texture *texture = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Window *window = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Renderer *render = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 初始化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Init(SDL_INIT_VIDEO);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建窗口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    window = SDL_CreateWindow(<span class="string">"SDL2 Window"</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">640</span>, <span class="number">480</span>, SDL_WINDOW_SHOWN); <span class="comment">// name,x,y,height,width,option</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!window) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to Create Window!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __EXIT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建渲染器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    render = SDL_CreateRenderer(window, <span class="number">-1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!render) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Log(<span class="string">"Faild to Create Render!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __DWINDOW;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 创建纹理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    texture = SDL_CreateTexture(render, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, <span class="number">640</span>, <span class="number">480</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!texture) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Log(<span class="string">"Failed to Create Texture!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __RENDER;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_PollEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">switch</span>(event.type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">case</span> SDL_QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                quit = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                SDL_Log(<span class="string">"event type is %d"</span>, event.type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 创建方块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">rect</span>.x = rand() % <span class="number">600</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">rect</span>.y = rand() % <span class="number">450</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_SetRenderTarget(render, texture);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_SetRenderDrawColor(render, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_RenderClear(render);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 绘制方块</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_RenderDrawRect(render, &amp;<span class="built_in">rect</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_SetRenderDrawColor(render, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_RenderFillRect(render, &amp;<span class="built_in">rect</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 推送到显卡</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_SetRenderTarget(render, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_RenderCopy(render, texture, <span class="literal">NULL</span>, <span class="literal">NULL</span>); <span class="comment">// 拷贝描述文件到显卡驱动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_RenderPresent(render); <span class="comment">// 告诉显卡让其显示她已经按照描述文件绘制好的图像显示到屏幕上</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">while</span>(quit);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 销毁纹理</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__RENDER:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyTexture(texture);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 销毁窗口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__DWINDOW:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyWindow(window);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 退出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__EXIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<ul>
<li>执行：clang -g -o texturesdl texturesdl.c <code>pkg-config --cflags --libs sdl2</code></li>
</ul>
<h4 id="45-YUV播放器"><a href="#45-YUV播放器" class="headerlink" title="45.YUV播放器"></a>45.YUV播放器</h4><ul>
<li>创建线程<ul>
<li>SDL_CreateThread<ul>
<li>fn: 线程执行函数</li>
<li>name: 线程名</li>
<li>data: 执行函数参数</li>
</ul>
</li>
</ul>
</li>
<li>更新纹理<ul>
<li>SDL_UpdateTexture()</li>
<li>SDL_UpdateYUVTexture()  // 需要每一个分量的数据<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> bpp=<span class="number">12</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> screen_w=<span class="number">500</span>,screen_h=<span class="number">500</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_SIZE 4096000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//event message</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REFRESH_EVENT  (SDL_USEREVENT + 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUIT_EVENT  (SDL_USEREVENT + 2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> thread_exit=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">refresh_video_timer</span><span class="params">(<span class="keyword">void</span> *udata)</span></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    thread_exit=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span> (!thread_exit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        event.type = REFRESH_EVENT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_PushEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Delay(<span class="number">40</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    thread_exit=<span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//push quit event</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    event.type = QUIT_EVENT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_PushEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE *video_fd = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Rect <span class="built_in">rect</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Uint32 pixformat = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Window *win = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Renderer *renderer = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Texture *texture = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Thread *timer_thread = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> w_width = <span class="number">640</span>; w_height = <span class="number">480</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> video_width = <span class="number">320</span>, video_height = <span class="number">180</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Uint8 *video_pos = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Uint8 *video_end = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> remain_len = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> video_buff_len = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> blank space_len = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Uint8 *video_buf[BLOCK_SIZE];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *path = <span class="string">"test_yuv420p_320x180.yuv"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> yuv_frame_len = video_width * video_height * <span class="number">12</span> / <span class="number">8</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//initialize SDL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(SDL_Init(SDL_INIT_VIDEO)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>( <span class="built_in">stderr</span>, <span class="string">"Could not initialize SDL - %s\n"</span>, SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//creat window from SDL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    win = SDL_CreateWindow(<span class="string">"YUV Player"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           w_width, w_height,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(!win) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to create window, %s\n"</span>,SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    renderer = SDL_CreateRenderer(screen, <span class="number">-1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//IYUV: Y + U + V  (3 planes)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//YV12: Y + V + U  (3 planes)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    pixformat= SDL_PIXELFORMAT_IYUV;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//create texture for render</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    texture = SDL_CreateTexture(renderer,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                pixformat,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                SDL_TEXTUREACCESS_STREAMING,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                video_width,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                video_height);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//open yuv file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    video_fd = fopen(path, <span class="string">"r"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>( !video_fd )&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to open yuv file\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//read block data</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(video_buff_len = fread(video_buf, <span class="number">1</span>, BLOCK_SIZE, video_fd) &lt;= <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to read data from yuv file!\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//set video positon</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    video_pos = video_buf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    video_end = video_buf + video_buff_len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    blank_space_len = BLOCK_SIZE - video_buff_len;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    timer_thread = SDL_CreateThread(refresh_video_timer,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                    <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                    <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//Wait</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_WaitEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span>(event.type==REFRESH_EVENT)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//not enought data to render</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span>((video_pos + yuv_frame_len) &gt; video_end)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//have remain data, but there isn't space</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                remain_len = video_end - video_pos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(remain_len &amp;&amp; !black_space_len) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="comment">//copy data to header of buffer</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="built_in">memcpy</span>(video_buf, video_pos, remain_len);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    blank_space_len = BLOCK_SIZE - remain_len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    video_pos = video_buf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    video_end = video_buf + remain_len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//at the end of buffer, so rotate to header of buffer</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(video_end == (video_buf + BLOCK_SIZE))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    video_pos = video_buf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    video_end = video_buf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    blank_space_len = BLOCK_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//read data from yuv file to buffer</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span>(video_buff_len = fread(video_end, <span class="number">1</span>, blank_space_len, video_fd) &lt;= <span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"eof, exit thread!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    thread_exit = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">continue</span>;<span class="comment">// to wait event for exiting</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//reset video_end</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                video_end += video_buff_len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            SDL_UpdateTexture( texture, <span class="literal">NULL</span>, video_pos, video_width);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//FIX: If window is resize</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">rect</span>.x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">rect</span>.y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">rect</span>.w = w_width;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="built_in">rect</span>.h = w_height;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            SDL_RenderClear( renderer );</span></pre></td></tr><tr><td class="code"><pre><span class="line">            SDL_RenderCopy( renderer, texture, <span class="literal">NULL</span>, &amp;<span class="built_in">rect</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            SDL_RenderPresent( renderer );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.type==SDL_WINDOWEVENT)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">//If Resize</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            SDL_GetWindowSize(win, &amp;w_width, &amp;w_height);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.type==SDL_QUIT)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            thread_exit=<span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.type==QUIT_EVENT)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;<span class="keyword">while</span> ( <span class="number">1</span> );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">__FAIL:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//close file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(video_fd)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fclose(video_fd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">46.</span>SDL播放音频</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 将多媒体文件分解成音频轨、视频轨、字幕轨等等（解复用）</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 视频轨解码成yuv数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 将yuv数据输送给SDL</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL将yuv数据输送到显卡</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 显卡显示到屏幕</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 音频轨解码成pcm数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 将pcm数据输送给SDL</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL驱动声卡将声音播放出来</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 播放音频基本流程</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">1.</span> 打开音频设备</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">2.</span> 设置音频参数 <span class="comment">// 通道数、采样率、采样大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">3.</span> 向声卡喂数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">4.</span> 播放音频</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">5.</span> 关闭设备</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 播放音频的基本原则</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 声卡向你要数据而不是你主动推给声卡</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 数据的多少是由音频参数决定的</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL音频API</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_OpenAudio / SDL_CloseAudio</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_PauseAudio 暂停播放</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - SDL_MixAudio  混音</span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavutil/log.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">47.</span>PCM音频播放器</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BLOCK_SIZE 4096000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">size_t</span> buffer_len = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Uint8 *audio_buf = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Uint8 *audio_pos = <span class="literal">NULL</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 声卡主动读取数据的回调函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> read_audio_data(<span class="keyword">void</span> *udata, Uint8 *stream, <span class="keyword">int</span> len) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 判断当前文件数据是否读区完</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (buffer_len == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 清空声卡SDL缓存数据，防止音质变差</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_memset(stream, <span class="number">0</span>, len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 判断读取数据，如果需要的数据小于缓存数据，则取读取数据大小，反之取我们定义的缓冲大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    len = (len &lt; buffer_len) ? len : buffer_len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 混音拷贝</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_MixAudio(stream, audio_pos, len, SDL_MIX_MAXVOLUME);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 修改读取之后的缓冲区的位置信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    audio_pos += len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    buffer_len -= len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span> *path = <span class="string">"./1.pcm"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FILE* audio_fd = <span class="literal">NULL</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 初始化SDL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (SDL_Init(SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Log(<span class="string">"Failed to initial!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 打开pcm文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    audio_fd = fopen(path, <span class="string">"r"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!audio_fd) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Log(<span class="string">"Failed to open audio file!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 分配空间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    audio_buf = (Uint8*)<span class="built_in">malloc</span>(BLOCK_SIZE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!audio_buf) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Log(<span class="string">"Failed to alloc memory!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 打开音频设备</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_AudioSpec spec;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    spec.freq = <span class="number">44100</span>; <span class="comment">// 采样率</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    spec.channels = <span class="number">2</span>; <span class="comment">// 通道数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    spec.format = AUDIO_S16SYS; <span class="comment">// 采样大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    spec.silence = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    spec.callback = read_audio_data; <span class="comment">// 声卡要数据的回调函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    spec.userdata = <span class="literal">NULL</span>; <span class="comment">// 声卡回调参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(SDL_OpenAudio(&amp;spec, <span class="literal">NULL</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SDL_Log(<span class="string">"Failed to open audio device!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 启动播放</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_PauseAudio(<span class="number">0</span>); <span class="comment">// 0是播放，1是暂停</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 循环读取文件数据到缓冲区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        buffer_len = fread(audio_buf, <span class="number">1</span>, BLOCK_SIZE, audio_fd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        audio_pos = audio_buf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> (audio_pos &lt; (audio_buf + buffer_len)) &#123; <span class="comment">// 判断buffer里是否还有数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            SDL_Delay(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">while</span> (buffer_len != <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 关闭音频设备</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_CloseAudio();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 关闭SDL和pcm文件、释放空间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__FAIL:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (audio_buf) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">free</span>(audio_buf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (audio_fd) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fclose(audio_fd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line">- 执行：clang -g -o pcmplay pcmplay.c `pkg-<span class="built_in">config</span> --cflags --libs sdl2`</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">48.</span>实现一个最简单的播放器</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 只实现播放</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 将ffmpeg与SDL结合</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 通过ffmpeg解码视频数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 通过SDL进行渲染</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// compatibility with newer API</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LIBAVCODEC_VERSION_INT &lt; AV_VERSION_INT(55,28,1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> av_frame_alloc avcodec_alloc_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> av_frame_free avcodec_free_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFormatContext *pFormatCtx = <span class="literal">NULL</span>; <span class="comment">//for opening multi-media file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             i, videoStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *pCodecCtxOrig = <span class="literal">NULL</span>; <span class="comment">//codec context</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *pCodecCtx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">SwsContext</span> *<span class="title">sws_ctx</span> = <span class="title">NULL</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodec         *pCodec = <span class="literal">NULL</span>; <span class="comment">// the codecer</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFrame         *pFrame = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket        packet;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             frameFinished;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">float</span>           aspect_ratio;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPicture  	  *pict  = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Rect        <span class="built_in">rect</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Uint32 	  pixformat; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for render</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Window 	  *win = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Renderer    *renderer = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Texture     *texture = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//set defualt size of window </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> w_width = <span class="number">640</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> w_height = <span class="number">480</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//fprintf(stderr, "Usage: command &lt;file&gt;\n");</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Usage: command &lt;file&gt;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//fprintf(stderr, "Could not initialize SDL - %s\n", SDL_GetError());</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Could not initialize SDL - %s\n"</span>, SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//Register all formats and codecs</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Open video file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avformat_open_input(&amp;pFormatCtx, argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="literal">NULL</span>)!=<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to open video file!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Couldn't open file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Retrieve stream information</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>)&lt;<span class="number">0</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to find stream infomation!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Couldn't find stream information</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Dump information about file onto standard error</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_dump_format(pFormatCtx, <span class="number">0</span>, argv[<span class="number">1</span>], <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Find the first video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  videoStream=<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;pFormatCtx-&gt;nb_streams; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type==AVMEDIA_TYPE_VIDEO) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      videoStream=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(videoStream==<span class="number">-1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Din't find a video stream!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;<span class="comment">// Didn't find a video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Get a pointer to the codec context for the video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pCodecCtxOrig=pFormatCtx-&gt;streams[videoStream]-&gt;codec;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Find the decoder for the video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pCodec=avcodec_find_decoder(pCodecCtxOrig-&gt;codec_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pCodec==<span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Unsupported codec!\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Codec not found</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Copy context</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pCodecCtx = avcodec_alloc_context3(pCodec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avcodec_copy_context(pCodecCtx, pCodecCtxOrig) != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION,  <span class="string">"Couldn't copy codec context"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;<span class="comment">// Error copying codec context</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Open codec</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avcodec_open2(pCodecCtx, pCodec, <span class="literal">NULL</span>)&lt;<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to open decoder!\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Could not open codec</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Allocate video frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pFrame=av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  w_width = pCodecCtx-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  w_height = pCodecCtx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  win = SDL_CreateWindow( <span class="string">"Media Player"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		          SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  	  SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			  w_width, w_height,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			  SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);	  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!win)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to create window by SDL"</span>);  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  renderer = SDL_CreateRenderer(win, <span class="number">-1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!renderer)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to create Renderer by SDL"</span>);  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pixformat = SDL_PIXELFORMAT_IYUV;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  texture = SDL_CreateTexture(renderer,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    pixformat, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    SDL_TEXTUREACCESS_STREAMING,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    w_width, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    w_height);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// initialize SWS context for software scaling</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  sws_ctx = sws_getContext(pCodecCtx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   pCodecCtx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   pCodecCtx-&gt;pix_fmt,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   pCodecCtx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   pCodecCtx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   AV_PIX_FMT_YUV420P,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   SWS_BILINEAR,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   <span class="literal">NULL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">			   );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pict = (AVPicture*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AVPicture));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  avpicture_alloc(pict, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		  AV_PIX_FMT_YUV420P, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		  pCodecCtx-&gt;<span class="built_in">width</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		  pCodecCtx-&gt;<span class="built_in">height</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Read frames and save first five frames to disk</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(av_read_frame(pFormatCtx, &amp;packet)&gt;=<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Is this a packet from the video stream?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet.stream_index==videoStream) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// Decode video frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      avcodec_decode_video2(pCodecCtx, pFrame, &amp;frameFinished, &amp;packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// Did we get a video frame?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(frameFinished) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// Convert the image into YUV format that SDL uses</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	sws_scale(sws_ctx, (<span class="keyword">uint8_t</span> <span class="keyword">const</span> * <span class="keyword">const</span> *)pFrame-&gt;data,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  pFrame-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  pict-&gt;data, pict-&gt;linesize);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_UpdateYUVTexture(texture, <span class="literal">NULL</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">			     pict-&gt;data[<span class="number">0</span>], pict-&gt;linesize[<span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">			     pict-&gt;data[<span class="number">1</span>], pict-&gt;linesize[<span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">			     pict-&gt;data[<span class="number">2</span>], pict-&gt;linesize[<span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// Set Size of Window</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">rect</span>.x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">rect</span>.y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">rect</span>.w = pCodecCtx-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">rect</span>.h = pCodecCtx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_RenderClear(renderer);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_RenderCopy(renderer, texture, <span class="literal">NULL</span>, &amp;<span class="built_in">rect</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_RenderPresent(renderer);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Free the packet that was allocated by av_read_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_free_packet(&amp;packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    SDL_Event event;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    SDL_PollEvent(&amp;event);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    switch(event.type) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    case SDL_QUIT:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      goto __QUIT;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      break;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    default:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      break;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">__QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">__FAIL:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Free the YUV frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pFrame)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_frame_free(&amp;pFrame);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Close the codec</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pCodecCtx)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_close(pCodecCtx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pCodecCtxOrig)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_close(pCodecCtxOrig);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Close the video file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pFormatCtx)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_close_input(&amp;pFormatCtx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pict)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpicture_free(pict);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">free</span>(pict);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(win)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyWindow(win);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(renderer)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyRenderer(renderer);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(texture)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyTexture(texture);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ul>
</li>
<li>执行：clang -g -o player2va player2va.c <code>pkg-config --cflags --libs sdl2 libavutil libavformat libavcodec libswscale</code></li>
</ul>
<h4 id="49-实现一个最简单的播放器（支持视频和音频）"><a href="#49-实现一个最简单的播放器（支持视频和音频）" class="headerlink" title="49.实现一个最简单的播放器（支持视频和音频）"></a>49.实现一个最简单的播放器（支持视频和音频）</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// compatibility with newer API</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LIBAVCODEC_VERSION_INT &lt; AV_VERSION_INT(55,28,1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> av_frame_alloc avcodec_alloc_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> av_frame_free avcodec_free_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDL_AUDIO_BUFFER_SIZE 1024</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_AUDIO_FRAME_SIZE 192000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SwrContext</span> *<span class="title">audio_convert_ctx</span> = <span class="title">NULL</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PacketQueue</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *first_pkt, *last_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> nb_packets;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_mutex *mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_cond *cond;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; PacketQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">PacketQueue audioq;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> quit = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">packet_queue_init</span><span class="params">(PacketQueue *q)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(q, <span class="number">0</span>, <span class="keyword">sizeof</span>(PacketQueue));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;mutex = SDL_CreateMutex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;cond = SDL_CreateCond();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packet_queue_put</span><span class="params">(PacketQueue *q, AVPacket *pkt)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(av_dup_packet(pkt) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1 = av_malloc(<span class="keyword">sizeof</span>(AVPacketList));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!pkt1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1-&gt;pkt = *pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1-&gt;next = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!q-&gt;last_pkt) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q-&gt;first_pkt = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;<span class="keyword">else</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q-&gt;last_pkt-&gt;next = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;last_pkt = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;nb_packets++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;<span class="built_in">size</span> += pkt1-&gt;pkt.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_CondSignal(q-&gt;cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packet_queue_get</span><span class="params">(PacketQueue *q, AVPacket *pkt, <span class="keyword">int</span> block)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    pkt1 = q-&gt;first_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pkt1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;first_pkt = pkt1-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (!q-&gt;first_pkt)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	q-&gt;last_pkt = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;nb_packets--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;<span class="built_in">size</span> -= pkt1-&gt;pkt.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      *pkt = pkt1-&gt;pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free(pkt1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!block) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondWait(q-&gt;cond, q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">audio_decode_frame</span><span class="params">(AVCodecContext *aCodecCtx, <span class="keyword">uint8_t</span> *audio_buf, <span class="keyword">int</span> buf_size)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> AVPacket pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> *audio_pkt_data = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span> audio_pkt_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> AVFrame frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> len1, data_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(audio_pkt_size &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">int</span> got_frame = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      len1 = avcodec_decode_audio4(aCodecCtx, &amp;frame, &amp;got_frame, &amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(len1 &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* if error, skip frame */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	audio_pkt_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      audio_pkt_data += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      audio_pkt_size -= len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(got_frame) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">//fprintf(stderr, "channels:%d, nb_samples:%d, sample_fmt:%d \n", aCodecCtx-&gt;channels, frame.nb_samples, aCodecCtx-&gt;sample_fmt);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	data_size = av_samples_get_buffer_size(NULL, </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       aCodecCtx-&gt;channels,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       frame.nb_samples,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       aCodecCtx-&gt;sample_fmt,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">        */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	data_size = <span class="number">2</span> * <span class="number">2</span> * frame.nb_samples;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">	assert(data_size &lt;= buf_size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	swr_convert(audio_convert_ctx,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    &amp;audio_buf,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    MAX_AUDIO_FRAME_SIZE*<span class="number">3</span>/<span class="number">2</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **)frame.data,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    frame.nb_samples);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//memcpy(audio_buf, frame.data[0], data_size);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(data_size &lt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* No data yet, get more frames */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* We have data, return it and come back for more later */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> data_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pkt.data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free_packet(&amp;pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet_queue_get(&amp;audioq, &amp;pkt, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    audio_pkt_data = pkt.data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    audio_pkt_size = pkt.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">audio_callback</span><span class="params">(<span class="keyword">void</span> *userdata, Uint8 *stream, <span class="keyword">int</span> len)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext *aCodecCtx = (AVCodecContext *)userdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> len1, audio_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="keyword">uint8_t</span> audio_buf[(MAX_AUDIO_FRAME_SIZE * <span class="number">3</span>) / <span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> audio_buf_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> audio_buf_index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(audio_buf_index &gt;= audio_buf_size) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* We have already sent all our data; get more */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      audio_size = audio_decode_frame(aCodecCtx, audio_buf, <span class="keyword">sizeof</span>(audio_buf));</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(audio_size &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* If error, output silence */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	audio_buf_size = <span class="number">1024</span>; <span class="comment">// arbitrary?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memset</span>(audio_buf, <span class="number">0</span>, audio_buf_size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	audio_buf_size = audio_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      audio_buf_index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    len1 = audio_buf_size - audio_buf_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(len1 &gt; len)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      len1 = len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"index=%d, len1=%d, len=%d\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    audio_buf_index,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    len,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    len1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">memcpy</span>(stream, (<span class="keyword">uint8_t</span> *)audio_buf + audio_buf_index, len1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    len -= len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    audio_buf_index += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>  		  ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             i, videoStream, audioStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFormatContext *pFormatCtx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for video decode</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *pCodecCtxOrig = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *pCodecCtx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodec         *pCodec = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">SwsContext</span> *<span class="title">sws_ctx</span> = <span class="title">NULL</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPicture	  *pict = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFrame         *pFrame = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket        packet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             frameFinished;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for audio decode</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *aCodecCtxOrig = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *aCodecCtx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodec         *aCodec = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int64_t</span> in_channel_layout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int64_t</span> out_channel_layout;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for video render</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>		  w_width = <span class="number">640</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> 		  w_height = <span class="number">480</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             pixformat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Rect        <span class="built_in">rect</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Window      *win;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Renderer    *renderer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Texture     *texture;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for event</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Event       event;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for audio</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_AudioSpec   wanted_spec, spec;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Usage: command &lt;file&gt;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Register all formats and codecs</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Could not initialize SDL - %s\n"</span>, SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Open video file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avformat_open_input(&amp;pFormatCtx, argv[<span class="number">1</span>], <span class="literal">NULL</span>, <span class="literal">NULL</span>)!=<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to open multi-media file"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Couldn't open file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Retrieve stream information</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>)&lt;<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Couldn't find stream information "</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Dump information about file onto standard error</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_dump_format(pFormatCtx, <span class="number">0</span>, argv[<span class="number">1</span>], <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Find the first video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  videoStream=<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  audioStream=<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;pFormatCtx-&gt;nb_streams; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type==AVMEDIA_TYPE_VIDEO &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       videoStream &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      videoStream=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type==AVMEDIA_TYPE_AUDIO &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       audioStream &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      audioStream=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(videoStream==<span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">" Didn't find a video stream "</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Didn't find a video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(audioStream==<span class="number">-1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">" Didn't find a audio stream "</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Didn't find a video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line">  aCodecCtxOrig=pFormatCtx-&gt;streams[audioStream]-&gt;codec;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  aCodec = avcodec_find_decoder(aCodecCtxOrig-&gt;codec_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!aCodec) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Unsupported codec! "</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Didn't find a video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Copy context</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  aCodecCtx = avcodec_alloc_context3(aCodec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avcodec_copy_context(aCodecCtx, aCodecCtxOrig) != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Couldn't copy codec context! "</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL; <span class="comment">// Didn't find a video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Set audio settings from codec info</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  wanted_spec.freq = aCodecCtx-&gt;sample_rate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  wanted_spec.format = AUDIO_S16SYS;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  wanted_spec.channels = aCodecCtx-&gt;channels;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  wanted_spec.silence = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  wanted_spec.samples = SDL_AUDIO_BUFFER_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  wanted_spec.callback = audio_callback;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  wanted_spec.userdata = aCodecCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(SDL_OpenAudio(&amp;wanted_spec, &amp;spec) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to open audio device - %s!"</span>, SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  avcodec_open2(aCodecCtx, aCodec, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  packet_queue_init(&amp;audioq);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  in_channel_layout = av_get_default_channel_layout(aCodecCtx-&gt;channels);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  out_channel_layout = in_channel_layout; <span class="comment">//AV_CH_LAYOUT_STEREO;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"in layout:%lld, out layout:%lld \n"</span>, in_channel_layout, out_channel_layout);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  audio_convert_ctx = swr_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(audio_convert_ctx)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    swr_alloc_set_opts(audio_convert_ctx,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       out_channel_layout,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       AV_SAMPLE_FMT_S16,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       aCodecCtx-&gt;sample_rate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       in_channel_layout,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       aCodecCtx-&gt;sample_fmt,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       aCodecCtx-&gt;sample_rate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  swr_init(audio_convert_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_PauseAudio(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Get a pointer to the codec context for the video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pCodecCtxOrig=pFormatCtx-&gt;streams[videoStream]-&gt;codec;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Find the decoder for the video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pCodec=avcodec_find_decoder(pCodecCtxOrig-&gt;codec_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pCodec==<span class="literal">NULL</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Unsupported codec!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Copy context</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pCodecCtx = avcodec_alloc_context3(pCodec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avcodec_copy_context(pCodecCtx, pCodecCtxOrig) != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to copy context of codec!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Open codec</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avcodec_open2(pCodecCtx, pCodec, <span class="literal">NULL</span>)&lt;<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to open audio decoder!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Allocate video frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pFrame=av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  w_width = pCodecCtx-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  w_height = pCodecCtx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"width:%d, height:%d\n"</span>, w_width, w_height);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  win = SDL_CreateWindow(<span class="string">"Media Player"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			 SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			 SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			 w_width, w_height,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			 SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!win)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to create window!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  renderer = SDL_CreateRenderer(win, <span class="number">-1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!renderer)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to create renderer!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pixformat = SDL_PIXELFORMAT_IYUV;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  texture = SDL_CreateTexture(renderer, </span></pre></td></tr><tr><td class="code"><pre><span class="line">                              pixformat,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  			      SDL_TEXTUREACCESS_STREAMING,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			      w_width,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			      w_height);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!texture)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, <span class="string">"Failed to create Texture!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// initialize SWS context for software scaling</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  sws_ctx = sws_getContext(pCodecCtx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   pCodecCtx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   pCodecCtx-&gt;pix_fmt,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   pCodecCtx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   pCodecCtx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   AV_PIX_FMT_YUV420P,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   SWS_BILINEAR,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pict = (AVPicture*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AVPicture));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  avpicture_alloc(pict,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  AV_PIX_FMT_YUV420P,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  pCodecCtx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  pCodecCtx-&gt;<span class="built_in">height</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Read frames and save first five frames to disk</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(av_read_frame(pFormatCtx, &amp;packet)&gt;=<span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Is this a packet from the video stream?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet.stream_index==videoStream) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// Decode video frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      avcodec_decode_video2(pCodecCtx, pFrame, &amp;frameFinished, &amp;packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// Did we get a video frame?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(frameFinished) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">// Convert the image into YUV format that SDL uses	</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	sws_scale(sws_ctx, (<span class="keyword">uint8_t</span> <span class="keyword">const</span> * <span class="keyword">const</span> *)pFrame-&gt;data,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  pFrame-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		  pict-&gt;data, pict-&gt;linesize);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_UpdateYUVTexture(texture, <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                             pict-&gt;data[<span class="number">0</span>], pict-&gt;linesize[<span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">			     pict-&gt;data[<span class="number">1</span>], pict-&gt;linesize[<span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">			     pict-&gt;data[<span class="number">2</span>], pict-&gt;linesize[<span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">rect</span>.x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">rect</span>.y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">rect</span>.w = pCodecCtx-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">rect</span>.h = pCodecCtx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_RenderClear(renderer);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_RenderCopy(renderer, texture, <span class="literal">NULL</span>, &amp;<span class="built_in">rect</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_RenderPresent(renderer);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	av_free_packet(&amp;packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(packet.stream_index==audioStream) &#123; <span class="comment">//for audio</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      packet_queue_put(&amp;audioq, &amp;packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free_packet(&amp;packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Free the packet that was allocated by av_read_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_PollEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">switch</span>(event.type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> SDL_QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      quit = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">goto</span> __QUIT; </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">__QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">__FAIL:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Free the YUV frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pFrame)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_frame_free(&amp;pFrame);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Close the codecs</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pCodecCtxOrig)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_close(pCodecCtxOrig);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pCodecCtx)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_close(pCodecCtx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(aCodecCtxOrig) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_close(aCodecCtxOrig);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(aCodecCtx) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_close(aCodecCtx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Close the video file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pFormatCtx)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avformat_close_input(&amp;pFormatCtx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pict)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpicture_free(pict);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">free</span>(pict);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(win)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyWindow(win);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(renderer)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyRenderer(renderer);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(texture)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_DestroyTexture(texture);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">``` </span></pre></td></tr><tr><td class="code"><pre><span class="line">- 执行：clang -g -o player2va player2va.c `pkg-<span class="built_in">config</span> --cflags --libs sdl2 libavutil libavformat libavcodec libswscale libswrsample`</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">50.</span>多线程与锁</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 多线程的好处</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 充分利用CPU资源【管理】 </span></pre></td></tr><tr><td class="code"><pre><span class="line">- 线程的互斥与同步</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 互斥（抢锁的钥匙）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 同步（信号机制）</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 锁与信号量</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 锁的种类</span></pre></td></tr><tr><td class="code"><pre><span class="line">        - <span class="number">1.</span> 读写锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">        - <span class="number">2.</span> 自旋锁（等待，要短时间）</span></pre></td></tr><tr><td class="code"><pre><span class="line">        - <span class="number">3.</span> 可重入锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 通过信号进行同步</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL创建/等待线程</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">1.</span> SDL_CreateThread</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">2.</span> SDL_WaitThread</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">1.</span> SDL_CreateMutex / SDL_DestroyMutex</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">2.</span> SDL_LockMutex / SDL_UnlockMutex</span></pre></td></tr><tr><td class="code"><pre><span class="line">- SDL条件变量（信号量）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">1.</span> SDL_CreateCond / SDL_DestroyCond</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">2.</span> SDL_CondWait / SDL_CondSignal</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">51.</span>锁与条件变量的使用</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_REFRESH_EVENT (SDL_USEREVENT)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_QUIT_EVENT (SDL_USEREVENT + 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIDEO_PICTURE_QUEUE_SIZE 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 队列的结构体</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PacketQueue</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *first_pkt, *last_pkt; <span class="comment">// 队列的头和尾,ffmpeg提供的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> nb_packets; <span class="comment">// 有多少个包</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>; <span class="comment">// 存储空间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_mutex *mutex; <span class="comment">// 互斥</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_cond *cond; <span class="comment">// 同步，信号量</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; PacketQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">packet_queue_init</span><span class="params">(PacketQueue *q)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(q, <span class="number">0</span>, <span class="keyword">sizeof</span>(PacketQueue));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;mutex = SDL_CreateMutex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;cond = SDL_CreateCond();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 入队函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packet_queue_put</span><span class="params">(PacketQueue *q, AVPacket *pkt)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *pkt1; <span class="comment">// 引用计数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(av_dup_packet(pkt) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 分配内存空间，构造队列中的一个元素，然后将我们的元素插入</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1 = av_malloc(<span class="keyword">sizeof</span>(AVPacketList));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!pkt1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1-&gt;pkt = *pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1-&gt;next = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 加锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 判读是不是第一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!q-&gt;last_pkt)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q-&gt;first_pkt = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    q-&gt;last_pkt-&gt;next = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;last_pkt = pkt1; <span class="comment">// 移动队尾指针</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;nb_packets++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;<span class="built_in">size</span> += pkt1-&gt;pkt.<span class="built_in">size</span>; <span class="comment">// 统计包大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_CondSignal(q-&gt;cond); <span class="comment">// 发送信号，让等待的线程唤醒</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(q-&gt;mutex); <span class="comment">// 解锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 出队函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packet_queue_get</span><span class="params">(PacketQueue *q, AVPacket *pkt, <span class="keyword">int</span> block)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(q-&gt;mutex); <span class="comment">// 加锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123; <span class="comment">// 死循环等待</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(global_video_state-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    pkt1 = q-&gt;first_pkt; <span class="comment">// 拿到队列头中取元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pkt1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;first_pkt = pkt1-&gt;next; <span class="comment">// 往后移动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (!q-&gt;first_pkt) <span class="comment">// 队列为空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	q-&gt;last_pkt = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;nb_packets--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;<span class="built_in">size</span> -= pkt1-&gt;pkt.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      *pkt = pkt1-&gt;pkt; <span class="comment">// 取数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free(pkt1); <span class="comment">// 释放资源</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!block) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondWait(q-&gt;cond, q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(q-&gt;mutex); <span class="comment">// 解锁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">``` </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">52.</span>播放器线程模型</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 主线程（对输入参数处理，对事件处理，对视频渲染），一般不做复杂逻辑</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```<span class="built_in">text</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                              ---------&gt;视频流队列&lt;----------</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              ^                             |</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              |                             |</span></pre></td></tr><tr><td class="code"><pre><span class="line">输入文件 --- [创建线程] --- 解复用 --- [创建线程] --- 视频解码线程</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              |                             |</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              V                             |</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          音频流队列 --------------------------------------音频渲染(SDL)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                            |</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                            V</span></pre></td></tr><tr><td class="code"><pre><span class="line">视频渲染 --------------------------------------------&gt;解码视频队列</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// tutorial04.c</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// A pedagogical video player that will stream through every video frame as fast as it can,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// and play audio (out of sync).</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Code based on FFplay, Copyright (c) 2003 Fabrice Bellard, </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// and a tutorial by Martin Bohme (boehme@inb.uni-luebeckREMOVETHIS.de)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Tested on Gentoo, CVS version 5/01/07 compiled with GCC 4.1.1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// With updates from https://github.com/chelyaev/ffmpeg-tutorial</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Updates tested on:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// LAVC 54.59.100, LAVF 54.29.104, LSWS 2.1.101, SDL 1.2.15</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// on GCC 4.7.2 in Debian February 2015</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Use</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// gcc -o tutorial04 tutorial04.c -lavformat -lavcodec -lswscale -lz -lm `sdl-config --cflags --libs`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// to build (assuming libavformat and libavcodec are correctly installed, </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// and assuming you have sdl-config. Please refer to SDL docs for your installation.)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Run using</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// tutorial04 myvideofile.mpg</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// to play the video stream on your screen.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// compatibility with newer API</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LIBAVCODEC_VERSION_INT &lt; AV_VERSION_INT(55,28,1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> av_frame_alloc avcodec_alloc_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> av_frame_free avcodec_free_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDL_AUDIO_BUFFER_SIZE 1024</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_AUDIO_FRAME_SIZE 192000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_AUDIOQ_SIZE (5 * 16 * 1024)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VIDEOQ_SIZE (5 * 256 * 1024)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_REFRESH_EVENT (SDL_USEREVENT)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_QUIT_EVENT (SDL_USEREVENT + 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIDEO_PICTURE_QUEUE_SIZE 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PacketQueue</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *first_pkt, *last_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> nb_packets;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_mutex *mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_cond *cond;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; PacketQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VideoPicture</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPicture *pict;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span>, <span class="built_in">height</span>; <span class="comment">/* source height &amp; width */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> allocated;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; VideoPicture;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VideoState</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for multi-media file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">char</span>            filename[<span class="number">1024</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFormatContext *pFormatCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             videoStream, audioStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for audio</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVStream        *audio_st;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *audio_ctx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  PacketQueue     audioq;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">uint8_t</span>         audio_buf[(MAX_AUDIO_FRAME_SIZE * <span class="number">3</span>) / <span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>    audio_buf_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>    audio_buf_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFrame         audio_frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket        audio_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">uint8_t</span>         *audio_pkt_data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             audio_pkt_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">SwrContext</span> *<span class="title">audio_swr_ctx</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for video</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVStream        *video_st;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *video_ctx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  PacketQueue     videoq;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">SwsContext</span> *<span class="title">sws_ctx</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture    pictq[VIDEO_PICTURE_QUEUE_SIZE];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             pictq_size, pictq_rindex, pictq_windex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//for thread</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_mutex       *pictq_mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_cond        *pictq_cond;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Thread      *parse_tid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Thread      *video_tid;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             quit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; VideoState;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">SDL_mutex       *texture_mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SDL_Window      *win;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SDL_Renderer    *renderer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SDL_Texture     *texture;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">FILE            *audiofd = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">FILE            *audiofd1 = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Since we only have one decoding thread, the Big Struct</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">   can be global in case we need it. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">VideoState *global_video_state;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">packet_queue_init</span><span class="params">(PacketQueue *q)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(q, <span class="number">0</span>, <span class="keyword">sizeof</span>(PacketQueue));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;mutex = SDL_CreateMutex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;cond = SDL_CreateCond();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packet_queue_put</span><span class="params">(PacketQueue *q, AVPacket *pkt)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(av_dup_packet(pkt) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1 = av_malloc(<span class="keyword">sizeof</span>(AVPacketList));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!pkt1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1-&gt;pkt = *pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1-&gt;next = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!q-&gt;last_pkt)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q-&gt;first_pkt = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    q-&gt;last_pkt-&gt;next = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;last_pkt = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;nb_packets++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;<span class="built_in">size</span> += pkt1-&gt;pkt.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//fprintf(stderr, "enqueue, packets:%d, send cond signal\n", q-&gt;nb_packets);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_CondSignal(q-&gt;cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packet_queue_get</span><span class="params">(PacketQueue *q, AVPacket *pkt, <span class="keyword">int</span> block)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(global_video_state-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"quit from queue_get\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    pkt1 = q-&gt;first_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pkt1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;first_pkt = pkt1-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (!q-&gt;first_pkt)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	q-&gt;last_pkt = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;nb_packets--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;<span class="built_in">size</span> -= pkt1-&gt;pkt.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      *pkt = pkt1-&gt;pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free(pkt1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!block) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"queue is empty, so wait a moment and wait a cond signal\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondWait(q-&gt;cond, q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">audio_decode_frame</span><span class="params">(VideoState *is, <span class="keyword">uint8_t</span> *audio_buf, <span class="keyword">int</span> buf_size)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> len1, data_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket *pkt = &amp;is-&gt;audio_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(is-&gt;audio_pkt_size &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">int</span> got_frame = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      len1 = avcodec_decode_audio4(is-&gt;audio_ctx, &amp;is-&gt;audio_frame, &amp;got_frame, pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(len1 &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* if error, skip frame */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Failed to decode audio ......\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;audio_pkt_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      data_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(got_frame) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	fprintf(stderr, "auido: channels:%d, nb_samples:%d, sample_fmt:%d\n",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">			is-&gt;audio_ctx-&gt;channels,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">			is-&gt;audio_frame.nb_samples,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">			is-&gt;audio_ctx-&gt;sample_fmt);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	data_size = av_samples_get_buffer_size(NULL, </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       is-&gt;audio_ctx-&gt;channels,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       is-&gt;audio_frame.nb_samples,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       is-&gt;audio_ctx-&gt;sample_fmt,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	data_size = <span class="number">2</span> * is-&gt;audio_frame.nb_samples * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	assert(data_size &lt;= buf_size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//memcpy(audio_buf, is-&gt;audio_frame.data[0], data_size);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	swr_convert(is-&gt;audio_swr_ctx,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &amp;audio_buf,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        MAX_AUDIO_FRAME_SIZE*<span class="number">3</span>/<span class="number">2</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **)is-&gt;audio_frame.data,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        is-&gt;audio_frame.nb_samples);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	fwrite(audio_buf, <span class="number">1</span>, data_size, audiofd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fflush(audiofd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;audio_pkt_data += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;audio_pkt_size -= len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(data_size &lt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* No data yet, get more frames */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* We have data, return it and come back for more later */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> data_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pkt-&gt;data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free_packet(pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"will quit program......\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* next packet */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet_queue_get(&amp;is-&gt;audioq, pkt, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_pkt_data = pkt-&gt;data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_pkt_size = pkt-&gt;<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">audio_callback</span><span class="params">(<span class="keyword">void</span> *userdata, Uint8 *stream, <span class="keyword">int</span> len)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)userdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> len1, audio_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_memset(stream, <span class="number">0</span>, len);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;audio_buf_index &gt;= is-&gt;audio_buf_size) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* We have already sent all our data; get more */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      audio_size = audio_decode_frame(is, is-&gt;audio_buf, <span class="keyword">sizeof</span>(is-&gt;audio_buf));</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(audio_size &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* If error, output silence */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;audio_buf_size = <span class="number">1024</span>*<span class="number">2</span>*<span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memset</span>(is-&gt;audio_buf, <span class="number">0</span>, is-&gt;audio_buf_size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;audio_buf_size = audio_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;audio_buf_index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    len1 = is-&gt;audio_buf_size - is-&gt;audio_buf_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"stream addr:%p, audio_buf_index:%d, len1:%d, len:%d\n"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    stream,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  	    is-&gt;audio_buf_index, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    len1, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    len);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(len1 &gt; len)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      len1 = len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//memcpy(stream, (uint8_t *)is-&gt;audio_buf + is-&gt;audio_buf_index, len1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fwrite(is-&gt;audio_buf, <span class="number">1</span>, len1, audiofd1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fflush(audiofd1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_MixAudio(stream,(<span class="keyword">uint8_t</span> *)is-&gt;audio_buf, len1, SDL_MIX_MAXVOLUME);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    len -= len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_buf_index += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Uint32 <span class="title">sdl_refresh_timer_cb</span><span class="params">(Uint32 interval, <span class="keyword">void</span> *opaque)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  event.type = FF_REFRESH_EVENT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  event.user.data1 = opaque;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_PushEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* 0 means stop timer */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* schedule a video refresh in 'delay' ms */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">schedule_refresh</span><span class="params">(VideoState *is, <span class="keyword">int</span> <span class="built_in">delay</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_AddTimer(<span class="built_in">delay</span>, sdl_refresh_timer_cb, is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">video_display</span><span class="params">(VideoState *is)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Rect <span class="built_in">rect</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture *vp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">float</span> aspect_ratio;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> w, h, x, y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp = &amp;is-&gt;pictq[is-&gt;pictq_rindex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(vp-&gt;pict) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;video_ctx-&gt;sample_aspect_ratio.num == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      aspect_ratio = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      aspect_ratio = av_q2d(is-&gt;video_ctx-&gt;sample_aspect_ratio) *</span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;video_ctx-&gt;<span class="built_in">width</span> / is-&gt;video_ctx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(aspect_ratio &lt;= <span class="number">0.0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      aspect_ratio = (<span class="keyword">float</span>)is-&gt;video_ctx-&gt;<span class="built_in">width</span> /</span></pre></td></tr><tr><td class="code"><pre><span class="line">	(<span class="keyword">float</span>)is-&gt;video_ctx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    h = screen-&gt;h;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    w = ((int)rint(h * aspect_ratio)) &amp; -3;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    if(w &gt; screen-&gt;w) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      w = screen-&gt;w;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      h = ((int)rint(w / aspect_ratio)) &amp; -3;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    x = (screen-&gt;w - w) / 2;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    y = (screen-&gt;h - h) / 2;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_UpdateYUVTexture( texture, <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          vp-&gt;pict-&gt;data[<span class="number">0</span>], vp-&gt;pict-&gt;linesize[<span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          vp-&gt;pict-&gt;data[<span class="number">1</span>], vp-&gt;pict-&gt;linesize[<span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          vp-&gt;pict-&gt;data[<span class="number">2</span>], vp-&gt;pict-&gt;linesize[<span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.w = is-&gt;video_ctx-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.h = is-&gt;video_ctx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LockMutex(texture_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderClear(renderer);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderCopy(renderer, texture, <span class="literal">NULL</span>, &amp;<span class="built_in">rect</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderPresent(renderer);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_UnlockMutex(texture_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">video_refresh_timer</span><span class="params">(<span class="keyword">void</span> *userdata)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)userdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture *vp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(is-&gt;video_st) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;pictq_size == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      schedule_refresh(is, <span class="number">1</span>); <span class="comment">//if the queue is empty, so we shoud be as fast as checking queue of picture</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      vp = &amp;is-&gt;pictq[is-&gt;pictq_rindex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* Now, normally here goes a ton of code</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	 about timing, etc. we're just going to</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	 guess at a delay for now. You can</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	 increase and decrease this value and hard code</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	 the timing - but I don't suggest that ;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	 We'll learn how to do it for real later.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">      */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      schedule_refresh(is, <span class="number">40</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* show the picture! */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      video_display(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* update queue for next picture! */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(++is-&gt;pictq_rindex == VIDEO_PICTURE_QUEUE_SIZE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;pictq_rindex = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_LockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;pictq_size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondSignal(is-&gt;pictq_cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_UnlockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    schedule_refresh(is, <span class="number">100</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">alloc_picture</span><span class="params">(<span class="keyword">void</span> *userdata)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)userdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture *vp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp = &amp;is-&gt;pictq[is-&gt;pictq_windex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(vp-&gt;pict) &#123;<span class="comment">//free space if vp-&gt;pict is not NULL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpicture_free(vp-&gt;pict);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">free</span>(vp-&gt;pict);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Allocate a place to put our YUV image on that screen</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(texture_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp-&gt;pict = (AVPicture*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AVPicture));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(vp-&gt;pict)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpicture_alloc(vp-&gt;pict,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    AV_PIX_FMT_YUV420P, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    is-&gt;video_ctx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		    is-&gt;video_ctx-&gt;<span class="built_in">height</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(texture_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp-&gt;<span class="built_in">width</span> = is-&gt;video_ctx-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp-&gt;<span class="built_in">height</span> = is-&gt;video_ctx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp-&gt;allocated = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_picture</span><span class="params">(VideoState *is, AVFrame *pFrame)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture *vp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> dst_pix_fmt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPicture pict;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* wait until we have space for a new pic */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(is-&gt;pictq_size &gt;= VIDEO_PICTURE_QUEUE_SIZE &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	!is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_CondWait(is-&gt;pictq_cond, is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(is-&gt;quit)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"quit from queue_picture....\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// windex is set to 0 initially</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp = &amp;is-&gt;pictq[is-&gt;pictq_windex];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  fprintf(stderr, "vp.width=%d, vp.height=%d, video_ctx.width=%d, video_ctx.height=%d\n", </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">		  vp-&gt;width, </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">		  vp-&gt;height, </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">		  is-&gt;video_ctx-&gt;width,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">		  is-&gt;video_ctx-&gt;height);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* allocate or resize the buffer! */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!vp-&gt;pict ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">     vp-&gt;<span class="built_in">width</span> != is-&gt;video_ctx-&gt;<span class="built_in">width</span> ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">     vp-&gt;<span class="built_in">height</span> != is-&gt;video_ctx-&gt;<span class="built_in">height</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    vp-&gt;allocated = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alloc_picture(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"quit from queue_picture2....\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* We have a place to put our picture on the queue */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(vp-&gt;pict) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Convert the image into YUV format that SDL uses</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sws_scale(is-&gt;sws_ctx, (<span class="keyword">uint8_t</span> <span class="keyword">const</span> * <span class="keyword">const</span> *)pFrame-&gt;data,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	      pFrame-&gt;linesize, <span class="number">0</span>, is-&gt;video_ctx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	      vp-&gt;pict-&gt;data, vp-&gt;pict-&gt;linesize);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* now we inform our display thread that we have a pic ready */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(++is-&gt;pictq_windex == VIDEO_PICTURE_QUEUE_SIZE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;pictq_windex = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;pictq_size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_UnlockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">video_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)arg;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket pkt1, *packet = &amp;pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> frameFinished;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFrame *pFrame;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pFrame = av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet_queue_get(&amp;is-&gt;videoq, packet, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// means we quit getting packets</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Decode video frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_decode_video2(is-&gt;video_ctx, pFrame, &amp;frameFinished, packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Did we get a video frame?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(frameFinished) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(queue_picture(is, pFrame) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;      </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_free_packet(packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_frame_free(&amp;pFrame);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stream_component_open</span><span class="params">(VideoState *is, <span class="keyword">int</span> stream_index)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int64_t</span> in_channel_layout, out_channel_layout;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFormatContext *pFormatCtx = is-&gt;pFormatCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext *codecCtx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodec *codec = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_AudioSpec wanted_spec, spec;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(stream_index &lt; <span class="number">0</span> || stream_index &gt;= pFormatCtx-&gt;nb_streams) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  codec = avcodec_find_decoder(pFormatCtx-&gt;streams[stream_index]-&gt;codec-&gt;codec_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!codec) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Unsupported codec!\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  codecCtx = avcodec_alloc_context3(codec);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avcodec_copy_context(codecCtx, pFormatCtx-&gt;streams[stream_index]-&gt;codec) != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Couldn't copy codec context"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// Error copying codec context</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(codecCtx-&gt;codec_type == AVMEDIA_TYPE_AUDIO) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Set audio settings from codec info</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.freq = codecCtx-&gt;sample_rate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.format = AUDIO_S16SYS;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.channels = codecCtx-&gt;channels;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.silence = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.samples = SDL_AUDIO_BUFFER_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.callback = audio_callback;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.userdata = is;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(SDL_OpenAudio(&amp;wanted_spec, &amp;spec) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"SDL_OpenAudio: %s\n"</span>, SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avcodec_open2(codecCtx, codec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Unsupported codec!\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">switch</span>(codecCtx-&gt;codec_type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">case</span> AVMEDIA_TYPE_AUDIO:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audioStream = stream_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_st = pFormatCtx-&gt;streams[stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_ctx = codecCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_buf_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_buf_index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">memset</span>(&amp;is-&gt;audio_pkt, <span class="number">0</span>, <span class="keyword">sizeof</span>(is-&gt;audio_pkt));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    packet_queue_init(&amp;is-&gt;audioq);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_PauseAudio(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    in_channel_layout=av_get_default_channel_layout(is-&gt;audio_ctx-&gt;channels);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    out_channel_layout = in_channel_layout;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_swr_ctx = swr_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    swr_alloc_set_opts(is-&gt;audio_swr_ctx,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       out_channel_layout,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       AV_SAMPLE_FMT_S16,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       is-&gt;audio_ctx-&gt;sample_rate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       in_channel_layout,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       is-&gt;audio_ctx-&gt;sample_fmt,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       is-&gt;audio_ctx-&gt;sample_rate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"swr opts: out_channel_layout:%lld, out_sample_fmt:%d, out_sample_rate:%d, in_channel_layout:%lld, in_sample_fmt:%d, in_sample_rate:%d"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    out_channel_layout, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    AV_SAMPLE_FMT_S16, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    is-&gt;audio_ctx-&gt;sample_rate, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    in_channel_layout, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    is-&gt;audio_ctx-&gt;sample_fmt, </span></pre></td></tr><tr><td class="code"><pre><span class="line">		    is-&gt;audio_ctx-&gt;sample_rate);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    swr_init(is-&gt;audio_swr_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">case</span> AVMEDIA_TYPE_VIDEO:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;videoStream = stream_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;video_st = pFormatCtx-&gt;streams[stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;video_ctx = codecCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    packet_queue_init(&amp;is-&gt;videoq);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;video_tid = SDL_CreateThread(video_thread, <span class="string">"video_thread"</span>, is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;sws_ctx = sws_getContext(is-&gt;video_ctx-&gt;<span class="built_in">width</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">				 is-&gt;video_ctx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				 is-&gt;video_ctx-&gt;pix_fmt, </span></pre></td></tr><tr><td class="code"><pre><span class="line">				 is-&gt;video_ctx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				 is-&gt;video_ctx-&gt;<span class="built_in">height</span>, </span></pre></td></tr><tr><td class="code"><pre><span class="line">				 AV_PIX_FMT_YUV420P,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				 SWS_BILINEAR, </span></pre></td></tr><tr><td class="code"><pre><span class="line">				 <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Uint32 pixformat;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)arg;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFormatContext *pFormatCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket pkt1, *packet = &amp;pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> video_index = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> audio_index = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;videoStream = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;audioStream = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  global_video_state = is;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Open video file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avformat_open_input(&amp;pFormatCtx, is-&gt;filename, <span class="literal">NULL</span>, <span class="literal">NULL</span>)!=<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// Couldn't open file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;pFormatCtx = pFormatCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Retrieve stream information</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>)&lt;<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// Couldn't find stream information</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Dump information about file onto standard error</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_dump_format(pFormatCtx, <span class="number">0</span>, is-&gt;filename, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Find the first video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;pFormatCtx-&gt;nb_streams; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type==AVMEDIA_TYPE_VIDEO &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       video_index &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      video_index=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type==AVMEDIA_TYPE_AUDIO &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       audio_index &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      audio_index=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(audio_index &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream_component_open(is, audio_index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(video_index &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream_component_open(is, video_index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(is-&gt;videoStream &lt; <span class="number">0</span> || is-&gt;audioStream &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: could not open codecs\n"</span>, is-&gt;filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> fail;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"video context: width=%d, height=%d\n"</span>, is-&gt;video_ctx-&gt;<span class="built_in">width</span>, is-&gt;video_ctx-&gt;<span class="built_in">height</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  win = SDL_CreateWindow(<span class="string">"Media Player"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     		   SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		   SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		   is-&gt;video_ctx-&gt;<span class="built_in">width</span>, is-&gt;video_ctx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		   SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  renderer = SDL_CreateRenderer(win, <span class="number">-1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pixformat = SDL_PIXELFORMAT_IYUV;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  texture = SDL_CreateTexture(renderer,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			      pixformat, </span></pre></td></tr><tr><td class="code"><pre><span class="line">			      SDL_TEXTUREACCESS_STREAMING,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			      is-&gt;video_ctx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			      is-&gt;video_ctx-&gt;<span class="built_in">height</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// main decode loop</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondSignal(is-&gt;videoq.cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondSignal(is-&gt;audioq.cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// seek stuff goes here</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;audioq.<span class="built_in">size</span> &gt; MAX_AUDIOQ_SIZE ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">       is-&gt;videoq.<span class="built_in">size</span> &gt; MAX_VIDEOQ_SIZE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_Delay(<span class="number">10</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(av_read_frame(is-&gt;pFormatCtx, packet) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(is-&gt;pFormatCtx-&gt;pb-&gt;error == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_Delay(<span class="number">100</span>); <span class="comment">/* no error; wait for user input */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Is this a packet from the video stream?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet-&gt;stream_index == is-&gt;videoStream) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      packet_queue_put(&amp;is-&gt;videoq, packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"put video queue, size :%d\n"</span>, is-&gt;videoq.nb_packets);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(packet-&gt;stream_index == is-&gt;audioStream) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      packet_queue_put(&amp;is-&gt;audioq, packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"put audio queue, size :%d\n"</span>, is-&gt;audioq.nb_packets);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free_packet(packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* all done - wait for it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(!is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Delay(<span class="number">100</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> fail:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    event.type = FF_QUIT_EVENT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    event.user.data1 = is;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_PushEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> 		  ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Event       event;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState      *is;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: test &lt;file&gt;\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  audiofd = fopen(<span class="string">"testout.pcm"</span>, <span class="string">"wb+"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  audiofd1 = fopen(<span class="string">"testout1.pcm"</span>, <span class="string">"wb+"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//big struct, it's core</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is = av_mallocz(<span class="keyword">sizeof</span>(VideoState));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Register all formats and codecs</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not initialize SDL - %s\n"</span>, SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  texture_mutex = SDL_CreateMutex();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_strlcpy(is-&gt;filename, argv[<span class="number">1</span>], <span class="keyword">sizeof</span>(is-&gt;filename));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;pictq_mutex = SDL_CreateMutex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;pictq_cond = SDL_CreateCond();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">//set timer</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  schedule_refresh(is, <span class="number">40</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;parse_tid = SDL_CreateThread(decode_thread, <span class="string">"decode_thread"</span>, is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!is-&gt;parse_tid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_free(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_WaitEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">switch</span>(event.type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> FF_QUIT_EVENT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> SDL_QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"receive a QUIT event: %d\n"</span>, event.type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;quit = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//SDL_Quit();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//return 0;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">goto</span> __QUIT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> FF_REFRESH_EVENT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//fprintf(stderr, "receive a refresh event: %d\n", event.type);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      video_refresh_timer(event.user.data1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">__QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">__FAIL:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(audiofd)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(audiofd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(audiofd1)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    fclose(audiofd1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">```  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">53.</span>线程的退出机制</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 主线程接收到退出事件</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 解复用线程在循环分流时对quit进行判断</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 视频解码线程从视频流队列中取包时对quit进行判断</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 音频解码从音频流队列中取包时对quit进行判断</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 音视频循环解码时对quit进行判断</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 在收到信号变量消息时对quit进行判断</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">54.</span>音视频同步</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 时间戳</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - PTS: Presentation timestamp 用于最终渲染用的</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - DTS: Decoding timestamp 用于视频解码</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - I(intra) / B(bidirectional) / P(predicted) 帧</span></pre></td></tr><tr><td class="code"><pre><span class="line">        - I 关键帧，帧内压缩</span></pre></td></tr><tr><td class="code"><pre><span class="line">        - B 向前向后参考<span class="number">3</span>帧，可多帧</span></pre></td></tr><tr><td class="code"><pre><span class="line">        - P 向前参考帧，<span class="number">1</span>帧</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 时间戳顺序</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 实际帧顺序：I B B P</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 存放帧顺序：I P B B</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 解码时间戳：<span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 展示时间戳：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 从哪儿获取PTS</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - AVPacket中的PTS【解复用的数据包里】</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - AvFrame中的PTS【解码数据帧里】</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - av_frame_get_best_effort_timestamp()</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 时间基</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 不同的时间的基数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - tbr: 帧率 【<span class="number">1</span>/<span class="number">25</span>】</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - tbn: time base of stream</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - tbc: time base of codec</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 计算当前帧的PTS</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - PTS = PTS * av_q2d(video_stream-&gt;time_base) </span></pre></td></tr><tr><td class="code"><pre><span class="line">    - av_q2d(AVRotional a) &#123; <span class="keyword">return</span> a.num / (<span class="keyword">double</span>)a.den; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 计算下一帧的PTS</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - video_clock: 预测的下一帧视频的PTS</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - frame_delay: <span class="number">1</span>/tbr</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - audio_clokc: 音频当前播放的时间戳</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 音视频同步的方式</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 视频同步到音频（易）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 音频同步到视频（难）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 音频和视频都同步到系统时钟</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 视频播放的基本思路</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 一般的做法，展示第一帧视频帧后，获得要显示的下一个帧视频的PTS，然后设置一个定时器，当定时器超时后，刷新新的视频帧，如此反复操作。 </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;SDL.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavcodec/avcodec.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libavformat/avformat.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswscale/swscale.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;libswresample/swresample.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// compatibility with newer API</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> LIBAVCODEC_VERSION_INT &lt; AV_VERSION_INT(55,28,1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> av_frame_alloc avcodec_alloc_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> av_frame_free avcodec_free_frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SDL_AUDIO_BUFFER_SIZE 1024</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_AUDIO_FRAME_SIZE 192000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_AUDIOQ_SIZE (5 * 16 * 1024)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_VIDEOQ_SIZE (5 * 256 * 1024)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AV_SYNC_THRESHOLD 0.01</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> AV_NOSYNC_THRESHOLD 10.0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_REFRESH_EVENT (SDL_USEREVENT)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FF_QUIT_EVENT (SDL_USEREVENT + 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> VIDEO_PICTURE_QUEUE_SIZE 1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PacketQueue</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *first_pkt, *last_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> nb_packets;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_mutex *mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_cond *cond;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; PacketQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VideoPicture</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPicture *bmp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> <span class="built_in">width</span>, <span class="built_in">height</span>; <span class="comment">/* source height &amp; width */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> allocated;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span> pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; VideoPicture;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VideoState</span> &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFormatContext *pFormatCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             videoStream, audioStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVStream        *audio_st;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *audio_ctx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  PacketQueue     audioq;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">uint8_t</span>         audio_buf[(MAX_AUDIO_FRAME_SIZE * <span class="number">3</span>) / <span class="number">2</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>    audio_buf_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span>    audio_buf_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFrame         audio_frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket        audio_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">uint8_t</span>         *audio_pkt_data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             audio_pkt_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             audio_hw_buf_size;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">SwrContext</span> *<span class="title">audio_swr_ctx</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span>          audio_clock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span>          video_clock; <span class="comment">///&lt;pts of last decoded frame / predicted pts of next decoded frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span>          frame_timer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span>          frame_last_pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span>          frame_last_delay;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVStream        *video_st;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext  *video_ctx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  PacketQueue     videoq;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">SwsContext</span> *<span class="title">video_sws_ctx</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture    pictq[VIDEO_PICTURE_QUEUE_SIZE];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             pictq_size, pictq_rindex, pictq_windex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_mutex       *pictq_mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_cond        *pictq_cond;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Thread      *parse_tid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Thread      *video_tid;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">char</span>            filename[<span class="number">1024</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             quit;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; VideoState;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">SDL_mutex       *text_mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SDL_Window	*win;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SDL_Renderer 	*renderer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">SDL_Texture  	*texture;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* Since we only have one decoding thread, the Big Struct</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">   can be global in case we need it. */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">VideoState *global_video_state;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">packet_queue_init</span><span class="params">(PacketQueue *q)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">memset</span>(q, <span class="number">0</span>, <span class="keyword">sizeof</span>(PacketQueue));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;mutex = SDL_CreateMutex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;cond = SDL_CreateCond();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packet_queue_put</span><span class="params">(PacketQueue *q, AVPacket *pkt)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(av_dup_packet(pkt) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1 = av_malloc(<span class="keyword">sizeof</span>(AVPacketList));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!pkt1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1-&gt;pkt = *pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  pkt1-&gt;next = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (!q-&gt;last_pkt)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    q-&gt;first_pkt = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">else</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    q-&gt;last_pkt-&gt;next = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;last_pkt = pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;nb_packets++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  q-&gt;<span class="built_in">size</span> += pkt1-&gt;pkt.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_CondSignal(q-&gt;cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">packet_queue_get</span><span class="params">(PacketQueue *q, AVPacket *pkt, <span class="keyword">int</span> block)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"></span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacketList *pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(global_video_state-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    pkt1 = q-&gt;first_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (pkt1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;first_pkt = pkt1-&gt;next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (!q-&gt;first_pkt)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	q-&gt;last_pkt = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;nb_packets--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      q-&gt;<span class="built_in">size</span> -= pkt1-&gt;pkt.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      *pkt = pkt1-&gt;pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free(pkt1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!block) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondWait(q-&gt;cond, q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(q-&gt;mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">get_audio_clock</span><span class="params">(VideoState *is)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span> pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> hw_buf_size, bytes_per_sec, n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  pts = is-&gt;audio_clock; <span class="comment">/* maintained in the audio thread */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  hw_buf_size = is-&gt;audio_buf_size - is-&gt;audio_buf_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  bytes_per_sec = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  n = is-&gt;audio_ctx-&gt;channels * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(is-&gt;audio_st) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    bytes_per_sec = is-&gt;audio_ctx-&gt;sample_rate * n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(bytes_per_sec) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pts -= (<span class="keyword">double</span>)hw_buf_size / bytes_per_sec;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">audio_decode_frame</span><span class="params">(VideoState *is, <span class="keyword">uint8_t</span> *audio_buf, <span class="keyword">int</span> buf_size, <span class="keyword">double</span> *pts_ptr)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> len1, data_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket *pkt = &amp;is-&gt;audio_pkt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span> pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> n;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">while</span>(is-&gt;audio_pkt_size &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">int</span> got_frame = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      len1 = avcodec_decode_audio4(is-&gt;audio_ctx, &amp;is-&gt;audio_frame, &amp;got_frame, pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(len1 &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* if error, skip frame */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;audio_pkt_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      data_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(got_frame) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	data_size = av_samples_get_buffer_size(NULL, </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       is-&gt;audio_ctx-&gt;channels,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       is-&gt;audio_frame.nb_samples,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       is-&gt;audio_ctx-&gt;sample_fmt,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">					       1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	*/</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	data_size = <span class="number">2</span> * is-&gt;audio_frame.nb_samples * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	assert(data_size &lt;= buf_size);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        swr_convert(is-&gt;audio_swr_ctx,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &amp;audio_buf,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        MAX_AUDIO_FRAME_SIZE*<span class="number">3</span>/<span class="number">2</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **)is-&gt;audio_frame.data,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        is-&gt;audio_frame.nb_samples);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">//memcpy(audio_buf, is-&gt;audio_frame.data[0], data_size);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;audio_pkt_data += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;audio_pkt_size -= len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(data_size &lt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* No data yet, get more frames */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      pts = is-&gt;audio_clock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      *pts_ptr = pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      n = <span class="number">2</span> * is-&gt;audio_ctx-&gt;channels;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;audio_clock += (<span class="keyword">double</span>)data_size /</span></pre></td></tr><tr><td class="code"><pre><span class="line">	(<span class="keyword">double</span>)(n * is-&gt;audio_ctx-&gt;sample_rate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* We have data, return it and come back for more later */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> data_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pkt-&gt;data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free_packet(pkt);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* next packet */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet_queue_get(&amp;is-&gt;audioq, pkt, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_pkt_data = pkt-&gt;data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_pkt_size = pkt-&gt;<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* if update, update the audio clock w/pts */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pkt-&gt;pts != AV_NOPTS_VALUE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;audio_clock = av_q2d(is-&gt;audio_st-&gt;time_base)*pkt-&gt;pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">audio_callback</span><span class="params">(<span class="keyword">void</span> *userdata, Uint8 *stream, <span class="keyword">int</span> len)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)userdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> len1, audio_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span> pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_memset(stream, <span class="number">0</span>, len);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(len &gt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;audio_buf_index &gt;= is-&gt;audio_buf_size) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* We have already sent all our data; get more */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      audio_size = audio_decode_frame(is, is-&gt;audio_buf, <span class="keyword">sizeof</span>(is-&gt;audio_buf), &amp;pts);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(audio_size &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* If error, output silence */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;audio_buf_size = <span class="number">1024</span> * <span class="number">2</span> * <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">memset</span>(is-&gt;audio_buf, <span class="number">0</span>, is-&gt;audio_buf_size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;audio_buf_size = audio_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;audio_buf_index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    len1 = is-&gt;audio_buf_size - is-&gt;audio_buf_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(len1 &gt; len)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      len1 = len;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_MixAudio(stream,(<span class="keyword">uint8_t</span> *)is-&gt;audio_buf + is-&gt;audio_buf_index, len1, SDL_MIX_MAXVOLUME);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//memcpy(stream, (uint8_t *)is-&gt;audio_buf + is-&gt;audio_buf_index, len1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    len -= len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_buf_index += len1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Uint32 <span class="title">sdl_refresh_timer_cb</span><span class="params">(Uint32 interval, <span class="keyword">void</span> *opaque)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  event.type = FF_REFRESH_EVENT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  event.user.data1 = opaque;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_PushEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">/* 0 means stop timer */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/* schedule a video refresh in 'delay' ms */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">schedule_refresh</span><span class="params">(VideoState *is, <span class="keyword">int</span> <span class="built_in">delay</span>)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_AddTimer(<span class="built_in">delay</span>, sdl_refresh_timer_cb, is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">video_display</span><span class="params">(VideoState *is)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Rect <span class="built_in">rect</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture *vp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">float</span> aspect_ratio;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> w, h, x, y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp = &amp;is-&gt;pictq[is-&gt;pictq_rindex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(vp-&gt;bmp) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_UpdateYUVTexture( texture, <span class="literal">NULL</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          vp-&gt;bmp-&gt;data[<span class="number">0</span>], vp-&gt;bmp-&gt;linesize[<span class="number">0</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          vp-&gt;bmp-&gt;data[<span class="number">1</span>], vp-&gt;bmp-&gt;linesize[<span class="number">1</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          vp-&gt;bmp-&gt;data[<span class="number">2</span>], vp-&gt;bmp-&gt;linesize[<span class="number">2</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.x = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.y = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.w = is-&gt;video_ctx-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">rect</span>.h = is-&gt;video_ctx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LockMutex(text_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderClear( renderer );</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderCopy( renderer, texture, <span class="literal">NULL</span>, &amp;<span class="built_in">rect</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_RenderPresent( renderer );</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_UnlockMutex(text_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">video_refresh_timer</span><span class="params">(<span class="keyword">void</span> *userdata)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)userdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture *vp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span> actual_delay, <span class="built_in">delay</span>, sync_threshold, ref_clock, diff;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(is-&gt;video_st) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;pictq_size == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      schedule_refresh(is, <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      vp = &amp;is-&gt;pictq[is-&gt;pictq_rindex];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">delay</span> = vp-&gt;pts - is-&gt;frame_last_pts; <span class="comment">/* the pts from last time */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(<span class="built_in">delay</span> &lt;= <span class="number">0</span> || <span class="built_in">delay</span> &gt;= <span class="number">1.0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* if incorrect delay, use previous one */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">delay</span> = is-&gt;frame_last_delay;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* save for next time */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;frame_last_delay = <span class="built_in">delay</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;frame_last_pts = vp-&gt;pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* update delay to sync to audio */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      ref_clock = get_audio_clock(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      diff = vp-&gt;pts - ref_clock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* Skip or repeat the frame. Take delay into account</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">	 FFPlay still doesn't "know if this is the best guess." */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      sync_threshold = (<span class="built_in">delay</span> &gt; AV_SYNC_THRESHOLD) ? <span class="built_in">delay</span> : AV_SYNC_THRESHOLD;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(<span class="built_in">fabs</span>(diff) &lt; AV_NOSYNC_THRESHOLD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span>(diff &lt;= -sync_threshold) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  <span class="built_in">delay</span> = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span>(diff &gt;= sync_threshold) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  <span class="built_in">delay</span> = <span class="number">2</span> * <span class="built_in">delay</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;frame_timer += <span class="built_in">delay</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* computer the REAL delay */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      actual_delay = is-&gt;frame_timer - (av_gettime() / <span class="number">1000000.0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(actual_delay &lt; <span class="number">0.010</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="comment">/* Really it should skip the picture instead */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	actual_delay = <span class="number">0.010</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      schedule_refresh(is, (<span class="keyword">int</span>)(actual_delay * <span class="number">1000</span> + <span class="number">0.5</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* show the picture! */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      video_display(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/* update queue for next picture! */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(++is-&gt;pictq_rindex == VIDEO_PICTURE_QUEUE_SIZE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	is-&gt;pictq_rindex = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_LockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;pictq_size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondSignal(is-&gt;pictq_cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_UnlockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    schedule_refresh(is, <span class="number">100</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">alloc_picture</span><span class="params">(<span class="keyword">void</span> *userdata)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)userdata;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture *vp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp = &amp;is-&gt;pictq[is-&gt;pictq_windex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(vp-&gt;bmp) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// we already have one make another, bigger/smaller</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avpicture_free(vp-&gt;bmp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">free</span>(vp-&gt;bmp);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    vp-&gt;bmp = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Allocate a place to put our YUV image on that screen</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(text_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp-&gt;bmp = (AVPicture*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(AVPicture));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ret = avpicture_alloc(vp-&gt;bmp, AV_PIX_FMT_YUV420P, is-&gt;video_ctx-&gt;<span class="built_in">width</span>, is-&gt;video_ctx-&gt;<span class="built_in">height</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not allocate temporary picture: %s\n"</span>, av_err2str(ret));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(text_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp-&gt;<span class="built_in">width</span> = is-&gt;video_ctx-&gt;<span class="built_in">width</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp-&gt;<span class="built_in">height</span> = is-&gt;video_ctx-&gt;<span class="built_in">height</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp-&gt;allocated = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_picture</span><span class="params">(VideoState *is, AVFrame *pFrame, <span class="keyword">double</span> pts)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoPicture *vp;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* wait until we have space for a new pic */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_LockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(is-&gt;pictq_size &gt;= VIDEO_PICTURE_QUEUE_SIZE &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	!is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_CondWait(is-&gt;pictq_cond, is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_UnlockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(is-&gt;quit)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// windex is set to 0 initially</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  vp = &amp;is-&gt;pictq[is-&gt;pictq_windex];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* allocate or resize the buffer! */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!vp-&gt;bmp ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">     vp-&gt;<span class="built_in">width</span> != is-&gt;video_ctx-&gt;<span class="built_in">width</span> ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">     vp-&gt;<span class="built_in">height</span> != is-&gt;video_ctx-&gt;<span class="built_in">height</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    vp-&gt;allocated = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    alloc_picture(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* We have a place to put our picture on the queue */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(vp-&gt;bmp) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    vp-&gt;pts = pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Convert the image into YUV format that SDL uses</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    sws_scale(is-&gt;video_sws_ctx, (<span class="keyword">uint8_t</span> <span class="keyword">const</span> * <span class="keyword">const</span> *)pFrame-&gt;data,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	      pFrame-&gt;linesize, <span class="number">0</span>, is-&gt;video_ctx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">	      vp-&gt;bmp-&gt;data, vp-&gt;bmp-&gt;linesize);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* now we inform our display thread that we have a pic ready */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(++is-&gt;pictq_windex == VIDEO_PICTURE_QUEUE_SIZE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;pictq_windex = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_LockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;pictq_size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_UnlockMutex(is-&gt;pictq_mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">synchronize_video</span><span class="params">(VideoState *is, AVFrame *src_frame, <span class="keyword">double</span> pts)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span> frame_delay;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(pts != <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* if we have pts, set video clock to it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;video_clock = pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* if we aren't given a pts, set it to the clock */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    pts = is-&gt;video_clock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* update the video clock */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  frame_delay = av_q2d(is-&gt;video_ctx-&gt;time_base);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* if we are repeating a frame, adjust clock accordingly */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  frame_delay += src_frame-&gt;repeat_pict * (frame_delay * <span class="number">0.5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;video_clock += frame_delay;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode_video_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)arg;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket pkt1, *packet = &amp;pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> frameFinished;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFrame *pFrame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">double</span> pts;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pFrame = av_frame_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet_queue_get(&amp;is-&gt;videoq, packet, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">// means we quit getting packets</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pts = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Decode video frame</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avcodec_decode_video2(is-&gt;video_ctx, pFrame, &amp;frameFinished, packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>((pts = av_frame_get_best_effort_timestamp(pFrame)) == AV_NOPTS_VALUE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      pts = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    pts *= av_q2d(is-&gt;video_st-&gt;time_base);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Did we get a video frame?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(frameFinished) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      pts = synchronize_video(is, pFrame, pts);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(queue_picture(is, pFrame, pts) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_free_packet(packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_frame_free(&amp;pFrame);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stream_component_open</span><span class="params">(VideoState *is, <span class="keyword">int</span> stream_index)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFormatContext *pFormatCtx = is-&gt;pFormatCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodecContext *codecCtx = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVCodec *codec = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_AudioSpec wanted_spec, spec;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(stream_index &lt; <span class="number">0</span> || stream_index &gt;= pFormatCtx-&gt;nb_streams) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  codecCtx = avcodec_alloc_context3(<span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> ret = avcodec_parameters_to_context(codecCtx, pFormatCtx-&gt;streams[stream_index]-&gt;codecpar);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  codec = avcodec_find_decoder(codecCtx-&gt;codec_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!codec) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Unsupported codec!\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(codecCtx-&gt;codec_type == AVMEDIA_TYPE_AUDIO) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Set audio settings from codec info</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.freq = codecCtx-&gt;sample_rate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.format = AUDIO_S16SYS;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.channels = <span class="number">2</span>;<span class="comment">//codecCtx-&gt;channels;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.silence = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.samples = SDL_AUDIO_BUFFER_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.callback = audio_callback;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wanted_spec.userdata = is;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(SDL_OpenAudio(&amp;wanted_spec, &amp;spec) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"SDL_OpenAudio: %s\n"</span>, SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_hw_buf_size = spec.<span class="built_in">size</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avcodec_open2(codecCtx, codec, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Unsupported codec!\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">switch</span>(codecCtx-&gt;codec_type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">case</span> AVMEDIA_TYPE_AUDIO:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audioStream = stream_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_st = pFormatCtx-&gt;streams[stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_ctx = codecCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_buf_size = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_buf_index = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">memset</span>(&amp;is-&gt;audio_pkt, <span class="number">0</span>, <span class="keyword">sizeof</span>(is-&gt;audio_pkt));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    packet_queue_init(&amp;is-&gt;audioq);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//Out Audio Param</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">uint64_t</span> out_channel_layout=AV_CH_LAYOUT_STEREO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//AAC:1024  MP3:1152</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> out_nb_samples= is-&gt;audio_ctx-&gt;frame_size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> out_sample_rate=is-&gt;audio_ctx-&gt;sample_rate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> out_channels=av_get_channel_layout_nb_channels(out_channel_layout);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//Out Buffer Size</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    int out_buffer_size=av_samples_get_buffer_size(NULL,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                                                   out_channels,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                                                   out_nb_samples,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                                                   AV_SAMPLE_FMT_S16,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                                                   1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">                                                   */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//uint8_t *out_buffer=(uint8_t *)av_malloc(MAX_AUDIO_FRAME_SIZE*2);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int64_t</span> in_channel_layout=av_get_default_channel_layout(is-&gt;audio_ctx-&gt;channels);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SwrContext</span> *<span class="title">audio_convert_ctx</span>;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    audio_convert_ctx = swr_alloc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    swr_alloc_set_opts(audio_convert_ctx,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       out_channel_layout,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       AV_SAMPLE_FMT_S16,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       out_sample_rate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       in_channel_layout,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       is-&gt;audio_ctx-&gt;sample_fmt,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       is-&gt;audio_ctx-&gt;sample_rate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       <span class="number">0</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       <span class="literal">NULL</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"swr opts: out_channel_layout:%lld, out_sample_fmt:%d, out_sample_rate:%d, in_channel_layout:%lld, in_sample_fmt:%d, in_sample_rate:%d"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            out_channel_layout, AV_SAMPLE_FMT_S16, out_sample_rate, in_channel_layout, is-&gt;audio_ctx-&gt;sample_fmt, is-&gt;audio_ctx-&gt;sample_rate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    swr_init(audio_convert_ctx);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;audio_swr_ctx = audio_convert_ctx;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_PauseAudio(<span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">case</span> AVMEDIA_TYPE_VIDEO:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;videoStream = stream_index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;video_st = pFormatCtx-&gt;streams[stream_index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;video_ctx = codecCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;frame_timer = (<span class="keyword">double</span>)av_gettime() / <span class="number">1000000.0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;frame_last_delay = <span class="number">40e-3</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    packet_queue_init(&amp;is-&gt;videoq);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;video_sws_ctx = sws_getContext(is-&gt;video_ctx-&gt;<span class="built_in">width</span>, is-&gt;video_ctx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				 is-&gt;video_ctx-&gt;pix_fmt, is-&gt;video_ctx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				 is-&gt;video_ctx-&gt;<span class="built_in">height</span>, AV_PIX_FMT_YUV420P,</span></pre></td></tr><tr><td class="code"><pre><span class="line">				 SWS_BILINEAR, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">				 );</span></pre></td></tr><tr><td class="code"><pre><span class="line">    is-&gt;video_tid = SDL_CreateThread(decode_video_thread, <span class="string">"decode_video_thread"</span>, is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">demux_thread</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Uint32 pixformat;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState *is = (VideoState *)arg;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVFormatContext *pFormatCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  AVPacket pkt1, *packet = &amp;pkt1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> video_index = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> audio_index = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span> i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;videoStream=<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;audioStream=<span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  global_video_state = is;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Open video file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avformat_open_input(&amp;pFormatCtx, is-&gt;filename, <span class="literal">NULL</span>, <span class="literal">NULL</span>)!=<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// Couldn't open file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;pFormatCtx = pFormatCtx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Retrieve stream information</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>)&lt;<span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// Couldn't find stream information</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Dump information about file onto standard error</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_dump_format(pFormatCtx, <span class="number">0</span>, is-&gt;filename, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Find the first video stream</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;pFormatCtx-&gt;nb_streams; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type==AVMEDIA_TYPE_VIDEO &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       video_index &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      video_index=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type==AVMEDIA_TYPE_AUDIO &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       audio_index &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      audio_index=i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(audio_index &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream_component_open(is, audio_index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(video_index &gt;= <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stream_component_open(is, video_index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;   </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(is-&gt;videoStream &lt; <span class="number">0</span> || is-&gt;audioStream &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"%s: could not open codecs\n"</span>, is-&gt;filename);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> fail;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  win = SDL_CreateWindow(<span class="string">"Media Player"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     		   SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		   SDL_WINDOWPOS_UNDEFINED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		   is-&gt;video_ctx-&gt;<span class="built_in">width</span>, is-&gt;video_ctx-&gt;<span class="built_in">height</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">		   SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  renderer = SDL_CreateRenderer(win, <span class="number">-1</span>, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  pixformat = SDL_PIXELFORMAT_IYUV;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  texture = SDL_CreateTexture(renderer,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			      pixformat, </span></pre></td></tr><tr><td class="code"><pre><span class="line">			      SDL_TEXTUREACCESS_STREAMING,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			      is-&gt;video_ctx-&gt;<span class="built_in">width</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">			      is-&gt;video_ctx-&gt;<span class="built_in">height</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// main decode loop</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondSignal(is-&gt;videoq.cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_CondSignal(is-&gt;audioq.cond);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// seek stuff goes here</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(is-&gt;audioq.<span class="built_in">size</span> &gt; MAX_AUDIOQ_SIZE ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">       is-&gt;videoq.<span class="built_in">size</span> &gt; MAX_VIDEOQ_SIZE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      SDL_Delay(<span class="number">10</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(av_read_frame(is-&gt;pFormatCtx, packet) &lt; <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span>(is-&gt;pFormatCtx-&gt;pb-&gt;error == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	SDL_Delay(<span class="number">100</span>); <span class="comment">/* no error; wait for user input */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">continue</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Is this a packet from the video stream?</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span>(packet-&gt;stream_index == is-&gt;videoStream) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      packet_queue_put(&amp;is-&gt;videoq, packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(packet-&gt;stream_index == is-&gt;audioStream) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      packet_queue_put(&amp;is-&gt;audioq, packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      av_free_packet(packet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/* all done - wait for it */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">while</span>(!is-&gt;quit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Delay(<span class="number">100</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> fail:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(<span class="number">1</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_Event event;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    event.type = FF_QUIT_EVENT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    event.user.data1 = is;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_PushEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">int</span>             ret = <span class="number">-1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Event       event;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  VideoState      *is;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is = av_mallocz(<span class="keyword">sizeof</span>(VideoState));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Usage: test &lt;file&gt;\n"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// Register all formats and codecs</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_register_all();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Could not initialize SDL - %s\n"</span>, SDL_GetError());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  text_mutex = SDL_CreateMutex();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  av_strlcpy(is-&gt;filename, argv[<span class="number">1</span>], <span class="keyword">sizeof</span>(is-&gt;filename));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;pictq_mutex = SDL_CreateMutex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;pictq_cond = SDL_CreateCond();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  schedule_refresh(is, <span class="number">40</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  is-&gt;parse_tid = SDL_CreateThread(demux_thread, <span class="string">"demux_thread"</span>, is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!is-&gt;parse_tid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    av_free(is);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">goto</span> __FAIL;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">for</span>(;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SDL_WaitEvent(&amp;event);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">switch</span>(event.type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> FF_QUIT_EVENT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> SDL_QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      is-&gt;quit = <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//SDL_Quit();</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">//return 0;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">goto</span> __QUIT;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">case</span> FF_REFRESH_EVENT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      video_refresh_timer(event.user.data1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">__QUIT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ret = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">__FAIL:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  SDL_Quit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/*</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  if(audiofd)&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    fclose(audiofd);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  if(audiofd1)&#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">    fclose(audiofd1);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">  */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> ret;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">``` </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">#### <span class="number">55.</span>Android中使用FFmpeg</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- Java与C之间的相互调用</span></pre></td></tr><tr><td class="code"><pre><span class="line">- Android下FFmpeg的编译</span></pre></td></tr><tr><td class="code"><pre><span class="line">- Android下如何使用FFmpeg</span></pre></td></tr><tr><td class="code"><pre><span class="line">- JNI基本概念</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - JNIEnv Java本地化环境，C/C++要访问Java相关的代码都需要它</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - JavaVM  一个进程对于一个JavaVM，用于获取JNIEnv，一个JavaVM里边很多线程，一个线程对应一个JNIEnv</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 线程</span></pre></td></tr><tr><td class="code"><pre><span class="line">- [Java调用C/C++方法一](#Java调用C/C++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 在Java层定义native关键字函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 在C/C++层创建`Java_packname_classname_methodname`函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">- [Java调用C/C++方法二](#Java调用C/C++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 在Java层定义native关键字函数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - [RegisterNative](#方法二的定义)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        - <span class="function">Jnit <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span>* reserved)</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        - Jint JNI_OnUnload(JavaVM *vm, void* reserved)</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 什么是Signature</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - Java与C/C++相互调用时，用于描述函数参数的描述符【可以理解为映射表的key】</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 输入参数放在()内，输出参数放在()外</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - 多个参数之间顺序存放，且用`;`分割</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 原始类型的Signature</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Java类型 | 符号</span></pre></td></tr><tr><td class="code"><pre><span class="line">---|---</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> | Z</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>    | B</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">char</span>    | C</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">short</span>   | S</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>     | I</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">long</span>    | L</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">float</span>   | F</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">double</span>  | D</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>    | V</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- 类的Signature</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - Java对象参数`L包路径/类名`</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - Java数组`[`</span></pre></td></tr><tr><td class="code"><pre><span class="line">        -  ([Student;)[LStudent]  ==&gt; Student[] Xxx(Student[])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        -  ([java/lang/<span class="keyword">String</span>;)[Ljava/lang/Object  ==&gt; Object[] Xxx(<span class="keyword">String</span>[] s)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">- [C/C++调Java方法](#C/C++调Java方法)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">1.</span> FindClass 获取Java中的类</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">2.</span> GetMethodID / GetFieldID  获取Java类中所有的方法/属性</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">3.</span> NewObject  获取Java中的内存对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - <span class="number">4.</span> Call&lt;TYPE&gt;Method / [G/S]et&lt;Type&gt;Field</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"> ###### 方法二的定义</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">```c</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> struct &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* name; <span class="comment">// 与Java定义的name同名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* signature; <span class="comment">// 标注输入输出参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">void</span>* fnPtr; <span class="comment">// 具体API</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;JNINativeMethod;</span></pre></td></tr></table></figure>

<h6 id="Java调用C-C"><a href="#Java调用C-C" class="headerlink" title="Java调用C/C++"></a>Java调用C/C++</h6><ul>
<li><p>C++端代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_CLASS_PATH <span class="meta-string">"com/muziyu/apple/firstjni/MainActivity"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> JNIEXPORT jstring JNICALL</span></pre></td></tr><tr><td class="code"><pre><span class="line">Java_com_muziyu_apple_firstjni_MainActivity_stringFromJNI(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        JNIEnv *env,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        jobject <span class="comment">/* this */</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/// 方法一</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">JNIEXPORT jstring JNICALL</span></pre></td></tr><tr><td class="code"><pre><span class="line">Java_com_muziyu_apple_firstjni_MainActivity_mStringFromJNI(JNIEnv *env, jobject thiz, jstring str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement mStringFromJNI()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *mStr = env-&gt;GetStringUTFChars(str, <span class="number">0</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    env-&gt;ReleaseStringUTFChars(str, mStr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(mStr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">/// 方法二</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">JNIEXPORT jstring JNICALL</span></pre></td></tr><tr><td class="code"><pre><span class="line">my_test_register(JNIEnv *env, jobject thiz) &#123; <span class="comment">/// 实现一个Native对应的函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(<span class="string">"This is a test of register!"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> JNINativeMethod g_methods[] = &#123; <span class="comment">/// 定义了一个静态方法，第一个参数是Java端定义的Native的方法名，第二个参数是一个输入输出参数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123; <span class="string">"_test"</span>,<span class="string">"()Ljava/lang/String;"</span>, (<span class="keyword">void</span>*)my_test_register &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function">jint <span class="title">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="keyword">void</span> *reserved)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    JNIEnv *env = <span class="literal">NULL</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    vm-&gt;GetEnv((<span class="keyword">void</span>**)&amp;env, JNI_VERSION_1_6); <span class="comment">/// 获取Java虚拟机环境</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    jclass clazz = env-&gt;FindClass(JNI_CLASS_PATH); <span class="comment">/// 根据Java端的类路径在C/C++层创建这个类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    env-&gt;RegisterNatives(clazz, g_methods, <span class="keyword">sizeof</span>(g_methods)/<span class="keyword">sizeof</span>(g_methods[<span class="number">0</span>])); <span class="comment">/// 在Java虚拟机里建立C/C++到Java的映射关系</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>Java端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muziyu.apple.firstjni;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.widget.TextView;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        setContentView(R.layout.activity_main);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// Example of a call to a native method</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        TextView tv = findViewById(R.id.sample_text);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String hello = stringFromJNI() + mStringFromJNI(<span class="string">"ABC"</span>) + <span class="string">' '</span> + _test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tv.setText(hello);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * A native method that is implemented by the 'native-lib' native library,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * which is packaged with this application.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">stringFromJNI</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 方法一</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">mStringFromJNI</span><span class="params">(String str)</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// 方法二</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">_test</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>C/C++调Java方法</p>
</li>
<li><p>Java主入口</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muziyu/apple.firstjni;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.os.Bundle;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.widget.TextView;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// Used to load the 'native-lib' library on application startup.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">static</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.loadLibrary(<span class="string">"native-lib"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        setContentView(R.layout.activity_main);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// Example of a call to a native method</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        TextView tv = findViewById(R.id.sample_text);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String hello = mTest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tv.setText(hello);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * A native method that is implemented by the 'native-lib' native library,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     * which is packaged with this application.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">     */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// C/C++调用Java</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">mTest</span><span class="params">()</span></span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>Java外部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.muziyu/apple.firstjni;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> year;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.year = year;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<ul>
<li>C/C++代码<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_CLAZZ_PATH <span class="meta-string">"com/muziyu/apple/firstjni/Student"</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// C/C++调用Java</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">JNIEXPORT jstring JNICALL</span></pre></td></tr><tr><td class="code"><pre><span class="line">Java_com_muziyu_apple_firstjni_MainActivity_mTest(JNIEnv *env, jobject thiz) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// 第一步：获取Java类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    jclass clazz = env-&gt;FindClass(JNI_CLAZZ_PATH);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// 第二步：获取Java类中的方法和属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    jmethodID method_init_id = env-&gt;GetMethodID(clazz, <span class="string">"&lt;init&gt;"</span>, <span class="string">"()V"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    jmethodID method_set_id = env-&gt;GetMethodID(clazz, <span class="string">"setYear"</span>, <span class="string">"(I)V"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    jmethodID method_get_id = env-&gt;GetMethodID(clazz, <span class="string">"getYear"</span>, <span class="string">"()I"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// 第三步：生成一个新的对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    jobject obj = env-&gt;NewObject(clazz, method_init_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// 第四步：调用Java中的方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    env-&gt;CallVoidMethod(obj, method_set_id, <span class="number">18</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">int</span> year = env-&gt;CallIntMethod(obj, method_get_id);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">char</span> tmp [<span class="number">50</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">sprintf</span>(tmp, <span class="string">"%d"</span>, year);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++, year="</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    hello.append(tmp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


</li>
</ul>
<h4 id="56-Android下的播放器"><a href="#56-Android下的播放器" class="headerlink" title="56.Android下的播放器"></a>56.Android下的播放器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 设置CMake版本</span></pre></td></tr><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.4.1)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 新增的Lib库：第一个参数是自己定义的名字，第二参数是指定是动态库(.so)还是静态库(.a)，第三个参数是Lib的路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">add_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SHARED</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib.cpp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 指定ffmpeg编译好之后的Lib库目录</span></pre></td></tr><tr><td class="code"><pre><span class="line">set(JNI_LIBS_DIR $&#123;CMAKE_SOURCE_DIR&#125;&#x2F;src&#x2F;main&#x2F;jniLibs)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 在系统下找对应的Lib库</span></pre></td></tr><tr><td class="code"><pre><span class="line">find_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        log-lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">        log)</span></pre></td></tr><tr><td class="code"><pre><span class="line">find_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        android-lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">        android)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 引入FFmpeg中的libavutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">add_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SHARED</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib.cpp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">set_target_properties(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                avutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">                PROPERTIES IMPORTED_LOCATION</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $&#123;JNI_LIBS_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavutil.so)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 引入FFmpeg中的libswresample            </span></pre></td></tr><tr><td class="code"><pre><span class="line">add_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        swresample</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SHARED</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib.cpp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">set_target_properties(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                avutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">                PROPERTIES IMPORTED_LOCATION</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $&#123;JNI_LIBS_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libswresample.so)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 引入FFmpeg中的libswscale</span></pre></td></tr><tr><td class="code"><pre><span class="line">add_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        swscale</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SHARED</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib.cpp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">set_target_properties(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                avutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">                PROPERTIES IMPORTED_LOCATION</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $&#123;JNI_LIBS_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libswscale.so)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 引入FFmpeg中的libavcodec            </span></pre></td></tr><tr><td class="code"><pre><span class="line">add_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avcodec</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SHARED</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib.cpp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">set_target_properties(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                avutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">                PROPERTIES IMPORTED_LOCATION</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $&#123;JNI_LIBS_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavcodec.so)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 引入FFmpeg中的libavformat</span></pre></td></tr><tr><td class="code"><pre><span class="line">add_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avformat</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SHARED</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib.cpp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">set_target_properties(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                avutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">                PROPERTIES IMPORTED_LOCATION</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $&#123;JNI_LIBS_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavformat.so)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 引入FFmpeg中的libavfilter</span></pre></td></tr><tr><td class="code"><pre><span class="line">add_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avfilter</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SHARED</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib.cpp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">set_target_properties(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                avutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">                PROPERTIES IMPORTED_LOCATION</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $&#123;JNI_LIBS_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavfilter.so)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                </span></pre></td></tr><tr><td class="code"><pre><span class="line"># 引入FFmpeg中的libavdevice</span></pre></td></tr><tr><td class="code"><pre><span class="line">add_library(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avdevice</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SHARED</span></pre></td></tr><tr><td class="code"><pre><span class="line">        native-lib.cpp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">set_target_properties(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                avutil</span></pre></td></tr><tr><td class="code"><pre><span class="line">                PROPERTIES IMPORTED_LOCATION</span></pre></td></tr><tr><td class="code"><pre><span class="line">                $&#123;JNI_LIBS_DIR&#125;&#x2F;$&#123;ANDROID_ABI&#125;&#x2F;libavdevice.so)</span></pre></td></tr><tr><td class="code"><pre><span class="line">      </span></pre></td></tr><tr><td class="code"><pre><span class="line"># 设置第三方lib库的头文件路径          </span></pre></td></tr><tr><td class="code"><pre><span class="line">include_directories($&#123;JNI_LIBS_DIR&#125;&#x2F;includes)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"># 链接所有Lib库</span></pre></td></tr><tr><td class="code"><pre><span class="line">target_link_libraries(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            native-lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">            avutil swresample swscale avcodec avformat avfilter avdevice</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $&#123;log-lib&#125; $&#123;android-lib&#125;)</span></pre></td></tr></table></figure>


<h4 id="57-IOS下使用FFmpeg"><a href="#57-IOS下使用FFmpeg" class="headerlink" title="57.IOS下使用FFmpeg"></a>57.IOS下使用FFmpeg</h4><ul>
<li>build-ffmpeg.sh</li>
</ul>
<pre><code class="bash"><span class="meta">#!/bin/sh</span>

<span class="comment"># directories</span>
FF_VERSION=<span class="string">"4.2"</span>
<span class="comment">#FF_VERSION="snapshot-git"</span>
<span class="keyword">if</span> [[ <span class="variable">$FFMPEG_VERSION</span> != <span class="string">""</span> ]]; <span class="keyword">then</span>
  FF_VERSION=<span class="variable">$FFMPEG_VERSION</span>
<span class="keyword">fi</span>
SOURCE=<span class="string">"ffmpeg-<span class="variable">$FF_VERSION</span>"</span>
FAT=<span class="string">"FFmpeg-iOS"</span>

SCRATCH=<span class="string">"scratch"</span>
<span class="comment"># must be an absolute path</span>
THIN=`<span class="built_in">pwd</span>`/<span class="string">"thin"</span>

<span class="comment"># absolute path to x264 library</span>
<span class="comment">#X264=`pwd`/fat-x264</span>

<span class="comment">#FDK_AAC=`pwd`/../fdk-aac-build-script-for-iOS/fdk-aac-ios</span>

CONFIGURE_FLAGS=<span class="string">"--enable-cross-compile --disable-debug --disable-programs \</span>
<span class="string">                 --disable-doc --enable-pic"</span>

<span class="keyword">if</span> [ <span class="string">"<span class="variable">$X264</span>"</span> ]
<span class="keyword">then</span>
    CONFIGURE_FLAGS=<span class="string">"<span class="variable">$CONFIGURE_FLAGS</span> --enable-gpl --enable-libx264"</span>
<span class="keyword">fi</span>

<span class="keyword">if</span> [ <span class="string">"<span class="variable">$FDK_AAC</span>"</span> ]
<span class="keyword">then</span>
    CONFIGURE_FLAGS=<span class="string">"<span class="variable">$CONFIGURE_FLAGS</span> --enable-libfdk-aac --enable-nonfree"</span>
<span class="keyword">fi</span>

<span class="comment"># avresample</span>
<span class="comment">#CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-avresample"</span>

ARCHS=<span class="string">"arm64 armv7 x86_64 i386"</span>

COMPILE=<span class="string">"y"</span>
LIPO=<span class="string">"y"</span>

DEPLOYMENT_TARGET=<span class="string">"8.0"</span>

<span class="keyword">if</span> [ <span class="string">"$*"</span> ]
<span class="keyword">then</span>
    <span class="keyword">if</span> [ <span class="string">"$*"</span> = <span class="string">"lipo"</span> ]
    <span class="keyword">then</span>
        <span class="comment"># skip compile</span>
        COMPILE=
    <span class="keyword">else</span>
        ARCHS=<span class="string">"$*"</span>
        <span class="keyword">if</span> [ <span class="variable">$#</span> -eq 1 ]
        <span class="keyword">then</span>
            <span class="comment"># skip lipo</span>
            LIPO=
        <span class="keyword">fi</span>
    <span class="keyword">fi</span>
<span class="keyword">fi</span>

<span class="keyword">if</span> [ <span class="string">"<span class="variable">$COMPILE</span>"</span> ]
<span class="keyword">then</span>
    <span class="keyword">if</span> [ ! `<span class="built_in">which</span> yasm` ]
    <span class="keyword">then</span>
        <span class="built_in">echo</span> <span class="string">'Yasm not found'</span>
        <span class="keyword">if</span> [ ! `<span class="built_in">which</span> brew` ]
        <span class="keyword">then</span>
            <span class="built_in">echo</span> <span class="string">'Homebrew not found. Trying to install...'</span>
                        ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span> \
                || <span class="built_in">exit</span> 1
        <span class="keyword">fi</span>
        <span class="built_in">echo</span> <span class="string">'Trying to install Yasm...'</span>
        brew install yasm || <span class="built_in">exit</span> 1
    <span class="keyword">fi</span>
    <span class="keyword">if</span> [ ! `<span class="built_in">which</span> gas-preprocessor.pl` ]
    <span class="keyword">then</span>
        <span class="built_in">echo</span> <span class="string">'gas-preprocessor.pl not found. Trying to install...'</span>
        (curl -L https://github.com/libav/gas-preprocessor/raw/master/gas-preprocessor.pl \
            -o /usr/<span class="built_in">local</span>/bin/gas-preprocessor.pl \
            &amp;&amp; chmod +x /usr/<span class="built_in">local</span>/bin/gas-preprocessor.pl) \
            || <span class="built_in">exit</span> 1
    <span class="keyword">fi</span>

    <span class="keyword">if</span> [ ! -r <span class="variable">$SOURCE</span> ]
    <span class="keyword">then</span>
        <span class="built_in">echo</span> <span class="string">'FFmpeg source not found. Trying to download...'</span>
        curl http://www.ffmpeg.org/releases/<span class="variable">$SOURCE</span>.tar.bz2 | tar xj \
            || <span class="built_in">exit</span> 1
    <span class="keyword">fi</span>

    CWD=`<span class="built_in">pwd</span>`
    <span class="keyword">for</span> ARCH <span class="keyword">in</span> <span class="variable">$ARCHS</span>
    <span class="keyword">do</span>
        <span class="built_in">echo</span> <span class="string">"building <span class="variable">$ARCH</span>..."</span>
        mkdir -p <span class="string">"<span class="variable">$SCRATCH</span>/<span class="variable">$ARCH</span>"</span>
        <span class="built_in">cd</span> <span class="string">"<span class="variable">$SCRATCH</span>/<span class="variable">$ARCH</span>"</span>

        CFLAGS=<span class="string">"-arch <span class="variable">$ARCH</span>"</span>
        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$ARCH</span>"</span> = <span class="string">"i386"</span> -o <span class="string">"<span class="variable">$ARCH</span>"</span> = <span class="string">"x86_64"</span> ]
        <span class="keyword">then</span>
            PLATFORM=<span class="string">"iPhoneSimulator"</span>
            CFLAGS=<span class="string">"<span class="variable">$CFLAGS</span> -mios-simulator-version-min=<span class="variable">$DEPLOYMENT_TARGET</span>"</span>
        <span class="keyword">else</span>
            PLATFORM=<span class="string">"iPhoneOS"</span>
            CFLAGS=<span class="string">"<span class="variable">$CFLAGS</span> -mios-version-min=<span class="variable">$DEPLOYMENT_TARGET</span> -fembed-bitcode"</span>
            <span class="keyword">if</span> [ <span class="string">"<span class="variable">$ARCH</span>"</span> = <span class="string">"arm64"</span> ]
            <span class="keyword">then</span>
                EXPORT=<span class="string">"GASPP_FIX_XCODE5=1"</span>
            <span class="keyword">fi</span>
        <span class="keyword">fi</span>

        XCRUN_SDK=`<span class="built_in">echo</span> <span class="variable">$PLATFORM</span> | tr <span class="string">'[:upper:]'</span> <span class="string">'[:lower:]'</span>`
        CC=<span class="string">"xcrun -sdk <span class="variable">$XCRUN_SDK</span> clang"</span>

        <span class="comment"># force "configure" to use "gas-preprocessor.pl" (FFmpeg 3.3)</span>
        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$ARCH</span>"</span> = <span class="string">"arm64"</span> ]
        <span class="keyword">then</span>
            AS=<span class="string">"gas-preprocessor.pl -arch aarch64 -- <span class="variable">$CC</span>"</span>
        <span class="keyword">else</span>
            AS=<span class="string">"gas-preprocessor.pl -- <span class="variable">$CC</span>"</span>
        <span class="keyword">fi</span>

        CXXFLAGS=<span class="string">"<span class="variable">$CFLAGS</span>"</span>
        LDFLAGS=<span class="string">"<span class="variable">$CFLAGS</span>"</span>
        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$X264</span>"</span> ]
        <span class="keyword">then</span>
            CFLAGS=<span class="string">"<span class="variable">$CFLAGS</span> -I<span class="variable">$X264</span>/include"</span>
            LDFLAGS=<span class="string">"<span class="variable">$LDFLAGS</span> -L<span class="variable">$X264</span>/lib"</span>
        <span class="keyword">fi</span>
        <span class="keyword">if</span> [ <span class="string">"<span class="variable">$FDK_AAC</span>"</span> ]
        <span class="keyword">then</span>
            CFLAGS=<span class="string">"<span class="variable">$CFLAGS</span> -I<span class="variable">$FDK_AAC</span>/include"</span>
            LDFLAGS=<span class="string">"<span class="variable">$LDFLAGS</span> -L<span class="variable">$FDK_AAC</span>/lib"</span>
        <span class="keyword">fi</span>

        TMPDIR=<span class="variable">${TMPDIR/%\/}</span> <span class="variable">$CWD</span>/<span class="variable">$SOURCE</span>/configure \
            --target-os=darwin \
            --arch=<span class="variable">$ARCH</span> \
            --cc=<span class="string">"<span class="variable">$CC</span>"</span> \
            --as=<span class="string">"<span class="variable">$AS</span>"</span> \
            <span class="variable">$CONFIGURE_FLAGS</span> \
            --extra-cflags=<span class="string">"<span class="variable">$CFLAGS</span>"</span> \
            --extra-ldflags=<span class="string">"<span class="variable">$LDFLAGS</span>"</span> \
            --prefix=<span class="string">"<span class="variable">$THIN</span>/<span class="variable">$ARCH</span>"</span> \
        || <span class="built_in">exit</span> 1

        make -j3 install <span class="variable">$EXPORT</span> || <span class="built_in">exit</span> 1
        <span class="built_in">cd</span> <span class="variable">$CWD</span>
    <span class="keyword">done</span>
<span class="keyword">fi</span>

<span class="keyword">if</span> [ <span class="string">"<span class="variable">$LIPO</span>"</span> ]
<span class="keyword">then</span>
    <span class="built_in">echo</span> <span class="string">"building fat binaries..."</span>
    mkdir -p <span class="variable">$FAT</span>/lib
    <span class="built_in">set</span> - <span class="variable">$ARCHS</span>
    CWD=`<span class="built_in">pwd</span>`
    <span class="built_in">cd</span> <span class="variable">$THIN</span>/<span class="variable">$1</span>/lib
    <span class="keyword">for</span> LIB <span class="keyword">in</span> *.a
    <span class="keyword">do</span>
        <span class="built_in">cd</span> <span class="variable">$CWD</span>
        <span class="built_in">echo</span> lipo -create `find <span class="variable">$THIN</span> -name <span class="variable">$LIB</span>` -output <span class="variable">$FAT</span>/lib/<span class="variable">$LIB</span> 1&gt;&amp;2
        lipo -create `find <span class="variable">$THIN</span> -name <span class="variable">$LIB</span>` -output <span class="variable">$FAT</span>/lib/<span class="variable">$LIB</span> || <span class="built_in">exit</span> 1
    <span class="keyword">done</span>

    <span class="built_in">cd</span> <span class="variable">$CWD</span>
    cp -rf <span class="variable">$THIN</span>/<span class="variable">$1</span>/include <span class="variable">$FAT</span>
<span class="keyword">fi</span>

<span class="built_in">echo</span> Done</code></pre>
<h4 id="58-音视频进阶"><a href="#58-音视频进阶" class="headerlink" title="58.音视频进阶"></a>58.音视频进阶</h4><ul>
<li>FFmpeg Filter的使用与开发</li>
<li>FFmpeg裁剪与优化</li>
<li>视频渲染(OpenGL / Metal)</li>
<li>声音特效</li>
<li>网络传输</li>
<li>WebRTC 在浏览器之间进行P2P的传输，视频会议</li>
<li>AR技术</li>
<li>OpenCV </li>
<li>回音消除</li>
<li>降噪</li>
<li>视频秒开</li>
<li>多人多视频实时互动</li>
</ul>
]]></content>
      <tags>
        <tag>ffmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>意外未保存的数据？angular杀手锏CanDeactivate</title>
    <url>/2019/10/02/ng-canDeactivate/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>实际工作中，你有没有填写表单的时候，错误地点击了某一个按钮，或者没有完成整个填写表单过程就退回去了，最后刚刚填写的一推信息全丢失了，重新进入一片空白，还得重新填！这简直不能忍受！</p><p>在angular中有没有办法可以解决以上问题呢？答案是肯定的。<strong>CanDeactivate</strong>路由拦截器，除非给定条件成立，否则Angular路由无法从当前页面路由到另一个页面。</p><a id="more"></a>

<h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><ul>
<li>首先创建路由拦截器</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserComponent &#125; <span class="keyword">from</span> <span class="string">'./user/user.component'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserGuard <span class="keyword">implements</span> CanDeactivate&lt;UserComponent&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    canDeactivate(component: UserComponent, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (component.userForm.dirty) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.confirm(<span class="string">'你有未保存的数据，是否要离开？'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的Angular装饰器</title>
    <url>/2019/10/02/ng-decorator/</url>
    <content><![CDATA[<h4 id="1-Attribute"><a href="#1-Attribute" class="headerlink" title="1. @Attribute"></a>1. @Attribute</h4><p>顾名思义，是用来寻找宿主元素属性值的。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Directive</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'[test]'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TestDirective &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    <span class="meta">@Attribute</span>(<span class="string">'type'</span>) <span class="keyword">type</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">  </span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">type</span>); <span class="comment">// text</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;input type="text" test&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;&#125;</span></pre></td></tr></table></figure><a id="more"></a>



<h4 id="2-ViewChildren"><a href="#2-ViewChildren" class="headerlink" title="2. @ViewChildren"></a>2. @ViewChildren</h4><ul>
<li>装饰器可以从View DOM返回指定的元素或指令作为queryList。queryList存储的是项目列表对象，值得注意的是：<strong>当应用程序的状态发生变化时，Angular会自动为queryList更新对象项</strong>。</li>
<li>queryList有很多API，其中：<ul>
<li>getter属性：<ul>
<li>first — 获取第一个item</li>
<li>last — 获取最后一个item</li>
<li>length — 返回queryList的长度</li>
</ul>
</li>
<li>Method方法：<ul>
<li>map()，filter()，find()，reduce()，forEach()，some()。</li>
<li>其中toArray()，可以返回items形式的数组。</li>
<li>changes()可以进行订阅，返回items的Observable。</li>
</ul>
</li>
</ul>
</li>
<li>queryist注意事项：<ul>
<li>只有在ngAfterViewInit生命周期方法之后才能得到。</li>
<li>返回的item不包含ng-content标签里的item。</li>
</ul>
</li>
<li>默认情况下，queryList返回的组件的实例，如果想要返回原生的Dom，则需要声明第二个参数，例如：<code>@ViewChildren(AlertComponent, { read: ElementRef }) alerts: QueryList&lt;AlertComponent&gt;</code></li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'alert'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#123;&#123;type&#125;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AlertComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@Input</span>() <span class="keyword">type</span>: <span class="built_in">string</span> = <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;alert&gt;&lt;/alert&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;alert type="danger"&gt;&lt;/alert&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;alert type="info"&gt;&lt;/alert&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@ViewChildren</span>(AlertComponent) alerts: QueryList&lt;AlertComponent&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngAfterViewInit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.alerts.forEach(<span class="function"><span class="params">alertInstance</span> =&gt;</span> <span class="built_in">console</span>.log(alertInstance));</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="3-ViewChild"><a href="#3-ViewChild" class="headerlink" title="3. @ViewChild"></a>3. @ViewChild</h4><p>和ViewChildren类似，但它只返回匹配到的第一个元素或与视图DOM中的选择器匹配的指令。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'alert'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#123;&#123;type&#125;&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AlertComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@Input</span>() <span class="keyword">type</span>: <span class="built_in">string</span> = <span class="string">"success"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;alert&gt;&lt;/alert&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;div #divElement&gt;Tada!&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 返回宿主元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@ViewChild</span>(<span class="string">"divElement"</span>) div: <span class="built_in">any</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">// 返回组件实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@ViewChild</span>(AlertComponent) alert: AlertComponent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngAfterViewInit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.div);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.alert);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="4-ContentChildren"><a href="#4-ContentChildren" class="headerlink" title="4. @ContentChildren"></a>4. @ContentChildren</h4><p>装饰器从Content DOM返回指定的元素或指令作为queryList，值得注意的是：</p>
<ul>
<li>只有在ngAfterViewInit生命周期方法之后才能得到。</li>
<li>ContentChildren仅包含ng-content标签内存在的元素。</li>
<li>返回的queryList和<code>@ViewChildren</code>一样。</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'tab'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;title&#125;&#125;&lt;/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@Input</span>() title;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'tabs'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;ng-content&gt;&lt;/ng-content&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="meta">@ContentChildren</span>(TabComponent) tabs: QueryList&lt;TabComponent&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> ngAfterContentInit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="keyword">this</span>.tabs.forEach(<span class="function"><span class="params">tabInstance</span> =&gt;</span> <span class="built_in">console</span>.log(tabInstance))</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;tabs&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">     &lt;tab title="One"&gt;&lt;/tab&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">     &lt;tab title="Two"&gt;&lt;/tab&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;/tabs&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;&#125;</span></pre></td></tr></table></figure>


<h4 id="5-ContentChild"><a href="#5-ContentChild" class="headerlink" title="5. @ContentChild"></a>5. @ContentChild</h4><p>和<code>@ContentChildren</code>类似，但仅返回与Content DOM中的选择器匹配的第一个元素或指令。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'tabs'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;ng-content&gt;&lt;/ng-content&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsComponent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="meta">@ContentChild</span>(<span class="string">"divElement"</span>) div: <span class="built_in">any</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line"> ngAfterContentInit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">this</span>.div);</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'my-app'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;tabs&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">     &lt;div #divElement&gt;Tada!&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;/tabs&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> App &#123;&#125;</span></pre></td></tr></table></figure>


<h4 id="6-HostBinding"><a href="#6-HostBinding" class="headerlink" title="6. @HostBinding"></a>6. @HostBinding</h4><p>声明一个属性绑定到hosts上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Directive(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &#39;[host-binding]&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class HostBindingDirective &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostBinding(&quot;class.tooltip&quot;) tooltip &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostBinding(&quot;class.tooltip&quot;) </span></pre></td></tr><tr><td class="code"><pre><span class="line">  get tooltipAsGetter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 你的逻辑</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   </span></pre></td></tr><tr><td class="code"><pre><span class="line">  @HostBinding() type &#x3D; &quot;text&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: &#39;my-app&#39;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: &#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;input type&#x3D;&quot;text&quot; host-binding&gt; &#x2F;&#x2F; &#39;tooltip&#39; class 将被添加到host元素上</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#96;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class App &#123;&#125;</span></pre></td></tr></table></figure>


<h4 id="7-HostListener"><a href="#7-HostListener" class="headerlink" title="7. @HostListener"></a>7. @HostListener</h4><p>敬请期待，学习中…</p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular文件下载</title>
    <url>/2019/10/01/ng-file-download/</url>
    <content><![CDATA[<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件下载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">downloadPdf(id: <span class="built_in">number</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">this</span>.http.post(<span class="string">'/api/documents'</span>, &#123; id &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    .subscribe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      (base64Pdf: <span class="built_in">string</span>) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> arrayBuffer = base64ToArrayBuffer(base64Pdf); <span class="comment">// 创建Array缓冲区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        createAndDownloadBlobFile(arrayBuffer, <span class="string">'testName'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      error =&gt; <span class="built_in">console</span>.error(error)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Base64到数组缓冲区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">base64ToArrayBuffer</span>(<span class="params">base64: <span class="built_in">string</span></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> binaryString = <span class="built_in">window</span>.atob(base64); <span class="comment">//如果不使用base64，则注释这个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(binaryString.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">return</span> bytes.map(<span class="function">(<span class="params">byte, i</span>) =&gt;</span> binaryString.charCodeAt(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Blob对象并下载文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">createAndDownloadBlobFile(body, filename, extension = <span class="string">'pdf'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([body]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">const</span> fileName = <span class="string">`<span class="subst">$&#123;filename&#125;</span>.<span class="subst">$&#123;extension&#125;</span>`</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (navigator.msSaveBlob) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// IE 10+</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    navigator.msSaveBlob(blob, fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//支持HTML5下载属性的浏览器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (link.download !== <span class="literal">undefined</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> url = URL.createObjectURL(blob);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      link.setAttribute(<span class="string">'href'</span>, url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      link.setAttribute(<span class="string">'download'</span>, fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      link.style.visibility = <span class="string">'hidden'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">document</span>.body.appendChild(link);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      link.click();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">document</span>.body.removeChild(link);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>如何创建一个属于自己的Angular Library并发布到npm</title>
    <url>/2019/10/01/ng-library/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>Angular CLI 7.0.0 增加了一个令人兴奋的脚手架配置项：–create-application，其中默认值是true，如果不设置，则在新工作空间的src文件夹中创建一个新的初始应用程序项目。如果为false，则创建一个没有初始应用程序的空工作区。想了解更多配置项，<a href="https://angular.io/cli/new" target="_blank" rel="noopener">动起你的小鼠标用力点击这里</a>。</p><a id="more"></a>
<h4 id="2-第1步：创建Library库工作空间"><a href="#2-第1步：创建Library库工作空间" class="headerlink" title="2. 第1步：创建Library库工作空间"></a>2. 第1步：创建Library库工作空间</h4><p>Angular CLI 7.0.0的键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng new foo-lib --create-application&#x3D;false</span></pre></td></tr></table></figure>

<p>这个时候我们会看到项目文件中的一些变化：</p>
<ul>
<li>package.json<ul>
<li>angular需要的所有常用依赖项</li>
</ul>
</li>
<li>angular.json<ul>
<li>Angular配置文件，但没有项目</li>
</ul>
</li>
<li>README.md、tsconfig.json、tslint.json、node_modules<ul>
<li>基本和我们的构建初始化项目的内容结构一致</li>
</ul>
</li>
</ul>
<p>等等，这…，你会惊奇的发现项目目录中竟然没有src目录！别着急，因为我们使用–create-application=false所以创建的应用是空的。</p>
<h4 id="3-第2步：初始化Library库项目"><a href="#3-第2步：初始化Library库项目" class="headerlink" title="3. 第2步：初始化Library库项目"></a>3. 第2步：初始化Library库项目</h4><p>键入以下命令创建Lib项目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd foo-lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">ng generate library foo-lib --prefix&#x3D;foo</span></pre></td></tr></table></figure>

<p>其中–prefix指令是用于初始项目的时候生成选择器（ng genreate）的前缀。详细配置项请看前言部分的超链接。如果你不指定，默认是lib。</p>
<p>执行完命令之后，我们发现项目中多了一个project文件夹，里边有个Library工程：<strong>foo-lib</strong>。</p>
<h4 id="4-第3步：创建Library库测试项目"><a href="#4-第3步：创建Library库测试项目" class="headerlink" title="4. 第3步：创建Library库测试项目"></a>4. 第3步：创建Library库测试项目</h4><p>我们需要一个可以用来调用我们的Angular库的项目，键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng generate application foo-tester</span></pre></td></tr></table></figure>

<p>执行完命令之后，我们可以看到，project文件下又多出了一个文件夹：<strong>foo-tester</strong>，即我们的测试项目。另外，Angular CLI还添加了一个foo-tester-e2e项目，用于端到端测试。对于不写测试用例.spec的强迫症患者拯救大心丸：–minimal=true。</p>
<h4 id="5-第4步：开发Library和测试Library"><a href="#5-第4步：开发Library和测试Library" class="headerlink" title="5. 第4步：开发Library和测试Library"></a>5. 第4步：开发Library和测试Library</h4><html>
<h1 style="font-size: 84px">Codeing...</h1>
</html>


<h4 id="6-第5步：构建打包Library"><a href="#6-第5步：构建打包Library" class="headerlink" title="6.第5步：构建打包Library"></a>6.第5步：构建打包Library</h4><p>Angular CLI从6.1开始，始终在生产模式下构建库，因此我们不使用–prod,只需键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng build foo-lib</span></pre></td></tr></table></figure>

<h6 id="以下为温馨提醒："><a href="#以下为温馨提醒：" class="headerlink" title="以下为温馨提醒："></a>以下为温馨提醒：</h6><hr>
<blockquote>
<p>如果想构建自己的测试项目则键入以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng build foo-tester --prod</span></pre></td></tr></table></figure>

<p>和构建Library库不一样的是，构建测试应用必须指定：–prod。</p>
<blockquote>
<p>如果想启动自己的测试项目，则键入以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng serve foo-tester</span></pre></td></tr></table></figure>

<blockquote>
<p>如果想测试自己的Library，则键入以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng test foo-lib</span></pre></td></tr></table></figure>

<blockquote>
<p>如果想测试自己的测试项目，则键入以下命令：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng test foo-tester</span></pre></td></tr></table></figure>

<hr>
<h4 id="7-第6步：发布我们自己的Library"><a href="#7-第6步：发布我们自己的Library" class="headerlink" title="7. 第6步：发布我们自己的Library"></a>7. 第6步：发布我们自己的Library</h4><p>如果想发布到npm，则需注册一个自己的npm账号，如果已经有了且已经登录，则键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd dist&#x2F;foo-lib</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm publish</span></pre></td></tr></table></figure>


<h4 id="8-第7步：使用我们的Library"><a href="#8-第7步：使用我们的Library" class="headerlink" title="8. 第7步：使用我们的Library"></a>8. 第7步：使用我们的Library</h4><p>和其他第三方包一样，只需要npm install你的自己发布的Library包即可，项目根目录终端键入以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i -S foo-lib</span></pre></td></tr></table></figure>

<p>这个时候你会看到你的项目package.json中的dependencies依赖项中增加了一项：foo-lib。然后在Angular模块中引入即可。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FooLibModule &#125; <span class="keyword">from</span> <span class="string">'foo-lib'</span>; <span class="comment">// 导入你的Library</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  declarations: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    AppComponent</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  imports: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    BrowserModule,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    FooLibModule <span class="comment">// 导入你的Library</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  providers: [],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  bootstrap: [AppComponent]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span></pre></td></tr></table></figure>

<h4 id="9-第8步：最后的惊喜，如果维护自己的Library"><a href="#9-第8步：最后的惊喜，如果维护自己的Library" class="headerlink" title="9. 第8步：最后的惊喜，如果维护自己的Library"></a>9. 第8步：最后的惊喜，如果维护自己的Library</h4><p>npm发布版本有些注意事项，每次构建发布需要注意以下规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1.npm插件发布</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm addUser  &#x2F;&#x2F; 分别输入用户名、密码、邮箱</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm publish  &#x2F;&#x2F; 直接发布</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm login    &#x2F;&#x2F; 非第一次发版本则用此命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm unpublish --force &#x2F;&#x2F; 取消插件发布【谨慎使用】</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm deprecate &lt;pkg&gt;[@&lt;version&gt;] &lt;message&gt; &#x2F;&#x2F; 并不会在社区里撤销你已有的包，但会在任何人尝试安装这个包的时候得到警告</span></pre></td></tr><tr><td class="code"><pre><span class="line">npx force-unpublish package-name &#39;原因描述&#39; &#x2F;&#x2F; 撤销不了？？试试这个</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 2.npm插件更新</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm version patch  &#x2F;&#x2F; 补丁【1.0.1】</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm version minor  &#x2F;&#x2F; 小改【1.1.0】</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm version major  &#x2F;&#x2F; 大改【2.0.0】</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#x2F;&#x2F; 注意需要再一次执行：npm publish</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 3.查看远程包版本信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm view xxx versions</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 4.npm查看本地全局安装过的包</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm list -g --depth&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 5.npm查看全局的包的安装路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm root -g</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 6.npm查看当前包的安装路径</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm root</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 7.npm将包安装到全局环境中</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install xxx -g</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 8.npm将信息写入package.json，并自动把模块和版本号添加到dependencies部分</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install xxx –save</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i -S xxx &#x2F;&#x2F; 简写版本</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 9.npm将信息写入package.json，并自动把模块和版本号添加到devdependencies部分</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install xxx –save-dve</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm i -D xxx &#x2F;&#x2F; 简写版本</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 10.npm单独更新某个包</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm update xxx</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 11.npm更新至最新版</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install -g npm</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 12.npm淘宝镜像</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm config set registry http:&#x2F;&#x2F;registry.npm.taobao.org</span></pre></td></tr></table></figure>


<h5 id="10-第9步：最后的最后，如果你喜欢这篇文章，不妨点个赞"><a href="#10-第9步：最后的最后，如果你喜欢这篇文章，不妨点个赞" class="headerlink" title="10. 第9步：最后的最后，如果你喜欢这篇文章，不妨点个赞"></a>10. 第9步：最后的最后，如果你喜欢这篇文章，不妨点个赞</h5>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular Router Resolve预加载数据</title>
    <url>/2019/09/30/ng-router-resolve/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>开发中我们可能会遇到这样一个问题：路由到一个新的页面前可能需要某些数据才能在要加载的新页面请求数据，这个时候如果我们路由到新页面再去获取预先的数据有可能来不及或者是带来不好的用户体验。这个时候如果有一种办法能在即将加载新页面的时候就预准备好了必要数据，等到加载新页面的时候整好可以拿到数据，那就很完美了。<strong>Angular Router Resolve</strong>就是这样的一种存在！</p><a id="more"></a>
<h6 id="以下是例子"><a href="#以下是例子" class="headerlink" title="以下是例子"></a>以下是例子</h6><hr>
<h4 id="2-第1步：创建用户组件"><a href="#2-第1步：创建用户组件" class="headerlink" title="2. 第1步：创建用户组件"></a>2. 第1步：创建用户组件</h4><p>创建一个用户模块，假设我们一进到页面就要先拿到用户数据。在组件内部，可以通过注入ActivatedRoute来加载预取数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ActivatedRoute &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">'./user'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApiService &#125; <span class="keyword">from</span> <span class="string">'./api.service'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: <span class="string">'app-editor'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;div class="row"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;div class="col-md-3 mb-3" *ngFor="let user of users"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &lt;div class="card"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                &lt;div class="card-body"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                    &lt;h5 class="card-title"&gt;&#123;&#123;user.name&#125;&#125;&lt;/h5&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                    &lt;p class="card-text"&gt;&#123;&#123;user.username&#125;&#125;&lt;/p&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                    &lt;a [href]="'http://www.'+user.website" class="btn btn-primary"&gt;&#123;&#123;user.website&#125;&#125;&lt;/a&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                &lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">  `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  styles: [<span class="string">``</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserComponent <span class="keyword">implements</span> OnInit &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  users: Observable&lt;User[]&gt;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    <span class="keyword">private</span> api: ApiService,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    <span class="keyword">private</span> router: ActivatedRoute</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">  </span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.users = <span class="keyword">this</span>.router.snapshot.data.users; <span class="comment">// 获取到预加载的数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.users);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  ngOnInit() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="3-第2步：创建用户服务"><a href="#3-第2步：创建用户服务" class="headerlink" title="3. 第2步：创建用户服务"></a>3. 第2步：创建用户服务</h4><p>创建一个service用于网络请求获取数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">'./user'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ApiService &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    url = <span class="string">'https://jsonplaceholder.typicode.com/users'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">        <span class="keyword">private</span> http: HttpClient</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    </span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    getUsers() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get&lt;User[]&gt;(<span class="keyword">this</span>.url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="4-第3步：创建用户模型"><a href="#4-第3步：创建用户模型" class="headerlink" title="4. 第3步：创建用户模型"></a>4. 第3步：创建用户模型</h4><p>创建数据Modal，这里有快捷方式，VSCode也有对应插件：JSON to ，或者使用在线版本的：<a href="http://www.jsontots.com/" target="_blank" rel="noopener">JsonToTs</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> User &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    id: <span class="built_in">number</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    username: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    email: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    address: Address;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    phone: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    website: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    company: Company;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Company &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    catchPhrase: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    bs: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Address &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    street: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    suite: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    city: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    zipcode: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    geo: Geo;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Geo &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lat: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lng: <span class="built_in">string</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="5-第4步：创建路由Resolve"><a href="#5-第4步：创建路由Resolve" class="headerlink" title="5. 第4步：创建路由Resolve"></a>5. 第4步：创建路由Resolve</h4><p>实现Resolve接口的同时要重写resolve()方法，方法有两参数：ActivatedRouteSnapshot 和RouterStateSnaphot，这里用不到，主要返回我们想要预加载的数据的Observable（或promise或数据本身）。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Resolve, ActivatedRouteSnapshot, RouterStateSnapshot &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">'./user'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ApiService &#125; <span class="keyword">from</span> <span class="string">'./api.service'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    providedIn: <span class="string">'root'</span> <span class="comment">// angular6新引入的装饰器配置，如果指定了'root'模式，就不用在任何@NgModule()装饰器中declarations(声明)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserResolveGuard <span class="keyword">implements</span> Resolve&lt;User[]&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">        <span class="keyword">private</span> apiService: ApiService</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    </span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    resolve(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        route: ActivatedRouteSnapshot,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        state: RouterStateSnapshot</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ): Observable&lt;<span class="built_in">any</span>&gt; | <span class="built_in">Promise</span>&lt;<span class="built_in">any</span>&gt; | <span class="built_in">any</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.apiService.getUsers();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="6-第5步：路由配置"><a href="#6-第5步：路由配置" class="headerlink" title="6. 第5步：路由配置"></a>6. 第5步：路由配置</h4><p>在路由中，指定接受对象的resolve属性，它将通过路由器数据携带指定组件的预取或预加载数据。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserComponent &#125; <span class="keyword">from</span> <span class="string">'./user.component'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; UserResolveGuard &#125; <span class="keyword">from</span> <span class="string">'./user.guard'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123; path: <span class="string">'edit'</span>, component: UserComponent, resolve: &#123; users: UserResolveGuard&#125; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  imports: [RouterModule.forRoot(routes)],</span></pre></td></tr><tr><td class="code"><pre><span class="line">  exports: [RouterModule]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123; &#125;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>深度解析angular中的ng-template</title>
    <url>/2019/09/29/ng-template-two/</url>
    <content><![CDATA[<h4 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h4><p>我们在angular项目中经常会用到<code>&lt;ng-template&gt;</code>，但是我们是否有想过放置在里边的代码最终都去哪儿了呢？</p><p>其实angular中的<code>&lt;ng-template&gt;</code>和HMTL中的<code>&lt;template&gt;</code>是类似的，都是作为预渲染的一个内容模版器，DOM解析器会处理里边的元素内容，以确保内容有效，但是元素的内容不会被渲染，在适当的时机，我们可以让它渲染到页面上。<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template" target="_blank" rel="noopener">有关HTML的<code>&lt;template&gt;</code>介绍可以查看这里</a>。</p><a id="more"></a>

<h4 id="2-ng-template"><a href="#2-ng-template" class="headerlink" title="2. ng-template"></a>2. ng-template</h4><p>在@angular/core的核心库封装下，模版ng-template使用起来变得很简单。例如：</p>
<ol>
<li><p>这里我们声明模版</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">greet</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Thanks for your interest.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>在xxx.component.ts中，我们可以使用@ViewChild装饰器获取模版实例</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(‘greet’) greetTemplate: TemplateRef&lt;<span class="built_in">any</span>&gt;;</span></pre></td></tr></table></figure>
</li>
<li><p>怎么使用呢？我们可以创建一个占位符来将模版插入，即：ng-container</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> #<span class="attr">placeholder</span>&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>在xxx.component.ts中，我们可以使用@ViewChild装饰器获取占位符实例并通过addTemplate()方法将模版插入</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(‘placeholder’, &#123;read: ViewContainerRef&#125;) placeholderRef: ViewContainerRef;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">addTemplate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.placeholderRef.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.placeholderRef.createEmbeddedView(<span class="keyword">this</span>.greetTemplate); <span class="comment">// 创建嵌入式视图插入模版</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>我们还可以在模版中使用变量</p>
</li>
</ol>
<ul>
<li>html中：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-template</span> #<span class="attr">details</span> <span class="attr">let-name</span> <span class="attr">let-place</span>=<span class="string">”place”</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”container”</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”row”</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”col-md-3</span>"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”border</span> <span class="attr">p-3</span>"&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;place&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ng-template</span>&gt;</span></span></pre></td></tr></table></figure>
<ul>
<li>ts中：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ViewChild</span>(‘details’) detailsTemplate: TemplateRef&lt;<span class="built_in">any</span>&gt;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.placeholderRef.createEmbeddedView(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">this</span>.detailsTemplate,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123; $implicit: ‘Pranesh’, place: ‘Erode’ &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>
<p>$implicit 属性值将被分配给未初始化的参数：let-name，let-place 初始化为上下文对象中放置属性：place。</p>
<p>除了在ts中通过typescript创建嵌入视图插入模版以及模版变量。我们也可以在html中通过angular提供的ngTemplateOutlet模版指令嵌入。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> [<span class="attr">ngTemplateOutlet</span>]=<span class="string">”details”</span> [<span class="attr">ngTemplateOutletContext</span>]=<span class="string">”&#123;$implicit:</span> ‘<span class="attr">Pranesh</span>’, <span class="attr">place:</span> ‘<span class="attr">Erode</span>’&#125;”&gt;</span><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular templates模版内函数的最佳实践</title>
    <url>/2019/09/28/ng-templates/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在angular中，我们应该在templates中尽可能的少写逻辑代码，保持简洁，这样页面的加载效率会更好。但是我们经常会遇到要将某某属性绑定到元素上，又或者转换、动态计算以便插入对应的字符串。当我们在templates模版（插值表达式&#123;&#123;&#125;&#125;）中调用函数进行数据绑定或者字符串插值的时候，我们会发现我们的函数会被无限次调用（含鼠标在页面上移动）！</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">这是个很糟糕的体验，那么究其原因是什么呢？答案是：angular变更检测机制。函数在angular生命周期钩子函数ngDoCheck之后，这个钩子函数直接链接到每个变化检测周期。虽然templates模版（插值表达式&#123;&#123;&#125;&#125;）提供了getter方法，但它只能从某个变量中访问属性，我们如果计算函数更复杂，那么就会浪费用户机器资源，因为我们必须使用资源来计算相同的结果。</span></pre></td></tr></table></figure><a id="more"></a>

<h4 id="2-Angular纯管道"><a href="#2-Angular纯管道" class="headerlink" title="2. Angular纯管道"></a>2. Angular纯管道</h4><p>我们理想的是：只有在传递的任何参数发生变化时才应调用我们的函数。解决方案就是：Angular纯管道！它监视不可变类型的值更改以及对象的引用更改。如果想了解更详细的pipe管道信息可以查阅官方文档<br><a href="https://www.angular.cn/guide/pipes#pure-and-impure-pipes" target="_blank" rel="noopener">纯(pure)管道与非纯(impure)管道
</a>。</p>
<ul>
<li>Angular纯管道方案：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Pipe, PipeTransform&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: <span class="string">'execute'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ExecutePipe <span class="keyword">implements</span> PipeTransform &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  transform(value: <span class="built_in">Function</span>, context, ...args): <span class="built_in">any</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Function</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> value.apply(context, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>使用方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设组件中有一个命名的函数getErrorMessage负责根据flag和用户获取某些消息role。使用方式如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&#123;getErrorMessage | execute:this:flag:role&#125;&#125;</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular中使用pipe管道过滤结果集</title>
    <url>/2019/09/27/ng-pipe-filter/</url>
    <content><![CDATA[<h4 id="1-引子"><a href="#1-引子" class="headerlink" title="1. 引子"></a>1. 引子</h4><p>假设我们需要一个过滤管道来负责过滤应用程序中的列表。</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Pipe</span>(&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  name: ‘filter’</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> FilterPipe <span class="keyword">implements</span> PipeTransform &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  transform(arr: <span class="built_in">string</span>[], searchValue: <span class="built_in">string</span>) &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!searchValue) <span class="keyword">return</span> arr;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">value</span> =&gt;</span> &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> value.toLowerCase().indexOf(searchValue.toLowerCase()) &gt; <span class="number">-1</span>; </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a>


<p>这里我们创建来一个数组，通过indexOf方法过滤数组中的元素，最终得到我们想要的列表。<br>使用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Component &#125; from &#39;@angular&#x2F;core&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import &#123; FormControl &#125; from &#39;@angular&#x2F;forms&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@Component(&#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  selector: ‘my-app’,</span></pre></td></tr><tr><td class="code"><pre><span class="line">   template: &#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     &lt;input [formControl]&#x3D;&quot;search&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">     &lt;div *ngFor&#x3D;”let item of (items | filter:search.value)”&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">       &#123;&#123;item&#125;&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">     &lt;&#x2F;div&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#96;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">export class AppComponent &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  search &#x3D; new FormControl(); </span></pre></td></tr><tr><td class="code"><pre><span class="line">  items &#x3D; [‘One’, ‘Two’, ‘Three’, ‘Four’];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="2-问题"><a href="#2-问题" class="headerlink" title="2. 问题"></a>2. 问题</h4><p>以上很完美解决了列表过滤的需求，但是这个时候产品想向用户展示检索结果集的数量。大多数时候，我们可能会想，不就是一个数组长度的事儿，有什么难的，然后codeing如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">”let</span> <span class="attr">item</span> <span class="attr">of</span> (<span class="attr">items</span> | <span class="attr">filter:search.value</span>)”&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#123;item&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;(items | filter:search.value).length&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure>

<p>但是，真不要这么干！你会发现我们写的管道会运行两次。angular4之后这个问题有了解决方案，那就是: <strong>as</strong>。借助as关键字将管道结果分配给局部变量，还等什么，升级改进我们的代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">”let</span> <span class="attr">item</span> <span class="attr">of</span> (<span class="attr">items</span> | <span class="attr">filter:search.value</span>) <span class="attr">as</span> <span class="attr">result</span>”&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123;&#123;item&#125;&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&#123;result.length&#125;&#125;</span></pre></td></tr></table></figure>

<p>这个时候你会发现控制台报错了…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cannot read property ‘length’ of undefined</span></pre></td></tr></table></figure>

<p>这不是玩我吗？有局部变量啊，为啥还会报错，解决方案是： <strong>ngIf</strong></p>
<p>最终的code如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ng-container</span> *<span class="attr">ngIf</span>=<span class="string">”(items</span> | <span class="attr">filter:search.value</span>) <span class="attr">as</span> <span class="attr">result</span>”&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">”let</span> <span class="attr">item</span> <span class="attr">of</span> <span class="attr">result</span>”&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123;item&#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Count: <span class="tag">&lt;<span class="name">b</span>&gt;</span>&#123;&#123;result.length&#125;&#125;<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">ng-container</span>&gt;</span></span></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular项目从CSS迁移到SCSS</title>
    <url>/2019/09/26/ng-scss-migrate/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>通常，当我们使用angular-cli启动应用程序时，默认情况下它将使用css，除非我们按以下方式创建项目。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng new your_application --style&#x3D;scss</span></pre></td></tr></table></figure><p>但是当我们开发项目到一半的时候，突然有一天研究某些东西后发现使用scss比css好用多了，这个时候我们将面临一个大问题，怎么将当前项目的css全部转成scss进行以后的开发且置为默认项呢？别着急，往下看！</p><a id="more"></a>



<h4 id="2-第1步：更改步骤"><a href="#2-第1步：更改步骤" class="headerlink" title="2. 第1步：更改步骤"></a>2. 第1步：更改步骤</h4><p>如果你使用的是最新的angular-cli，那最好了，如果不是请检查当前的angular-cli版本是否大于6.0.7，如果以上都没有问题，那么OK，请使用以下命令更改配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng config schematics.@schematics&#x2F;angular:component.styleext scss</span></pre></td></tr></table></figure>

<p>这个时候你会看到脚本会在项目的angular.json文件中做了如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;schematics&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;@schematics&#x2F;angular:component&quot;: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &quot;styleext&quot;: &quot;scss&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="3-第2步：重命名css文件"><a href="#3-第2步：重命名css文件" class="headerlink" title="3. 第2步：重命名css文件"></a>3. 第2步：重命名css文件</h4><p>这个是头疼问题了，总不能挨个挨个修改吧，答案是拒绝的啦。如果您使用的是mac或linux，请从终端打开src文件夹，然后键入以下命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find . -name &quot;*.css&quot; -exec bash -c &#39;mv &quot;$1&quot; &quot;$&#123;1%.css&#125;&quot;.scss&#39; - &#39;&#123;&#125;&#39; \;</span></pre></td></tr></table></figure>
<p>ok！漂亮，现在你可以看下项目所有以.css后缀的文件全都重命名为.scss的后缀了！</p>
<p>==警告：请确保一定在项目src目录下打开终端，否则后果很严重！！！==</p>
<h4 id="3-更改所有引用"><a href="#3-更改所有引用" class="headerlink" title="3. 更改所有引用"></a>3. 更改所有引用</h4><p>有一些文件是需要修改css文件的位置的，通常有以下这些：</p>
<ul>
<li><strong>xxx.component.ts</strong>文件中@Component装饰器里styleUrls的css文件路径。</li>
<li>如果您引用bootstrap或font-awesome，则可以将导入其css文件的文件更改为.scss替代项。</li>
<li>在你的angular.json文件中，可能会引用你的style.css文件，你必须将它们改为.scss，因为我们已经重命名了它。</li>
</ul>
<p>完成了以上步骤之后（PS：如果你使用了font-awesome），则可能还会意外出现以下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR in .&#x2F;src&#x2F;styles.scss (.&#x2F;node_modules&#x2F;raw-loader!.&#x2F;node_modules&#x2F;postcss-loader&#x2F;lib??embedded!.&#x2F;node_modules&#x2F;sass-loader&#x2F;lib&#x2F;loader.js??ref--15-3!.&#x2F;src&#x2F;styles.scss)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Module Error (from .&#x2F;node_modules&#x2F;postcss-loader&#x2F;lib&#x2F;index.js):</span></pre></td></tr><tr><td class="code"><pre><span class="line">(Emitted value instead of an instance of Error) CssSyntaxError: &#x2F;node_modules&#x2F;font-awesome&#x2F;scss&#x2F;_path.scss:9:4: Can&#39;t resolve &#39;..&#x2F;fonts&#x2F;fontawesome-webfont.woff&#39; in &#39;&#x2F;src&#39;</span></pre></td></tr></table></figure>

<p>好吧，这是我们不愿意看到的，在@importfont-awesome scss 之前添加以下行解决了这个问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$fa-font-path: &quot;~font-awesome&#x2F;fonts&quot;;</span></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【take, first, takeUntil, concatAll】</title>
    <url>/2019/06/25/rxjs-take-first-takeUnitl-concatAll/</url>
    <content><![CDATA[<h1 id="Rxjs学习之路"><a href="#Rxjs学习之路" class="headerlink" title="Rxjs学习之路"></a>Rxjs学习之路</h1><h4 id="1、小贴士"><a href="#1、小贴士" class="headerlink" title="1、小贴士"></a>1、小贴士</h4><p>这篇文章是我的Angular Rxjs Series中的第篇三文章，在继续阅读本文之前，您至少应该熟悉系列中的第一篇基础文章：</p><p><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></p><p><a href="https://www.jianshu.com/p/fc0e30328de3" target="_blank" rel="noopener">Rxjs【Observable】</a></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 特别提示：以下的操作符介绍均采用rxjs6的写法！！！</span></span></pre></td></tr></table></figure><a id="more"></a>





<h4 id="2、take"><a href="#2、take" class="headerlink" title="2、take"></a>2、take</h4><pre><code>take就是取前几个元素后就结束</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：      interval(1000).pipe(take(4))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:    -----0-----1-----2-----3-----4--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                      take(4)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest     -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> takeObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">takeObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="3、first"><a href="#3、first" class="headerlink" title="3、first"></a>3、first</h4><pre><code>first就是取第一个元素后结束</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：       interval(1000).pipe(first())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:     -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                      first()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:     -----0|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> firstObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">firstObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="4、takeUntil"><a href="#4、takeUntil" class="headerlink" title="4、takeUntil"></a>4、takeUntil</h4><pre><code>takeUntil就是等到某一件事情【Observable形式的】发生的时候，让当前O1bservable 直送出完成(complete)信号</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：       interval(1000).pipe(takeUntil(click))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:     -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * click:      --------------------c-----</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                  takeUntil(click)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:     -----0-----1-----2--|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clickObservable = fromEvent(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'game'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'click'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> takeUnitlObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeUntil(clickObservable)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">takeUnitlObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="5、concatAll"><a href="#5、concatAll" class="headerlink" title="5、concatAll"></a>5、concatAll</h4><pre><code>有的时候我们的Observable里的元素还是Observable（Observable&lt;Observable&lt;T&gt;&gt;）,可以类似数组里边的元素还是数组（[[1,2], [3, 4]]）,这个时候我们希望是二维变成一维（[1, 2, 3, 4]），即：Observable&lt;T&gt;，concatAll就是用来摊平的。</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 必须先等前一个observable完成(complete)，才会继续下一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：Observable里边还是Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * click:       ------------c------------c-----...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                  map(e =&gt; of(1,2,3))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      ------------o------------o-----...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                           \            \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                            (1,2,3)|     (1,2,3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                  concatAll()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      ------------(1,2,3)------(1,2,3)--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eventObservable = fromEvent</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'egg'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'click'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mapObservable = eventObservable.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    map(<span class="function"><span class="params">x</span> =&gt;</span> of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> concatAllObservable = mapObservable.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatAll()</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">concatAllObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h4 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h4><pre><code>例子里边有一个拖拉的example，将上一篇文章的map以及本文的takeUntil、concatAll结合起来的综合例子，可以参考</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy, Renderer2 &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subscription, interval, fromEvent, of &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; take, first, takeUntil, map, concatAll &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    selector: <span class="string">'app-rxjs-demo'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;h3&gt;Rxjs Demo To Study! -- Operators操作符(take, first, takeUntil, concatAll)&lt;/h3&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button (click)="takeHandler()"&gt;take&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="firstHandler()"&gt;first&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="takeUntilHandler()"&gt;takeUntil&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="concatAllHandler()"&gt;concatAll&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" id="game"&gt;click me end Game&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" id="egg"&gt;click egg&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;div class="drag" id="drag"&gt;drag me&lt;/div&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;app-back&gt;&lt;/app-back&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    styles: [<span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .mgLeft &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            margin-left: 20px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .drag &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            width: 70px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            height: 24px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            font-size: 12px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            text-align: center;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            background: #EEE;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            line-height: 24px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            cursor: default;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            border-radius: 4px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            position: absolute;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            left: 580px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            top: 155px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RxjsDemoComponent <span class="keyword">implements</span> OnInit, OnDestroy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    firstSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeUnitlSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatAllSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    dragSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">        <span class="keyword">private</span> renderer: Renderer2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="params">    </span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnInit(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 简易拖拉</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mouseDown = fromEvent(<span class="built_in">document</span>.getElementById(<span class="string">'drag'</span>), <span class="string">'mousedown'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mouseMove = fromEvent(<span class="built_in">document</span>.body, <span class="string">'mousemove'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mouseUp = fromEvent(<span class="built_in">document</span>.body, <span class="string">'mouseup'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> drag = mouseDown.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            map(_ =&gt; mouseMove.pipe(takeUntil(mouseUp))),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            concatAll(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            map(<span class="function">(<span class="params">event: MouseEvent</span>) =&gt;</span> (&#123;x: event.clientX, y: event.clientY&#125;))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.dragSubscription = drag.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">console</span>.log(<span class="string">'=====drag: '</span>, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">const</span> dragDom = <span class="built_in">document</span>.getElementById(<span class="string">'drag'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="built_in">console</span>.log(<span class="string">'dragDom'</span>, dragDom);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 第一种写法：angular封装</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// this.renderer.setStyle(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     dragDom,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     'top',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     `$&#123;value.y&#125;px`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// this.renderer.setStyle(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     dragDom,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     'left',</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">//     `$&#123;value.x&#125;px`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="comment">// 第二种写法：原生JS支持</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                dragDom.style.left = value.x + <span class="string">'px'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dragDom.style.top = value.y + <span class="string">'px'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====drag: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====drag: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：      interval(1000).pipe(take(4))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:    -----0-----1-----2-----3-----4--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                      take(4)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest     -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> takeObservable = interval(<span class="number">1000</span>).pipe(take(<span class="number">4</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.takeSubscription = takeObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====table操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    firstHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：       interval(1000).pipe(first())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:     -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                      first()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:     -----0|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> firstObservable = interval(<span class="number">1000</span>).pipe(first());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.firstSubscription = firstObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====first操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeUntilHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：       interval(1000).pipe(takeUntil(click))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:     -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * click:      --------------------c-----</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                  takeUntil(click)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:     -----0-----1-----2--|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> clickObservable = fromEvent(<span class="built_in">document</span>.getElementById(<span class="string">'game'</span>), <span class="string">'click'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> takeUnitlObservable = interval(<span class="number">1000</span>).pipe(takeUntil(clickObservable));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.takeUnitlSubscription =  takeUnitlObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeUntil操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatAllHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 必须先等前一个observable完成(complete)，才会继续下一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：Observable里边还是Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * click:       ------------c------------c-----...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                  map(e =&gt; of(1,2,3))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      ------------o------------o-----...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                           \            \</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                            (1,2,3)|     (1,2,3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                  concatAll()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      ------------(1,2,3)------(1,2,3)--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> eventObservable = fromEvent(<span class="built_in">document</span>.getElementById(<span class="string">'egg'</span>), <span class="string">'click'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mapObservable = eventObservable.pipe(map(<span class="function"><span class="params">x</span> =&gt;</span> of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> concatAllObservable = mapObservable.pipe(concatAll());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.concatAllSubscription = concatAllObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concatAll操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnDestroy() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.takeSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.takeSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.firstSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.firstSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.takeUnitlSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.takeUnitlSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.concatAllSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.concatAllSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dragSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.dragSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【Observable】</title>
    <url>/2019/06/24/rxjs-observable/</url>
    <content><![CDATA[<pre><code>Observable创建的方式Rxjs库已经内置支持了很多操作符，所以我们只需要理解并使用即可</code></pre><h4 id="1、create"><a href="#1、create" class="headerlink" title="1、create"></a>1、create</h4><pre><code>从任何形式创建一个Observable，静态方法，可以直接使用。</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myObservable = Observable.create(<span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observer.next(<span class="string">'Vivian'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observer.next(<span class="string">'Jeanne'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        observer.next(<span class="string">'====create rxjs！'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, <span class="number">2000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observer.complete();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observer.next(<span class="string">'not work ?'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'===1====start'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable.subscribe(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1. 创建Observable: '</span>, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'===1====end'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种写法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> innerObserver = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'2. 创建Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'2. 创建Observable--Error'</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'2.创建Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'===2====start'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable.subscribe(innerObserver);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'===2====end'</span>);</span></pre></td></tr></table></figure><a id="more"></a>


<h4 id="2、of"><a href="#2、of" class="headerlink" title="2、of"></a>2、of</h4><pre><code>从任意形式创建同步的Observable</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> syncObservable = of(<span class="string">'Vivian'</span>, <span class="string">'Jeanne'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">syncObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====一次同步传递值: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====一次同步传递值--Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====一次同步传递值: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="3、from"><a href="#3、from" class="headerlink" title="3、from"></a>3、from</h4><pre><code>从已经存在的数组或者Promise、字符串、对象等创建Observable</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种：来自数组的Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> existArray = [<span class="string">'Vivian'</span>, <span class="string">'Jeanne'</span>, <span class="string">'2019'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> existObservable = <span class="keyword">from</span>(existArray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">existObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======从已存在的数组生成Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======从已存在的阵列生成Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======从已存在的数组生成Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种：来自Promise的Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promiseObservable = <span class="keyword">from</span>(<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resolve(<span class="string">'Hello RXJS!'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;, <span class="number">3000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">promiseObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======来自Promise的Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======来自Promise的Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======来自Promise的Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h4 id="4、fromEvent"><a href="#4、fromEvent" class="headerlink" title="4、fromEvent"></a>4、fromEvent</h4><pre><code>从事件（DOM事件等）创建Observable</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种：FromEvent Observable 来自DOM事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fromEventObservable = fromEvent(<span class="built_in">document</span>.getElementById(<span class="string">'fromEvent'</span>), <span class="string">'click'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fromEventObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEvent Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEvent Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEvent Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种：FromEventPattern Observable 来自类事件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> producer = <span class="keyword">new</span> Producer();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fromEventPatternObservable = fromEventPattern(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (handler) =&gt; producer.addEventListener(handler),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    (handler) =&gt; producer.removeEventListener(handler)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">fromEventPatternObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEventPattern Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEventPattern Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======FromEventPattern Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">producer.notify(<span class="string">'Hello! Can you hear me?'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义Observable【类事件】</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Producer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    listener: <span class="built_in">any</span>[];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.listener = [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    addEventListener(listener) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> listener === <span class="string">'function'</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.listener.push(listener);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'listener 必须是 function!'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    removeEventListener(listener) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.listener.splice(<span class="keyword">this</span>.listener.indexOf(listener), <span class="number">1</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    notify(message) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.listener.forEach(<span class="function"><span class="params">listener</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            listener(message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="5、empty"><a href="#5、empty" class="headerlink" title="5、empty"></a>5、empty</h4><pre><code>啥也不干直接让Observable执行complete()结束，类似于数学上的0</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> emptyObservable = empty();</span></pre></td></tr><tr><td class="code"><pre><span class="line">emptyObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======empty Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======empty Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======empty Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="6、never"><a href="#6、never" class="headerlink" title="6、never"></a>6、never</h4><pre><code>永远也不会执行complete()结束的Observable，类似于数学上的无穷大∞</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> neverObservable = never();</span></pre></td></tr><tr><td class="code"><pre><span class="line">neverObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======never Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======never Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======never Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="7、interval"><a href="#7、interval" class="headerlink" title="7、interval"></a>7、interval</h4><pre><code>定时器，每隔一定时间送出一个元素</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> intervalObservable = interval(<span class="number">1000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">intervalObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======interval Observable: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======interval Observable---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======interval Observable: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="8、timer"><a href="#8、timer" class="headerlink" title="8、timer"></a>8、timer</h4><pre><code>延时定时器</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// timer Observable延时定时器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timerObservable = timer(<span class="number">1000</span>, <span class="number">5000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">timerObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// timer Observable延时定时器【指定日期之后开始执行】</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timerFromDateObservable = timer(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2019-05-26 23:22:00'</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">timerFromDateObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器【指定日期之后开始执行】: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器【指定日期之后开始执行】---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器【指定日期之后开始执行】: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// timer Observable延时定时器, 延迟毫秒执行一次之后取消订阅</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> onceTimerObservable = timer(<span class="number">3000</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">onceTimerObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器, 延迟毫秒执行一次之后取消订阅: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器, 延迟毫秒执行一次之后取消订阅---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======timer Observable延时定时器, 延迟毫秒执行一次之后取消订阅: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
<h4 id="Angular-Rxjs-Series"><a href="#Angular-Rxjs-Series" class="headerlink" title="Angular Rxjs Series"></a>Angular Rxjs Series</h4><ol>
<li><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></li>
<li><a href="https://www.jianshu.com/p/b81a5ad72641" target="_blank" rel="noopener">Rxjs【map、mapTo、filter】</a></li>
<li><a href="https://www.jianshu.com/p/55b6df31cc3e" target="_blank" rel="noopener">Rxjs【take, first, takeUntil, concatAll】</a></li>
</ol>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【skip, takeLast, last, concat, startWith, merge】</title>
    <url>/2019/06/23/rxjs-skip-takeLast-last-concat-startWith-merge/</url>
    <content><![CDATA[<h1 id="Rxjs学习之路"><a href="#Rxjs学习之路" class="headerlink" title="Rxjs学习之路"></a>Rxjs学习之路</h1><h4 id="1、小贴士"><a href="#1、小贴士" class="headerlink" title="1、小贴士"></a>1、小贴士</h4><p>这篇文章是我的Angular Rxjs Series中的第篇四文章，在继续阅读本文之前，您至少应该熟悉系列中的第一篇基础文章：</p><p><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></p><p><a href="https://www.jianshu.com/p/fc0e30328de3" target="_blank" rel="noopener">Rxjs【Observable】</a></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 特别提示：以下的操作符介绍均采用rxjs6的写法！！！</span></span></pre></td></tr></table></figure><a id="more"></a>





<h4 id="2、skip"><a href="#2、skip" class="headerlink" title="2、skip"></a>2、skip</h4><pre><code>略过前几个送出元素</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 略过前几个送出元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(skip(3))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                        skip(3)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      -----------------------3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> skipObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    skip(<span class="number">3</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">skipObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="3、takeLast"><a href="#3、takeLast" class="headerlink" title="3、takeLast"></a>3、takeLast</h4><pre><code>倒过来取最后几个</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * takeLast必须等到整个observable完成(complete)，才能知道最后的元素有哪些，并且同步送出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(take(4), takeLast(2))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                      takeLast(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      -----------------------(2,3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> takeLastObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">4</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeLast(<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">takeLastObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="4、last"><a href="#4、last" class="headerlink" title="4、last"></a>4、last</h4><pre><code>去最后送出的那个元素</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 取得最后一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(take(4), last())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                      last()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      -----------------------3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> lastObsverable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">4</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    last()</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">lastObsverable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h4 id="5、concat"><a href="#5、concat" class="headerlink" title="5、concat"></a>5、concat</h4><pre><code>把多个observable合并成一个</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 把多个observable 实例合并成一个, 必须先等前一个observable完成(complete)，才会继续下一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source1:     -----0-----1-----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source2:     (3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source3:     (45)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *            concat()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      -----0-----1-----2-----(345|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source01 = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source02 = of(<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> source03 = of(<span class="number">4</span>, <span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法：使用Operator操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> concatObservable = source01.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concat(source02, source03)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">concatObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种写法：使用rxjs内置静态函数 -- import &#123; concat as rxConcat&#125; from 'rxjs';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> concatObservable2 = rxConcat(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    source01,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    source02,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    source03</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">concatObservable2.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="6、startWith"><a href="#6、startWith" class="headerlink" title="6、startWith"></a>6、startWith</h4><pre><code>在observable的一开始就要发送的元素(非Observable形式的)</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 一开始就要发送的元素, startWith 的值是一开始就同步发出的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(startWith(0))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                     startWith(0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      0-----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> startWidthObservable = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    startWith(<span class="number">0</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    take(<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">startWidthObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="7、merge"><a href="#7、merge" class="headerlink" title="7、merge"></a>7、merge</h4><pre><code>merge跟concat一样都是用来合并Observable，但是稍微有些不同</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 把多个observable同时处理, merge 的逻辑有点像是OR(||)，就是当两个observable 其中一个被触发时都可以被处理，这很常用在一个以上的按钮具有部分相同的行为。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source:      ----0----1----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * source2:     --0--1--2--3--4--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *                   merge()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * newest:      --0-01--21-3--(24)--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observable01 = interval(<span class="number">500</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observable02 = interval(<span class="number">300</span>).pipe(take(<span class="number">6</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种写法：使用Operator操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeObservable = observable01.pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    merge(observable02)</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mergeObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 第二种写法：使用rxjs内置静态函数 -- import &#123; merge as rxMerge &#125; from 'rxjs';</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mergeObservable2 = rxMerge(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observable01,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    observable02</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr><tr><td class="code"><pre><span class="line">mergeObservable2.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h5 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h5><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subscription, interval, of, concat <span class="keyword">as</span> rxConcat, merge <span class="keyword">as</span> rxMerge &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; skip, take, takeLast, last, concat, startWith, merge &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    selector: <span class="string">'app-rxjs-demo'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;h3&gt;Rxjs Demo To Study! -- Operators操作符(skip, takeLast, last, concat, startWith, merge)&lt;/h3&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button (click)="skipHandler()"&gt;skip&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="takeLastHandler()"&gt;takeLast&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="lastHandler()"&gt;last&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="concatHandler()"&gt;concat&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="startWithHandler()"&gt;startWith&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="mergeHandler()"&gt;merge&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;app-back&gt;&lt;/app-back&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    styles: [<span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .mgLeft &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            margin-left: 20px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RxjsDemoComponent <span class="keyword">implements</span> OnInit, OnDestroy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    skipSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeLastSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lastSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatSubscription2: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    startWithSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mergeSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mergeSubscription2: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnInit(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    skipHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 略过前几个送出元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(skip(3))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                        skip(3)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      -----------------------3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> skipObservable = interval(<span class="number">1000</span>).pipe(skip(<span class="number">3</span>), take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.skipSubscription = skipObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====skip操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeLastHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * takeLast必须等到整个observable完成(complete)，才能知道最后的元素有哪些，并且同步送出</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(take(4), takeLast(2))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                      takeLast(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      -----------------------(2,3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> takeLastObservable = interval(<span class="number">1000</span>).pipe(take(<span class="number">4</span>), takeLast(<span class="number">2</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.takeLastSubscription = takeLastObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====takeLast操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    lastHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 取得最后一个元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(take(4), last())</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      -----0-----1-----2-----3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                      last()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      -----------------------3|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> lastObsverable = interval(<span class="number">1000</span>).pipe(take(<span class="number">4</span>), last());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.lastSubscription = lastObsverable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====last操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    concatHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 把多个observable 实例合并成一个, 必须先等前一个observable完成(complete)，才会继续下一个</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source1:     -----0-----1-----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source2:     (3)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source3:     (45)|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *            concat()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      -----0-----1-----2-----(345|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> source01 = interval(<span class="number">1000</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> source02 = of(<span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> source03 = of(<span class="number">4</span>, <span class="number">5</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第一种写法：使用Operator操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> concatObservable = source01.pipe(concat(source02, source03));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.concatSubscription = concatObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第二种写法：使用rxjs内置静态函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> concatObservable2 = rxConcat(source01, source02, source03);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.concatSubscription2 = concatObservable2.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====concat2操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    startWithHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 一开始就要发送的元素, startWith 的值是一开始就同步发出的</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(startWith(0))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      -----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                     startWith(0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      0-----0-----1-----2-----3--..</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> startWidthObservable = interval(<span class="number">1000</span>).pipe(startWith(<span class="number">0</span>), take(<span class="number">4</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.startWithSubscription = startWidthObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====startWith操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    mergeHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 把多个observable同时处理, merge 的逻辑有点像是OR(||)，就是当两个observable 其中一个被触发时都可以被处理，这很常用在一个以上的按钮具有部分相同的行为。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source:      ----0----1----2|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * source2:     --0--1--2--3--4--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *                   merge()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * newest:      --0-01--21-3--(24)--5|</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> observable01 = interval(<span class="number">500</span>).pipe(take(<span class="number">3</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> observable02 = interval(<span class="number">300</span>).pipe(take(<span class="number">6</span>));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第一种写法：使用Operator操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mergeObservable = observable01.pipe(merge(observable02));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.mergeSubscription = mergeObservable.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 第二种写法：使用rxjs内置静态函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> mergeObservable2 = rxMerge(observable01, observable02);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.mergeSubscription2 = mergeObservable2.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: Error: '</span>, err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'=====merge2操作符: complete!'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnDestroy() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.skipSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.skipSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.takeLastSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.takeLastSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lastSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.lastSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.concatSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.concatSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.concatSubscription2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.concatSubscription2.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.startWithSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.startWithSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mergeSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.mergeSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mergeSubscription2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.mergeSubscription2.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>



<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Github检索方法总结</title>
    <url>/2019/06/23/git-github-search/</url>
    <content><![CDATA[<h4 id="1、in-name-关键词"><a href="#1、in-name-关键词" class="headerlink" title="1、in:name 关键词"></a>1、in:name 关键词</h4><pre><code>1. 这里的name是指仓库的名称
2. 例如在检索栏里输入：in:name ng toast</code></pre><h4 id="2、in-description-关键词"><a href="#2、in-description-关键词" class="headerlink" title="2、in:description 关键词"></a>2、in:description 关键词</h4><pre><code>1. 这里的description是仓库的描述文字
2. 例如在检索栏里输入：in:description angular calendar</code></pre><h4 id="3、in-readme-关键词"><a href="#3、in-readme-关键词" class="headerlink" title="3、in:readme 关键词"></a>3、in:readme 关键词</h4><a id="more"></a><pre><code>1. 这里的readme是仓库的README.md文件
2. 例如在检索栏里输入：in:readme CalendarModule</code></pre><h4 id="4、stars-gt-数字-关键词"><a href="#4、stars-gt-数字-关键词" class="headerlink" title="4、stars:&gt;=数字 关键词"></a>4、stars:&gt;=数字 关键词</h4><pre><code>1. 数字是开源项目的stars的数目
2. =可以不用加（可选）
3. 例如在检索栏输入：stars:&gt;=1000 image lazy</code></pre><h4 id="5、stars-A-B-关键词"><a href="#5、stars-A-B-关键词" class="headerlink" title="5、stars:A..B 关键词"></a>5、stars:A..B 关键词</h4><pre><code>1. A..B是表示在开源项目stars数目在大于A小于B
2. 例如在检索栏中输入：stars:1000..2000 image lazy</code></pre><h4 id="6、size-gt-数字-关键词"><a href="#6、size-gt-数字-关键词" class="headerlink" title="6、size:&gt;=数字 关键词"></a>6、size:&gt;=数字 关键词</h4><pre><code>1. size是开源项目包的大小，单位是K
2. =可以不用加（可选）
3. 例如在地址栏中输入：size:&gt;=4000 carousel</code></pre><h4 id="7、pushed-gt-日期-关键词"><a href="#7、pushed-gt-日期-关键词" class="headerlink" title="7、pushed:&gt;日期 关键词"></a>7、pushed:&gt;日期 关键词</h4><pre><code>1. pushed表示开源项目提交代码，日期就是提交代码的最近一次日期
2. 例如在检索栏中输入：pushed:&gt;2019-01-01 angular popover</code></pre><h4 id="8、license-开源协议-关键词"><a href="#8、license-开源协议-关键词" class="headerlink" title="8、license:开源协议 关键词"></a>8、license:开源协议 关键词</h4><pre><code>1. license为GitHub仓库的开源协议
2. 例如在检索栏中输入：license:MIT angular table</code></pre><h4 id="9、language-A-关键词"><a href="#9、language-A-关键词" class="headerlink" title="9、language:A 关键词"></a>9、language:A 关键词</h4><pre><code>1. language是开源项目的主开发语言，A是具体的语言
2. 例如在检索栏中输入：language:typescript datepicker</code></pre><h4 id="10、user-A-关键词"><a href="#10、user-A-关键词" class="headerlink" title="10、user:A 关键词"></a>10、user:A 关键词</h4><pre><code>1. user为开源项目的作者，A为具体的作者
2. 关键词可以不加（可选）
3. 例如在检索栏中输入：user:yyx990803</code></pre><h4 id="11、org-A-关键词"><a href="#11、org-A-关键词" class="headerlink" title="11、org:A 关键词"></a>11、org:A 关键词</h4><pre><code>1. org为组织，A为具体的组织名
2. 关键词可以不加（可选）
3. 例如在检索栏中输入：org:angular</code></pre><hr>
<h4 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h4><pre><code>1. 以上语句可以组合查找
2. 例如在检索栏中输入：stars:&gt;=1000 image lazy language:javascript</code></pre>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs【map、mapTo、filter】</title>
    <url>/2019/06/19/rxjs-map-mapto-filter/</url>
    <content><![CDATA[<h1 id="Rxjs学习之路"><a href="#Rxjs学习之路" class="headerlink" title="Rxjs学习之路"></a>Rxjs学习之路</h1><h4 id="1、小贴士"><a href="#1、小贴士" class="headerlink" title="1、小贴士"></a>1、小贴士</h4><p>这篇文章是我的Angular Rxjs Series中的第二篇文章，在继续阅读本文之前，您至少应该熟悉系列中的第一篇基础文章：</p><p><a href="https://www.jianshu.com/p/ce1a15957a7f" target="_blank" rel="noopener">Rxjs6都改变了些什么？</a></p><p><a href="https://www.jianshu.com/p/fc0e30328de3" target="_blank" rel="noopener">Rxjs【Observable】</a></p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 特别提示：以下的操作符介绍均采用rxjs6的写法！！！</span></span></pre></td></tr></table></figure><a id="more"></a>





<h4 id="2、map"><a href="#2、map" class="headerlink" title="2、map"></a>2、map</h4><pre><code>1、其实map操作符和js数组里的map差不多，都是传入一个callback，执行callback回传新值.
2、具体例子如下代码：</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如： interval(1000).pipe(map(x =&gt; x + 1));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *       -----0-----1-----2-----3--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *              map(x =&gt; x + 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *       -----1-----2-----3-----4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>

<h4 id="3、mapTo"><a href="#3、mapTo" class="headerlink" title="3、mapTo"></a>3、mapTo</h4><pre><code>1、mapTo是把传进来的值改写成为一个固定值
2、具体例子如下代码：</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如： interval(1000).pipe(mapTo(2))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *      -----0-----1-----2-----3--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *              mapTo(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *      -----2-----2-----2-----2--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapTo(<span class="string">'mapTo'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<h4 id="4、filter"><a href="#4、filter" class="headerlink" title="4、filter"></a>4、filter</h4><pre><code>1、其实filter操作符和js数组里的filter也差不多，都是传入一个call back，执行callback，根据回传的boolean值过滤源数据，再回传新值。
2、具体例子如下代码：</code></pre><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> * 例如：interval(1000).pipe(filter(x =&gt; x % 2 === 0));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *      -----0-----1-----2-----3-----4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *           filter(x =&gt; x % 2 === 0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> *      -----0-----------2-----------4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"> */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>


<hr>
<h4 id="完整的例子"><a href="#完整的例子" class="headerlink" title="完整的例子"></a>完整的例子</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, OnDestroy &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable, of, interval, Subscription &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map, take, mapTo, filter &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    selector: <span class="string">'app-rxjs-demo'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    template: <span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;h3&gt;Rxjs Demo To Study! -- Operators操作符(map、mapTo、filter)&lt;/h3&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button (click)="originMapHandler()"&gt;origin map&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="mapHandler()"&gt;map&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="mapToHandler()"&gt;mapTo&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;button class="mgLeft" (click)="filterHandler()"&gt;mapTo&lt;/button&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &lt;app-back&gt;&lt;/app-back&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    styles: [<span class="string">`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        .mgLeft &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            margin-left: 20px;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    `</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> RxjsDemoComponent <span class="keyword">implements</span> OnInit, OnDestroy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    originMapSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapToSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    filterSubscription: Subscription;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnInit(): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 图谱</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// ----- 代表一个Observable</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----X 代表一个Observable有错误发生</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// -----| 代表一个Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// (1234)| 代表一个同步Observable结束</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    map(source, callback) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> Observable.create(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> source.subscribe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (value) =&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        observer.next(callback(value));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; <span class="keyword">catch</span> (e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        observer.error(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (err) =&gt; &#123; observer.error(err); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                () =&gt; &#123; observer.complete(); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    originMapHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// 1. 传统写法创建Map操作符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> people = of(<span class="string">'Jerry'</span>, <span class="string">'Anna'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">const</span> helloPlople = <span class="keyword">this</span>.map(people, <span class="function"><span class="params">item</span> =&gt;</span> item + <span class="string">' Hello~'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.originMapSubscription = helloPlople.subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======传统写法创建Map操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======传统写法创建Map操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======传统写法创建Map操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如： interval(1000).pipe(map(x =&gt; x + 1));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *       -----0-----1-----2-----3--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              map(x =&gt; x + 1)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *       -----1-----2-----3-----4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.mapSubscription = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            map(<span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            take(<span class="number">4</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======map操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    mapToHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如： interval(1000).pipe(mapTo(2))</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      -----0-----1-----2-----3--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *              mapTo(2)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      -----2-----2-----2-----2--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.mapToSubscription = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            mapTo(<span class="string">'mapTo'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            take(<span class="number">3</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======mapTo操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    filterHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/**</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         * 例如：interval(1000).pipe(filter(x =&gt; x % 2 === 0));</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      -----0-----1-----2-----3-----4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *           filter(x =&gt; x % 2 === 0)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         *      -----0-----------2-----------4--...</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">         */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.filterSubscription = interval(<span class="number">1000</span>).pipe(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            filter(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            take(<span class="number">5</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ).subscribe(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符: '</span>, value); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            error: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符---Error: '</span>, error); &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            complete: <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'======filter操作符: complete'</span>); &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ngOnDestroy() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.originMapSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.originMapSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mapSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.mapSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mapToSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.mapToSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.filterSubscription) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.filterSubscription.unsubscribe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<hr>
<h4 id="Marble-Diagrams【宝珠图】"><a href="#Marble-Diagrams【宝珠图】" class="headerlink" title="Marble Diagrams【宝珠图】"></a>Marble Diagrams【宝珠图】</h4><pre><code>1. 这个Marble Diagrams【宝珠图】可以很灵活的表现出每个操作符的使用
2. 下面是超链接传送门</code></pre><p><a href="https://rxmarbles.com/" target="_blank" rel="noopener">Marble Diagrams【宝珠图】</a></p>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Rxjs6都改变了些什么？</title>
    <url>/2019/06/05/rxjs-version/</url>
    <content><![CDATA[<h1 id="RxJS-6变化-概述"><a href="#RxJS-6变化-概述" class="headerlink" title="RxJS 6变化-概述"></a>RxJS 6变化-概述</h1><pre><code>RxJS 6主要用于Angular应用程序，从Angular 6开始，它是一个强制依赖。

与RxJS版本5相比，RxJS 6（或更高版本）引入了两个重要更改：
1. import的导入结构发生变化
2. pipe()作为一种链接运算符的方法，旧的链接方式将不起作用
3. 一些operator操作符被重命名

特别提示： 如果你让旧的代码仍旧继续使用，你需要进行以下操作（不推荐再用旧的方法了）
npm install --save rxjs-compat  // 安装向后兼容依赖包</code></pre><a id="more"></a><h4 id="1-对于import语句，变化如下："><a href="#1-对于import语句，变化如下：" class="headerlink" title="1. 对于import语句，变化如下："></a>1. 对于import语句，变化如下：</h4><ul>
<li><p>Observable, Subject</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Subject &#125; <span class="keyword">from</span> <span class="string">'rxjs/Subject'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 现在：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable, Subject &#125; <span class="keyword">from</span> <span class="string">'rxjs</span></span></pre></td></tr></table></figure>
</li>
<li><p>Operators</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/take'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 现在</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map, take &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span></span></pre></td></tr></table></figure>
</li>
<li><p>Methods to Create Observables</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/of'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// or</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; of &#125; <span class="keyword">from</span> <span class="string">'rxjs/observable/of'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 现在：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; of &#125; <span class="keyword">from</span> <span class="string">'rxjs'</span></span></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-在Rxjs6中如何使用operator操作符"><a href="#2-在Rxjs6中如何使用operator操作符" class="headerlink" title="2. 在Rxjs6中如何使用operator操作符"></a>2. 在Rxjs6中如何使用operator操作符</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以前：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .map(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .subscribe(...);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 现在：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .pipe(map(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .subscribe(...);</span></pre></td></tr></table></figure>
<ul>
<li>特别声明：在rxjs6中引入的pipe()方法（它实际上已经在RxJS 5.5中添加）,pipe获取无限量的参数，每个参数都是您想要应用于的operator Observable, 像下边这样：(rxjs会按照你将它们传递给pipe()方法的顺序执行- 从左到右。)<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; map, switchMap, throttle &#125; <span class="keyword">from</span> <span class="string">'rxjs/operators'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">myObservable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .pipe(map(<span class="function"><span class="params">data</span> =&gt;</span> data * <span class="number">2</span>), switchMap(...), throttle(...))</span></pre></td></tr><tr><td class="code"><pre><span class="line">  .subscribe(...);</span></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="3-重命名的operator操作符"><a href="#3-重命名的operator操作符" class="headerlink" title="3. 重命名的operator操作符"></a>3. 重命名的operator操作符</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// operator相关</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">catch</span>() =&gt; catchError()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>() =&gt; tap()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span>() =&gt; finalize()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>() =&gt; switchAll()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// Observable相关</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span><span class="function"><span class="params">()</span> =&gt;</span> throwError()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">fromPromise() =&gt; <span class="keyword">from</span>()  <span class="comment">// 自动检测类型</span></span></pre></td></tr></table></figure>

<hr>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这个是YouTube的链接，如果有需要的可以看看更详细的，传送门在底下蓝色超链接！</span></pre></td></tr></table></figure>


<p><a href="https://www.youtube.com/watch?v=X9fdpGthrXA&feature=youtu.be" target="_blank" rel="noopener">Fix your RxJS 6 Imports &amp; Operators - What’s New in RxJS 6?</a></p>
]]></content>
      <tags>
        <tag>rxjs</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 常见问题及其解决方案</title>
    <url>/2019/05/25/flutter-issues/</url>
    <content><![CDATA[<h4 id="1-Waiting-for-another-flutter-command-to-release-the-startup-lock…"><a href="#1-Waiting-for-another-flutter-command-to-release-the-startup-lock…" class="headerlink" title="1. Waiting for another flutter command to release the startup lock…"></a>1. Waiting for another flutter command to release the startup lock…</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// 杀死dart进程</span></pre></td></tr><tr><td class="code"><pre><span class="line">flutter packages pub build_runner watch</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// 终极方案,删除flutter SDK文件夹目录下的bin/cache下边的lockfile文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm ./flutter/bin/cache/lockfile</span></pre></td></tr></table></figure><a id="more"></a>


<h4 id="2-Could-not-find-a-file-named-“pubspec-yaml”-in-https-github-com-MarkOSullivan94-dart-config-git-7a88fbc5fd987dce78e468ec45e9e841a49f422d"><a href="#2-Could-not-find-a-file-named-“pubspec-yaml”-in-https-github-com-MarkOSullivan94-dart-config-git-7a88fbc5fd987dce78e468ec45e9e841a49f422d" class="headerlink" title="2. Could not find a file named “pubspec.yaml” in https://github.com/MarkOSullivan94/dart_config.git 7a88fbc5fd987dce78e468ec45e9e841a49f422d."></a>2. Could not find a file named “pubspec.yaml” in <a href="https://github.com/MarkOSullivan94/dart_config.git" target="_blank" rel="noopener">https://github.com/MarkOSullivan94/dart_config.git</a> 7a88fbc5fd987dce78e468ec45e9e841a49f422d.</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// 删除flutter SDK文件夹目录下的.pub-cache下边的git文件夹</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm ./flutter/.pub-cache/git</span></pre></td></tr></table></figure>


<h4 id="3-点击任意空白处，软键盘收起"><a href="#3-点击任意空白处，软键盘收起" class="headerlink" title="3.点击任意空白处，软键盘收起"></a>3.点击任意空白处，软键盘收起</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">GestureDetector(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">透明也响应处理</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    behavior: HitTestBehavior.translucent,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    onTap: () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="comment">/// <span class="markdown">触摸收起键盘</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      FocusScope.of(context).requestFocus(FocusNode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    child: Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">/// <span class="markdown">xxx</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>


<h4 id="4-Oops-flutter-has-exited-unexpectedly-Sending-crash-report-to-Google"><a href="#4-Oops-flutter-has-exited-unexpectedly-Sending-crash-report-to-Google" class="headerlink" title="4. Oops; flutter has exited unexpectedly. Sending crash report to Google."></a>4. Oops; flutter has exited unexpectedly. Sending crash report to Google.</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// <span class="markdown">在终端执行命令</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">xcode-select --install</span></pre></td></tr></table></figure>


<h4 id="5-页面返回隐藏虚拟导航条"><a href="#5-页面返回隐藏虚拟导航条" class="headerlink" title="5. 页面返回隐藏虚拟导航条"></a>5. 页面返回隐藏虚拟导航条</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> deactivate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SystemChrome.restoreSystemUIOverlays();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">super</span>.deactivate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="6-如果没有网络连接，如何启动静态html页面而不是URL-【webview】"><a href="#6-如果没有网络连接，如何启动静态html页面而不是URL-【webview】" class="headerlink" title="6. 如果没有网络连接，如何启动静态html页面而不是URL ?【webview】"></a>6. 如果没有网络连接，如何启动静态html页面而不是URL ?【webview】</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">Future check() <span class="keyword">async</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">try</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">final</span> result = <span class="keyword">await</span> InternetAddress.lookup(<span class="string">'google.com'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (result.isNotEmpty &amp;&amp; result[<span class="number">0</span>].rawAddress.isNotEmpty) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        connectionStatus = <span class="keyword">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">print</span>(<span class="string">"connected <span class="subst">$connectionStatus</span>"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">on</span> SocketException <span class="keyword">catch</span> (_) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      connectionStatus = <span class="keyword">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="built_in">print</span>(<span class="string">"not connected <span class="subst">$connectionStatus</span>"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">FutureBuilder(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    future: check(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    builder: (BuildContext context, AsyncSnapshot&lt;<span class="built_in">dynamic</span>&gt; snapshot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (connectionStatus == <span class="keyword">true</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/// <span class="markdown">如果网络正常连接</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> SafeArea(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            child: WebviewScaffold(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                url: <span class="string">"http://www.baidu.com"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">/// <span class="markdown">如果网络连接失败</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> SafeArea(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            child: WebviewScaffold(</span></pre></td></tr><tr><td class="code"><pre><span class="line">              url: <span class="built_in">Uri</span>.dataFromString(<span class="string">'&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">              mimeType: <span class="string">'text/html'</span>).toString()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>


<h4 id="7-判断当前路由是否在栈顶"><a href="#7-判断当前路由是否在栈顶" class="headerlink" title="7. 判断当前路由是否在栈顶"></a>7. 判断当前路由是否在栈顶</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ModalRoute.of(context) API可以获取当前路由对象以及当前页面的所有属性</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 如果路由active，还位于最顶层，则isCurrent为true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">ModalRoute.of(context).isCurrent</span></pre></td></tr></table></figure>

<h4 id="8-B-widget嵌套在A-Widget里（两个Widget分别在不同的Class里），如何在B-Widget里获取A-Widget的数据（变量、state、方法等等）并修改呢？"><a href="#8-B-widget嵌套在A-Widget里（两个Widget分别在不同的Class里），如何在B-Widget里获取A-Widget的数据（变量、state、方法等等）并修改呢？" class="headerlink" title="8. B widget嵌套在A Widget里（两个Widget分别在不同的Class里），如何在B Widget里获取A Widget的数据（变量、state、方法等等）并修改呢？"></a>8. B widget嵌套在A Widget里（两个Widget分别在不同的Class里），如何在B Widget里获取A Widget的数据（变量、state、方法等等）并修改呢？</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  A(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _AState createState() =&gt; _AState();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">A</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/// <span class="markdown">这个是A widget定义的一个变量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> name = <span class="string">'Jerry'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/// <span class="markdown">这个是B Widget里声明的方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">void</span> getName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">TODO</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Widget build(BuildContext context) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="comment">/// <span class="markdown">这里嵌套了B Widget</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       child: B(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  B(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _BState createState() =&gt; _BState();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">B</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Widget build(BuildContext context) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">      child: InkWell(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        child: Text(<span class="string">'this is B Widget!'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        onTap: () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          setState(() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">/// <span class="markdown">在B Widget里边怎么获取A Widget的变量并修改呢？, 方案如下：</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            _AState aWidgetState = context.ancestorStateOfType(TypeMatcher&lt;_AState&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">/// <span class="markdown">获取A里的变量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            aWidgetState.name = <span class="string">'Anna'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="comment">/// <span class="markdown">调用A里的方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            aWidgetState.getName();</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="9-B-widget嵌套在A-Widget里（两个Widget分别在不同的Class里），如何在A-Widget里获取B-Widget里的数据（变量、state、方法等等）呢？"><a href="#9-B-widget嵌套在A-Widget里（两个Widget分别在不同的Class里），如何在A-Widget里获取B-Widget里的数据（变量、state、方法等等）呢？" class="headerlink" title="9. B widget嵌套在A Widget里（两个Widget分别在不同的Class里），如何在A Widget里获取B Widget里的数据（变量、state、方法等等）呢？"></a>9. B widget嵌套在A Widget里（两个Widget分别在不同的Class里），如何在A Widget里获取B Widget里的数据（变量、state、方法等等）呢？</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  A(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _AState createState() =&gt; _AState();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_AState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">A</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">final</span> GlobalKey&lt;_BState&gt; _bStateKey = GlobalKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Widget build(BuildContext context) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">获取B里边的变量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">print</span>(_bStateKey.currentState.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">调用B里边的方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    _bStateKey.currentState.getName();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">       child: B(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  B(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  _BState createState() =&gt; _BState();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_BState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">B</span>&gt; </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/// <span class="markdown">这个是B Widget里声明的变量</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">var</span> name = <span class="string">'Jerry'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="comment">/// <span class="markdown">这个是B Widget里声明的方法</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">void</span> getName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/// <span class="markdown">TODO</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="meta">@override</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  Widget build(BuildContext context) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> Container(</span></pre></td></tr><tr><td class="code"><pre><span class="line">       child: Text(<span class="string">'This is B Widget!'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<h4 id="10-Exception-ideviceinfo-return-an-error-ERROR-Could-not-connect-to-lockdownd-error-code-17-或者-21"><a href="#10-Exception-ideviceinfo-return-an-error-ERROR-Could-not-connect-to-lockdownd-error-code-17-或者-21" class="headerlink" title="10. Exception: ideviceinfo return an error: ERROR: Could not connect to lockdownd, error code -17(或者-21)"></a>10. Exception: ideviceinfo return an error: ERROR: Could not connect to lockdownd, error code -17(或者-21)</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下两种方式可供使用：</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 如果你的设备上连接有真机，用的模拟器测试，拔掉手机手机的USB线，再试试运行到模拟器。</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 断开设备，在终端窗口中，键入：sudo pkill usbmuxd（它将自动重新启动），再次连接设备</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular自定义路由复用策略，返回上一个页面页面保持</title>
    <url>/2019/04/20/ng-custom-route-reuse-strategy/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们都知道在Angular的SPA应用中，应用通过路由在各个页面之间进行导航。 默认情况下，用户在离开一个页面时，这个页面(组件)会被Angular销毁，用户的输入信息也随之丢失，当用户再次进入这个页面时，看到的是一个新生成的页面(组件)，之前的输入信息都没了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在实际工作中遇到了这样的问题，部分页面需要保存用户的输入信息，用户再次进入页面时需要回到上一次离开时的状态，部分页面每次都要刷新页面，不需要保存用户信息。而页面间的导航正是通过路由实现的，Angular的默认行为不能满足我们的需求！好在Angular提供了RouteReuseStrategy接口，通过实现这个接口，我们就可以自定义路由复用策略。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;具体的实现如下：</p><a id="more"></a>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 写一个类实现`RouteReuseStrategy`接口[如果是Ionic工程则需要实现IonicRouteStrategy]自定义路由复用策略</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy&#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">export</span> <span class="keyword">class</span> CustomRouteReuseStrategy <span class="keyword">implements</span> RouteReuseStrategy &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        handlers: &#123; [key: <span class="built_in">string</span>]: DetachedRouteHandle &#125; = &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        shouldDetach(route: ActivatedRouteSnapshot): <span class="built_in">boolean</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> route.data.reload || <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    store(route: ActivatedRouteSnapshot, handle: &#123;&#125;): <span class="built_in">void</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (route.data.reload &amp;&amp; <span class="keyword">this</span>.getUrl(route)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">this</span>.handlers[<span class="keyword">this</span>.getUrl(route)] = handle;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    shouldAttach(route: ActivatedRouteSnapshot): <span class="built_in">boolean</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> !!<span class="keyword">this</span>.handlers[<span class="keyword">this</span>.getUrl(route)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    retrieve(route: ActivatedRouteSnapshot): <span class="built_in">any</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.getUrl(route)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.handlers[<span class="keyword">this</span>.getUrl(route)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): <span class="built_in">boolean</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> future.routeConfig === curr.routeConfig &amp;&amp; <span class="built_in">JSON</span>.stringify(future.params) === <span class="built_in">JSON</span>.stringify(curr.params);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    getUrl(route: ActivatedRouteSnapshot) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (!route.parent.url.join(<span class="string">'/'</span>) || !route.url.join(<span class="string">'/'</span>))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">let</span> url = <span class="string">''</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (route.parent.url.join(<span class="string">'/'</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            url += route.parent.url.join(<span class="string">'/'</span>) + <span class="string">'/'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (route.url.join(<span class="string">'/'</span>)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            url += route.url.join(<span class="string">'/'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> url === <span class="string">''</span> ? <span class="literal">null</span> : url;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 在AppModule中配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@NgModule</span>(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    declarations: [ ... ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span>: &#123; ... &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    providers: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123; provide: RouteReuseStrategy, useClass: CustomRouteReuseStrategy &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 在Routing中配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">  ...,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#123; path: <span class="string">'class-list'</span>, component: ClassListPage, data: &#123; reload: <span class="literal">true</span> &#125; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">];</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>angular表单校验</title>
    <url>/2019/04/19/ng-forms-valid/</url>
    <content><![CDATA[<p>最近在写项目的时候，产品要求对表单的必填输入项进行友好的校验提示，效果如图：</p><html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-714366d7491a42fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html><p>“ 这个需求很简单，怎么实现我不管。 “ ，还能说什么，就是干，具体实现如下：</p><ol>
<li><p>对Angular内置的表单css属性设置想要的样式</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css样式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.isvalid</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed red <span class="meta">!important</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>html文件里设置即时样式检测<code>[class.isvalid]</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--非formArray--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"addressName [class.isvalid]="</span><span class="attr">isFieldInvalidTouched</span>('<span class="attr">addressName</span>')" <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入收件人姓名"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--formArray--&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">formControlName</span>=<span class="string">"addressName [class.isvalid]="</span><span class="attr">isArrayFieldInvalidTouched</span>(<span class="attr">i</span>, '<span class="attr">addressName</span>')" <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入收件人姓名"</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>ts文件里注入核心方法</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 表单字段校验</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">validateAllFormFields(formGroup: <span class="built_in">any</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">Object</span>.keys(formGroup.controls).forEach(<span class="function"><span class="params">field</span> =&gt;</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">const</span> control = formGroup.get(field);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">if</span> (control <span class="keyword">instanceof</span> FormControl) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          control.markAsTouched(&#123; onlySelf: <span class="literal">true</span> &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (control <span class="keyword">instanceof</span> FormGroup) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">this</span>.validateAllFormFields(control);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (control <span class="keyword">instanceof</span> FormArray) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="keyword">this</span>.validateAllFormFields(control);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 表单控件校验</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">isFieldInvalidTouched(field: <span class="built_in">any</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.form.get(field).invalid &amp;&amp; <span class="keyword">this</span>.form.get(field).touched;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 表单控件校验</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">isArrayFieldInvalidTouched(index, field: <span class="built_in">any</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.xxxArray.controls[index].get(field).invalid &amp;&amp;<span class="keyword">this</span>.xxxArray.controls[index].get(field).touched;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 获取FormArray</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">get</span> xxxArray(): FormArray &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.form.get(<span class="string">'xxxArray'</span>) <span class="keyword">as</span> FormArray;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 设置FormArray</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> setXxxArray() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// TODO</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 表单提交</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">ensure() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.form.valid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.validateAllFormFields(<span class="keyword">this</span>.form);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">this</span>.orderService.presentToast(<span class="string">'表单信息不全, 请填写完整～'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment">// TODO</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ol>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>css保留空格和换行符</title>
    <url>/2019/04/18/css-white-space/</url>
    <content><![CDATA[<p>最近写项目遇到接收后台数据（带格式的字符串），前端显示的时候，要保留其空格和换行符的问题，自己查找了半天，具体实现方式如下，希望能帮到其他也遇到同样问题的小伙伴吧。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// css保留空格和换行符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: pre-wrap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// css保留换行符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attribute">white-space</span>: pre-line;</span></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>ngx-datatable排序图标</title>
    <url>/2019/04/18/ngx-datatable-sort/</url>
    <content><![CDATA[<ol>
<li><p>給ngx-datatable设置css属性</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">/deep/ .ngx-datatable&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-class">.sortable</span> <span class="selector-class">.sort-btn</span>:before &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">font-family</span>: data-table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">content</span>: <span class="string">"c"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-class">.sortable</span> <span class="selector-class">.sort-btn</span><span class="selector-class">.datatable-icon-down</span>:before &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">content</span>: <span class="string">"f"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="selector-class">.sortable</span> <span class="selector-class">.sort-btn</span><span class="selector-class">.datatable-icon-up</span>:before &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attribute">content</span>: <span class="string">"e"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>如果某一列不需要排序，则可设置sortable为false</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ngx-datatable #datatable&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;ngx-datatable-column prop&#x3D;&quot;name&quot; name&#x3D;&quot;name&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;ng-template let-row&#x3D;&quot;row&quot; let-value&#x3D;&quot;value&quot; ngx-datatable-cell-template [sortable]&#x3D;&quot;false&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &lt;span *ngIf&#x3D;&quot;value&quot;&gt;&#123;&#123;value&#125;&#125;&lt;&#x2F;span&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;&#x2F;ng-template&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;ngx-datatable-column&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;&lt;ngx-datatable&gt;</span></pre></td></tr></table></figure>
</li>
<li><p>检索条件重置的时候重置Icon和排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ViewChild(&#39;datatable&#39;) datatable: DatatableComponent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.datatable.sorts &#x3D; [];</span></pre></td></tr></table></figure></li>
</ol>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular如何代理到后端服务器</title>
    <url>/2019/04/14/ng-agent/</url>
    <content><![CDATA[<h4 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h4><pre><code>在Angular应用程序中，我们在开发阶段经常要与后端服务器进行交互，由于前后端是分离的，这个时候我们前端要调用后端接口获取数据就会面临跨域的问题。</code></pre><h4 id="2、代理"><a href="#2、代理" class="headerlink" title="2、代理"></a>2、代理</h4><pre><code>1. 在解决跨域问题前，让我们先了解一下什么是代理？通常代理服务器就是充当我们应用程序和Internet之间的网关，它是客户端和服务器之间的中间服务器，通过客户端请求转发资源。

2. 在Angular中，我们经常在开发环境中使用代理。Angular使用的是webpack dev server在开发模式下（development environment）为应用程序提供服务。

3. 例如下图：我们前端的Angular应用程序运行在4200端口上，而后端服务器运行在3700端口，所有以/api开头的接口调用都会通过代理重定向到后端服务器，并且所有调用都reset到同一端口。</code></pre><a id="more"></a><html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-85a2bb75e9ca7710.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>



<h4 id="3、proxy-conf-json"><a href="#3、proxy-conf-json" class="headerlink" title="3、proxy.conf.json"></a>3、proxy.conf.json</h4><pre><code>在配置代理之前我们需要先了解一下代理相关的配置项：

1. target：定义后端URL
2. pathRewrite：重写路径
3. changeOrigin：如果后端API没有在localhost上运行，则需要将此选项设置为true
4. logLevel：如果要检查代理配置是否正常工作，此选项设置为debug
5. bypass：有时我们必须绕过代理，可以用这个定义一个函数。但它应该在proxy.conf.js而不是proxy.conf.json中定义。（下面会有详细讲解）</code></pre><h4 id="4、使用Angular-CLI进行代理设置"><a href="#4、使用Angular-CLI进行代理设置" class="headerlink" title="4、使用Angular CLI进行代理设置"></a>4、使用Angular CLI进行代理设置</h4><ul>
<li>首先需要在项目根目录下建立文件：proxy.conf.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"/api/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3700"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"changeOrigin"</span>: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>然后在package.json中进行配置，让Angular找到我们配置好的<code>proxy.conf.json</code>文件【第一种方法】</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"scripts"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"ng"</span>: <span class="string">"ng"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"start"</span>: <span class="string">"ng serve --proxy-config proxy.conf.json"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"build"</span>: <span class="string">"ng build"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"test"</span>: <span class="string">"ng test"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"lint"</span>: <span class="string">"ng lint"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"e2e"</span>: <span class="string">"ng e2e"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>让Angular找到我们配置好的<code>proxy.conf.json</code>文件【第二种方法】</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"serve"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"builder"</span>: <span class="string">"@angular-devkit/build-angular:dev-server"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"options"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"browserTarget"</span>: <span class="string">"api:build"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"proxyConfig"</span>: <span class="string">"proxy.conf.json"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">"configurations"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"production"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="attr">"browserTarget"</span>: <span class="string">"api:build:production"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>最后，启动项目，访问接口啦-_-#</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 终端运行命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm start</span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">2</span>. 访问Angular项目</span></pre></td></tr><tr><td class="code"><pre><span class="line">http://localhos<span class="variable">t:4200</span></span></pre></td></tr></table></figure>


<h4 id="5、思考一"><a href="#5、思考一" class="headerlink" title="5、思考一"></a>5、思考一</h4><pre><code>当有一天后端接口地址发生了变化，例如：/api/settings 变成了 /api/app/settings ，这个时候我们前端人员也需要进行相应的修改，可能有改很多地方，那么有没有一种简便的办法一劳永逸呢？答案是肯定的，这个时候proxy.conf.json文件的pathRewrite选项就派上用场了。</code></pre><ul>
<li><p>proxy.conf.json修改如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"/api/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3700"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"changeOrigin"</span>: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"pathRewrite"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"^/api/settings"</span>: <span class="string">"/api/app/settings"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="attr">"^/api"</span>: <span class="string">""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>修改完成之后重启</p>
</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 终端运行命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm start</span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">2</span>. 访问Angular项目</span></pre></td></tr><tr><td class="code"><pre><span class="line">http://localhos<span class="variable">t:4200</span></span></pre></td></tr></table></figure>


<h4 id="6、思考二"><a href="#6、思考二" class="headerlink" title="6、思考二"></a>6、思考二</h4><pre><code>项目里有很多个模块要访问很多模块下的接口，这个时候我们的proxy.conf.json文件重复的代码就变得很多了，这个时候有没有简便一点的重构方法呢？答案仍旧是肯定的，这个时候就要用到前面我们提到过的proxy.conf.js了而不是proxy.conf.json。</code></pre><ul>
<li>proxy.conf.js</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PROXY_CONFIG = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        context: [</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"/api"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"/userapi"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"/settingsapi"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">"/productapi"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        target: <span class="string">"http://localhost:3700"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        secure: <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = PROXY_CONFIG;</span></pre></td></tr></table></figure>

<ul>
<li>同样的，我们也需要在angular.json文件里进行配置，让Angular找到我们的<code>proxy.conf.js</code>配置文件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"serve"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="attr">"builder"</span>: <span class="string">"@angular-devkit/build-angular:dev-server"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="attr">"options"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"browserTarget"</span>: <span class="string">"api:build"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"proxyConfig"</span>: <span class="string">"proxy.conf.js"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">          <span class="attr">"configurations"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">"production"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="attr">"browserTarget"</span>: <span class="string">"api:build:production"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<ul>
<li>修改完成之后重启</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 终端运行命令</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm start</span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">2</span>. 访问Angular项目</span></pre></td></tr><tr><td class="code"><pre><span class="line">http://localhos<span class="variable">t:4200</span></span></pre></td></tr></table></figure>


<h4 id="7、思考三"><a href="#7、思考三" class="headerlink" title="7、思考三"></a>7、思考三</h4><pre><code>现实开发中我们与服务器交互的过程中可能还会涉及到跨多个服务器去请求数据，这个时候我们的项目中就需要调用好几个服务器的地址（协议、端口、IP不一样），这个时候我们该怎么办呢？机灵的小伙伴估计已经想到了，那就是在proxy.conf.json里配置多条就可以了。</code></pre><html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-fd8b3a15b32c763d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>



<ul>
<li>proxy.conf.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"/user/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3700"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"/product/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3800"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="attr">"/settings/*"</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3900"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"secure"</span>: <span class="literal">false</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">"logLevel"</span>: <span class="string">"debug"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h4 id="特别声明"><a href="#特别声明" class="headerlink" title="特别声明"></a>特别声明</h4><p>文章出自medium，我进行了一下翻译和总结，如果想查看原文的，可以通过以下链接进行查看：</p>
<p><a href="https://medium.com/bb-tutorials-and-thoughts/angular-how-to-proxy-to-backend-server-6fb37ef0d025" target="_blank" rel="noopener">Angular — How To Proxy To Backend Server</a></p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>iTunes 未能连接到此 iPhone。 无法分配资源。</title>
    <url>/2019/03/28/mac-iTunes/</url>
    <content><![CDATA[<p>前几天用在Mac上用同步助手給iPhone手机安装ipa应用文件，发现iTunes总是会弹出来<code>iTunes 未能连接到此 iPhone。 无法分配资源。</code>,然后一开始以为是数据线问题，然后换了3根数据线然并卵，手机显示可以充上电，但是无法连接到iTunes，同步助手也无法连接到设备。</p><p>思考了再三，然后在同事的电脑上试试，竟然3根数据线都没有问题，顺利连接上了手机，最后确认是自己的Mac pro出了问题，然后Google了一番，发现原来是之前自己不小心删除了Mac上的<code>/private/var/db/lockdown/</code> <strong>lockdown</strong>文件夹（在学习Flutter的时候，配置IOS环境，不小心把lockdown文件夹删除了…&lt;手动惊恐表情&gt;），操作步骤如下：</p><a id="more"></a>

<ol>
<li><code>cd /private/var/db/</code>  进入到目录</li>
<li><code>ls -la</code> 查看目录下是否有<strong>lockdown</strong>文件夹，如果没有则执行步骤三，有则直接执行步骤四</li>
<li><code>sudo mkdir lockdown</code>  创建空文件夹</li>
<li><code>ls -la</code> 查看<strong>lockdown</strong>文件夹属性<html>
 <img src="https://upload-images.jianshu.io/upload_images/8303589-b897f7cd1d2bffa9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>
我们可以看到文件夹的权限属性、所属用户、所属组都和正确的不匹配。
<html>
 <img src="https://upload-images.jianshu.io/upload_images/8303589-0178e20c0ba552e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html></li>
<li><code>sudo chmod 700 /private/var/db/lockdown</code>  修改文件夹权限属性</li>
<li><code>chgrp _usbmuxd ./lockdown</code>  修改所属组</li>
<li><code>chgrp _usbmuxd ./lockdown</code>  修改所属用户</li>
</ol>
<p><strong>重启iTunes，连接手机，Alert弹出框终于是不弹出来了，顺利识别上了iPhone手机。</strong></p>
<p><a href="https://blog.elcomsoft.com/2018/07/accessing-lockdown-files-on-macos/" target="_blank" rel="noopener">附赠Google链接</a></p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mac-dock</title>
    <url>/2019/03/26/mac-dock/</url>
    <content><![CDATA[<p>最近单位給配置了27寸的大屏幕，在鼠标焦点切换的时候一不小心dock被切到了大屏幕上边，然后不知道咋整，鼠标指针就在屏幕底部上一顿瞎点，神奇的就回到了Mac pro上边，然后就在想，难道没有便捷的方式，比如快捷键什么的，轻松解决我的问题吗？Google科普了下，原来是有的，就是<code>你把鼠标指针放到另一个屏幕的下边框（没有 Dock 的屏幕底部）悬停一会， dock 就会自动过去，想移回来就在原来的屏幕下边框停一会即可。</code></p><a id="more"></a>
<p>另外，这里也安利一个Mac上多屏幕焦点切换的问题解决方案，这个也是Google查到的，链接贴在下边：<br><a href="https://medium.com/thevelops-tech-blog/how-to-switch-focus-between-screens-in-macos-21c6f02883a6" target="_blank" rel="noopener">如何在MacOS中的屏幕之间切换焦点</a></p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-lazyload 动态更新图片bug</title>
    <url>/2019/01/10/vue-lazyload/</url>
    <content><![CDATA[<p>今天小学习了下Vue的使用，当然我的是2.9.4版本，vue-lazyload支持vue 2.x，在做列表分页的时候发现取到数据之后，文字部分都更新了，但是唯独图片不更新，检查了下接口的返回没有问题，再看了下element上的元素，原来图片的src始终没有改变！</p><p>阿西吧…改成src，发现还是亲的好（皮一下-_-#）</p><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 之前的写法</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &lt;img v-lazy&#x3D;&quot;&#39;static&#x2F;&#39;+item.image&quot; alt&#x3D;&quot;&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 改之后的写法:key&#x3D;&quot;item.image&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> &lt;img v-bind:src&#x3D;&quot;&#39;static&#x2F;&#39;+item.image&quot; alt&#x3D;&quot;&quot;&gt;</span></pre></td></tr></table></figure>
<p>仔细想了下难道就没有办法了吗？我就想用了插件咋就这么困难呢！按照以往的经验先上GitHub的issues问题库找找，不行再去stack overfolw查找【技巧：xxx site:stackoverflow.com】，果然又踩了前人留下的坑，翻了几个issues看看，原来加个key就搞定了！</p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-a5fc9304548236f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 完美版的代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;img v-lazy&#x3D;&quot;&#39;static&#x2F;&#39;+item.image&quot; :key&#x3D;&quot;item.image&quot; alt&#x3D;&quot;&quot;&gt;</span></pre></td></tr></table></figure>

<p>总结：查找问题还是先从根源查找，不要上来就各种百度！</p>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>git 多账号配置</title>
    <url>/2018/11/15/git-multiple-account/</url>
    <content><![CDATA[<h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h4><p>有的时候我们肯那个会用到两个<code>github</code>账号，这个时候提交代码就出现了问题，第一个可以提交，但是第二个提交就出现了问题。</p><h4 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h4><ul>
<li>生成公钥和私钥文件</li>
</ul><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">// <span class="number">1</span>. 首先进入到.ssh目录</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~/.ssh</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">2</span>. 查看本地是否已经有存在的公钥和私钥文件(PS: 如果存在了，则只需要生成第二个账号即可，或者全部删除重新生成)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">3</span>.生成SSHkey</span></pre></td></tr><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"你的github邮箱"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">然后按下Enter(回车键)</span></pre></td></tr><tr><td class="code"><pre><span class="line">这个时候提示：Enter <span class="keyword">file</span> in which <span class="keyword">to</span> save the key（xxx/xxx/.ssh/id_rsa）:</span></pre></td></tr><tr><td class="code"><pre><span class="line">我们按照格式键入要保存的文件名即可：id_rsa_xxx   xxx是你自己定义的名字</span></pre></td></tr><tr><td class="code"><pre><span class="line">这个时候又提示：Enter passphrase (<span class="built_in">empty</span> <span class="keyword">for</span> <span class="keyword">no</span> passphrase):</span></pre></td></tr><tr><td class="code"><pre><span class="line">直接按下Enter(回车键)</span></pre></td></tr><tr><td class="code"><pre><span class="line">这个时候又提示：Enter same passphrase again:</span></pre></td></tr><tr><td class="code"><pre><span class="line">继续按下Enter(回车键)</span></pre></td></tr><tr><td class="code"><pre><span class="line">OK，成功之后会提示以下信息(PS: 说明已经成功生成SSHKey):</span></pre></td></tr><tr><td class="code"><pre><span class="line">Your public key <span class="built_in">has</span> been saved in xxx/xxx/.ssh/id_rsa_(你刚才定义的名字).pub</span></pre></td></tr><tr><td class="code"><pre><span class="line">The key fingerprint i<span class="variable">s:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SHA256:lEmncZqtuXuHgZ4XtkVMkazLaTC5XgN0VLjYi3T8Fk8 xxx@xxx.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    The key s randomart image i<span class="variable">s:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    +---[RSA <span class="number">2048</span>]----+</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        <span class="keyword">o</span> <span class="keyword">o</span>..=+<span class="keyword">o</span> |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |       . @. + <span class="keyword">o</span> <span class="keyword">X</span>|</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        B..B <span class="keyword">o</span>   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |       . oB B . E|</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        So <span class="keyword">X</span> = + |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        ..* <span class="keyword">X</span> <span class="keyword">o</span> .|</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |       ..+ O <span class="keyword">o</span>   |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        <span class="keyword">o</span>.* .    |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    |        .<span class="keyword">o</span> .     |</span></pre></td></tr><tr><td class="code"><pre><span class="line">    +----[SHA256]-----+</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">4</span>. 再次查看.ssh目录</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">ls</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">这个时候应会看到有文件: id_rsa_(你刚才定义的名字)、id_rsa_(你刚才定义的名字).pub</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">5</span>. 把公钥配置到GitHub</span></pre></td></tr><tr><td class="code"><pre><span class="line">pbcopy &lt; ~/.ssh/id_rsa_(你刚才定义的名字).pub   // 拷贝公钥到剪贴板</span></pre></td></tr><tr><td class="code"><pre><span class="line">登录github SSH <span class="built_in">keys</span>粘贴进去配置好</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">6</span>. 新的密钥添加到SSH agent中</span></pre></td></tr><tr><td class="code"><pre><span class="line">ssh-<span class="built_in">add</span> id_rsa_(你刚才定义的名字)  // 这里是添加私钥</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">7</span>. 创建配置文件config</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> config  // 新建并打开config文件</span></pre></td></tr><tr><td class="code"><pre><span class="line">键入以下字符：</span></pre></td></tr><tr><td class="code"><pre><span class="line">==============分割线(不要粘贴进去)=================</span></pre></td></tr><tr><td class="code"><pre><span class="line">Host github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">HostName github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">PreferredAuthentications publickey</span></pre></td></tr><tr><td class="code"><pre><span class="line">IdentityFile ~/.ssh/id_rsa</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Host (你刚才定义的名字).github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">HostName github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">PreferredAuthentications publickey</span></pre></td></tr><tr><td class="code"><pre><span class="line">IdentityFile ~/.ssh/id_rsa_(你刚才定义的名字)</span></pre></td></tr><tr><td class="code"><pre><span class="line">==============分割线(不要粘贴进去)=================</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// <span class="number">8</span>. 验证连接</span></pre></td></tr><tr><td class="code"><pre><span class="line">ssh -T git@(你刚才定义的名字).github.<span class="keyword">com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">这个如果成功会出现提示：Hi xxx! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">// 9. 设置本地全局git邮箱和用户名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">git config --global user.email "你的邮箱"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">git config --global user.name  "你的名字"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">git config --list  //  查看设置好的内容</span></span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌浏览器屏幕截图以及书签问题</title>
    <url>/2018/09/19/chrome-screenshots/</url>
    <content><![CDATA[<h5 id="Windows系统："><a href="#Windows系统：" class="headerlink" title="Windows系统："></a>Windows系统：</h5><p>1、<code>F12</code> 打开开发者工具台<br>2、<code>ctrl + shift + p</code>，弹出搜索框之后输入： <code>cap</code><br>3、选中第二个按下回车键，成功保存图片。【即：Mobile– Capture fullsize screenshot】</p><h5 id="Mac-系统："><a href="#Mac-系统：" class="headerlink" title="Mac 系统："></a>Mac 系统：</h5><p>1、<code>commend + option + i</code>，也就是 <code>⌘ + ⌥ + i</code>，打开开发者工具台<br>2、<code>command + shift + p</code>，也就是 <code>⌘ + ⇧ + p</code>，弹出搜索框之后输入： <code>cap</code><br>3、选中第二个按下回车键，成功保存图片。【即：Mobile– Capture fullsize screenshot】</p><a id="more"></a>

<p>最后关于收藏夹链接跳转新页面问题：</p>
<h5 id="Windows系统：-1"><a href="#Windows系统：-1" class="headerlink" title="Windows系统："></a>Windows系统：</h5><p>鼠标悬浮状态下移动到要跳转的收藏条目【链接】然后右键在弹出的悬浮窗体中选择在新的标签页中打开即可</p>
<h5 id="Mac系统："><a href="#Mac系统：" class="headerlink" title="Mac系统："></a>Mac系统：</h5><p>鼠标悬浮状态下移动到要跳转的收藏条目【链接】然后双指按下触摸板在弹出的悬浮窗体中选择在新的标签页中打开即可<br>最后最后，哈哈，安利一个书签栏【即收藏夹】扩展插件：<code>Neater Bookmarks</code></p>
]]></content>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
  <entry>
    <title>mac xxx 文件已经损坏，请移除到废纸篓问题</title>
    <url>/2018/09/19/mac-spctl/</url>
    <content><![CDATA[<p>执行命令：<code>sudo spctl --master-disable</code>  然后安装，<br>安装完毕之后，再执行命令： <code>sudo spctl --master-enable</code> 关闭</p>]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>ngx-datatable组件table重新计算，手动触发resize事件</title>
    <url>/2018/08/10/ngx-datatable/</url>
    <content><![CDATA[<p>最近写Angular项目用到@swimlane/ngx-datatable组件，其中table有一个recalculate()方法，可以重新计算网格大小。由于左侧边栏可以伸缩导致table没有重新计算，看了下ngx-datatable的实现源码，原来是这样的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">* Window resize handler to update sizes.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">@HostListener(&#39;window:resize&#39;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">@throttleable(5)</span></pre></td></tr><tr><td class="code"><pre><span class="line">onWindowResize(): void &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  this.recalculate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><a id="more"></a>

<p>只有触发window的resize事件才能重新计算，故想到一个方法：手动触发一个resize事件加入异步队列得以解决。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1. 得到组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">@ViewChild(&#39;datatable&#39;) datatable;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 2. 触发方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">const e &#x3D; document.createEvent(&#39;Event&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">e.initEvent(&#39;resize&#39;, true, true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">window.dispatchEvent(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">this.datatable.recalculate();</span></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular4日期时间控件 --- laydate</title>
    <url>/2017/12/31/ng-laydate/</url>
    <content><![CDATA[<p>最近在项目中由于要使用到日期控件，但是看了好多github上的许多日期控件都只提供了选择年月日的功能，然后项目中需要精确到时间，自己写还比较麻烦，满足不了需求。由于之前的项目中有用到layDate这个日期控件，可以精确选择到时间，整好满足当前的项目需求，但是由于Angular2.x之后使用typeScript编程，无法直接使用js文件，所以做了些修改，导入项目中，下边是一些引入的步骤，我的版本是（4.2.4），当然其他版本应该也可以。</p><a id="more"></a>
<p>第一步：上官网下载独立版本的日期与时间组件文件包：<a href="http://www.layui.com/laydate/" target="_blank" rel="noopener">http://www.layui.com/laydate/</a></p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-4c1219d365ebc3ac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>


<p>01<br>第二步：Angular2.x之后推荐将资源文件放到 src\assets 目录下，所以将下载好的文件 laydate文件夹下的 theme 文件夹和 laydate.js 一起复制（拷贝）一份到项目 src\assets 目录下，如图所示：</p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-d3963920d48e6276.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>


<p>02<br>第三步：由于我是使用脚手架 angular-cli 生成的项目，所以在引入外部文件的时候需要在 .angular-cli.json 文件中配置，配置项信息如下：</p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-9d8de30f90a3dacd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>


<p>03<br>第四步： 用过laydate的都知道在执行的时候需要一个laydate实例，然后由于是ts文件，直接使用 laydate.render() 方法实例化一个日期组件会报错，说laydate未定义该变量的声明而报错，所以需要在组件你的 xxx.component.ts 文件里边声明laydate变量，声明如下：</p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-2756dfcd4f76d862.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>


<p>04<br>第五步：声明之后按理说就可以实例化一个日期时间控件了，但是仍然为报laydate找不到定义的错误，所以我们需要，原因就是我们程序没有访问到自己的路径，所以我们需要修改 laydate.js文件中theme源文件路径，用文本编辑器打开laydate.js 文件，全局搜索如下内容： modules/laydate/“:”theme/ </p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-54f48625801cb6cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>


<p>05-1<br>修改theme文件夹的路径为 assets/theme，并将返回的默认版本信息删除，修改之后文件如下：</p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-f70f02ad266d04a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>

<p>05-2<br>第六步：做完以上步骤之后，接下来就是轻松愉快是使用啦，(<em>^__^</em>) 嘻嘻。</p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-c24abf8391860706.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>


<p>06-1</p>
<html>
    <img src="https://upload-images.jianshu.io/upload_images/8303589-2fbfc3541dc35b97.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" referrerpolicy="no-referrer">
</html>

<p>06-2<br>laydate的使用手册可以参考官网文档： <a href="http://www.layui.com/doc/modules/laydate.html" target="_blank" rel="noopener">http://www.layui.com/doc/modules/laydate.html</a></p>
]]></content>
      <tags>
        <tag>angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/11/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3>]]></content>
  </entry>
</search>
